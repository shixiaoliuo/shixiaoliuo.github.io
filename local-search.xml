<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javaSE</title>
    <link href="/2023/02/04/JAVASE/"/>
    <url>/2023/02/04/JAVASE/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h1><h2 id="概述与环境搭建"><a href="#概述与环境搭建" class="headerlink" title="概述与环境搭建"></a>概述与环境搭建</h2><p>java由sun公司1995年推出</p><p>Java是程序设计语言</p><p>詹姆斯.高斯林”Java之父“</p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>​程序：程序是为了<strong>模拟现实世界，解决现实问题</strong>而使用计算机语言编写的一系列有序的指令集合。</p><h3 id="Java的历史和特点"><a href="#Java的历史和特点" class="headerlink" title="Java的历史和特点"></a>Java的历史和特点</h3><h4 id="1-Java的历史"><a href="#1-Java的历史" class="headerlink" title="1. Java的历史"></a>1. Java的历史</h4><p>​JavaSE:(Java Platform Standard Edition)Java平台标准版<br>​JavaEE:(Java Platform Enterprise Edition)Java平台企业版企业级开发<br>​C&#x2F;S:(Client&#x2F;Server)结构的应用程序（客户端应用程序，需要下载安装本地应用软件,QQ)<br>​B&#x2F;S:(Browers&#x2F;Server)结构的应用程序（通过浏览器输入域名可以访问程序，百度淘宝）<br>​JavaME:(Java Platform Micro Edition)Java平台微缩版</p><h4 id="2-Java的特点"><a href="#2-Java的特点" class="headerlink" title="2. Java的特点"></a>2. Java的特点</h4><p>​A.面向对象<br>​B.简单性<br>​Java虚拟机，内置垃圾回收机制GC,自动完成空间管理。避免一些问题的产生(内存溢出)，进而更加安全更加有保障。<br>​C.跨平台（操作系统、服务器）<br>​D.开源</p><h3 id="计算机的执行机制"><a href="#计算机的执行机制" class="headerlink" title="计算机的执行机制"></a>计算机的执行机制</h3><h4 id="1-编译执行：在具体的环境中（windows）执行一次翻译（源文件-gt-机器码），执行机器码文件。"><a href="#1-编译执行：在具体的环境中（windows）执行一次翻译（源文件-gt-机器码），执行机器码文件。" class="headerlink" title="1. 编译执行：在具体的环境中（windows）执行一次翻译（源文件-&gt;机器码），执行机器码文件。"></a>1. 编译执行：在具体的环境中（windows）执行一次翻译（源文件-&gt;机器码），执行机器码文件。</h4><h4 id="特点：执行效率高，不可跨平台。"><a href="#特点：执行效率高，不可跨平台。" class="headerlink" title="特点：执行效率高，不可跨平台。"></a>特点：<strong>执行效率高，不可跨平台</strong>。</h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-31/6f0c0b0588917646df9afa5105b1df4b--5228--image-20230131101501915.png" alt="image-20230131101501915"></p><h4 id="2-解释执行：在具体环境中，一行一行的解释并执行，不同环境有自己的的解析器。"><a href="#2-解释执行：在具体环境中，一行一行的解释并执行，不同环境有自己的的解析器。" class="headerlink" title="2. 解释执行：在具体环境中，一行一行的解释并执行，不同环境有自己的的解析器。"></a>2. 解释执行：在具体环境中，一行一行的解释并执行，不同环境有自己的的解析器。</h4><h4 id="特点：执行效率相对低，可以跨平台。"><a href="#特点：执行效率相对低，可以跨平台。" class="headerlink" title="特点：执行效率相对低，可以跨平台。"></a>特点：<strong>执行效率相对低，可以跨平台</strong>。</h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-31/df9069263116926edc6320ef08e07bd4--6efe--image-20230131102121773.png" alt="image-20230131102121773"></p><h4 id="3-Java的执行机制：先编译、再解释"><a href="#3-Java的执行机制：先编译、再解释" class="headerlink" title="3. Java的执行机制：先编译、再解释"></a>3. <strong>Java的执行机制：先编译、再解释</strong></h4><blockquote><p>将.java结尾的源文件，编译成平台中立的字节码（.class）文件,通过解析器，逐行解释执行。</p></blockquote><blockquote><p>将源文件编译成字节码文件（平台中立文件.clss),再将字节码文件进行解释执行，将两种执行机制合二为一。<br>​Java的设计理念：Write Once Run Anywhere</p></blockquote><h4 id="特点：执行效率高，跨平台"><a href="#特点：执行效率高，跨平台" class="headerlink" title="特点：执行效率高，跨平台"></a>特点：<strong>执行效率高，跨平台</strong></h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-31/995b886bef163607ea693a652550cf56--3487--image-20230131103202493.png" alt="image-20230131103202493"></p><h3 id="类的阐述"><a href="#类的阐述" class="headerlink" title="类的阐述"></a>类的阐述</h3><blockquote><p>同一个源文件中可以定义多个类。不建议</p><p>编译后，每个类都会生成独立的.class文件。</p><p>一个类中，只能有一个主方法，每个类都可以有自己的主方法。</p><p>public修饰的类称为公开类，要求<strong>类名</strong>必须与<strong>文件名称</strong>完全相同，包括大小写。</p><p>一个源文件中，只能有一个公开类。</p></blockquote><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><blockquote><p><strong>作用：类似于文件夹，用于管理字节码（.class)文件。</strong></p><p>语法：package 包名。</p><p>位置：必须写在源文件的第一行。</p><p>为生成字节码文件生成前缀的，进而加以区分同名的字节码文件，达到文件管理区分效果。</p><p>加入package之后有效的区分了同名文件的字节码文件</p><p>带包编译：javac -d . 源文件名称.java(自动生成目录结构)。</p><p>带包运行：java 包名.类名（包名+类名又称全限定名）</p><p>采用域名倒置的规则：<a href="http://www.baidu.com.cn->cn.com.baidu.xxx。">www.baidu.com.cn-&gt;cn.com.baidu.xxx。</a></p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">单行注释<span class="hljs-comment">//内容</span><br>多行注释<span class="hljs-comment">/*内容*/</span>  <br>文档注释<span class="hljs-comment">/**内容*/</span><br>*****************************<br>想生成文档必须为<span class="hljs-keyword">public</span> (生成外部文档：javadoc -d . HelloWorld.java)<br>注意：所有注释都不参与编译<br></code></pre></td></tr></table></figure><h3 id="编码规范-标识符命名"><a href="#编码规范-标识符命名" class="headerlink" title="编码规范 标识符命名"></a>编码规范 标识符命名</h3><blockquote><p>语法规定：<br>可以由：字母、数字、_、$组成，但不能包含@、%、空格等其他特殊字符，不能以数字开头<br>不能与关键字、保留字重名。</p></blockquote><blockquote><p>约定俗成：</p><ul><li>望文生义、见名知义。</li><li>类名由一个或多个单词组成，每个单词首字母大写(pascal)</li><li>函数名、变量名由一个或多个单词组成，首单词首字母小写，拼接词首字母大写(camel)。</li><li>包名全小写，只可以使用特殊字符“.”，并且不以“.”开头或结尾。</li><li>常量全大写，多个单词用_连接。</li></ul></blockquote><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><blockquote><ol><li><p>类名（帕斯卡命名法）：HelloWorld TestPackage First</p></li><li><p>方法名（函数名）、变量名：（驼峰命名法）myName main name age</p></li><li><p>包名：域名倒置com.qf.teach.bj.p1.common;&#x2F;&#x2F;全小写不能以数字开头不能以.开头结尾</p></li><li><p>常量名：大小 MAX_VALUE</p></li></ol></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ul><li>Java的由来：</li><li>1995年推出的面向对象的编程语言。三个平台Java SE、Java EE、Java ME,2014年发布的JDK8是商用主流版本。</li><li>Java语言的特点：</li><li>面向对象、简单性跨平台性。</li><li>Java的运行机制：</li><li>先编译、再解程</li><li>第一个应用程序：</li><li>定义java结尾的源文件，书写源代码，javac编译，java运行。</li><li>package包：</li><li>定义在源文件的首行，用于管理.class文件。</li><li>Java的语言规范：</li><li>书写格式、代码规范、三种注释、标识符命名。</li></ul></blockquote><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><blockquote><p>概念：计算机内存中的一块存储空间，是存储数据的基本单元。</p></blockquote><h3 id="变量的定义方式"><a href="#变量的定义方式" class="headerlink" title="变量的定义方式"></a>变量的定义方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//变量的三种定义方武</span><br><span class="hljs-comment">//第一种：先声明再赋值</span><br><span class="hljs-comment">//数据类型变量名；</span><br><span class="hljs-type">int</span> money;<br><span class="hljs-comment">//变量名=值：</span><br>money = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//使用</span><br>System.out.println(money);<br><span class="hljs-comment">//第二种：边声明边赋值</span><br><span class="hljs-comment">//数据类型 变量名=值：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">183</span>;<br><span class="hljs-comment">//使用</span><br><span class="hljs-comment">//print打印 ln line println打印后换行</span><br>System.out.println(age);<br><span class="hljs-comment">//第三种：多个同类型变量声明并赋值（了解）</span><br><span class="hljs-comment">//定义3个整数类型abc并为c赋值为5</span><br><span class="hljs-type">int</span> a, b, c;<br>a = <span class="hljs-number">53</span>;<br>b = <span class="hljs-number">55</span>;<br>c = <span class="hljs-number">59</span>;<br>System.out.println(a);<br>System.out.println(b);<br>System.out.println(c);<br><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-02/79c0375f12df0d11e1d6b98af893f301--3631--1670229172962-4ec15633-4e63-455a-b96b-5349528a7702.png" alt="image.png"></p><h4 id="基本数据类型（4类8种）"><a href="#基本数据类型（4类8种）" class="headerlink" title="基本数据类型（4类8种）"></a>基本数据类型（4类8种）</h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-02/233ff37db3d9054016c8ed2ba335594d--909b--1670229371355-6a0b8b79-67bd-4c22-9b36-4cb2f1b78898.png" alt="image.png"></p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><blockquote><p>整型：byte short int long</p><p>int为整数的默认类型，为其他类型赋值时会由int型向其他类型转换</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-01/a6c9edf79f6a7d2cae806e4717c6f30e--4eec--image-20230201110213068.png" alt="image-20230201110213068"></p></blockquote><blockquote><p>浮点型：float(单精度 7<del>8位) double(双精度 15</del>16位) </p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-01/ca850c8a2b7d227fbe1f0b689f630100--c6ba--image-20230201110242105.png" alt="image-20230201110242105"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//多种赋值</span><br><span class="hljs-type">double</span> d1=<span class="hljs-number">2000.0</span>;<br>system.out.println(d1);<br><span class="hljs-type">double</span> d2=<span class="hljs-number">2E3</span>;<span class="hljs-comment">//2*10^3=2000</span><br>System.out.println(d2);<br><span class="hljs-type">double</span> d3=<span class="hljs-number">2000</span>;<br>System.out.println(d3);<br><span class="hljs-type">double</span> d4=<span class="hljs-number">2000D</span>;<br>System.out.println(d4);<br><span class="hljs-comment">//值的处理</span><br><span class="hljs-type">double</span> d5=<span class="hljs-number">1700000000000000000.0</span><br>System.out.println(d5);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//float类型</span><br><span class="hljs-comment">//注意：double为浮点数的默认类型，如需为float类型赋值时，需要在值的后面追加F”</span><br><span class="hljs-comment">//1默认是int类型 float取值范围包含int类型2147483647 float 3.4E38</span><br><span class="hljs-type">float</span> f=<span class="hljs-number">1</span>;<br>System.out.println(f);<br><span class="hljs-comment">//1.0默认double类型float取值范围无法覆盖double取值范围 不兼容报错了</span><br><span class="hljs-comment">//float f2=1.8；</span><br><span class="hljs-type">float</span> f2=<span class="hljs-number">1.8F</span>;<br>System.out.println(f2);<br><br><span class="hljs-type">double</span> d=(<span class="hljs-number">1.4</span>-<span class="hljs-number">0.5</span>)/<span class="hljs-number">0.9</span>; <br>System.out.println(d);  <span class="hljs-comment">//0.9999999999999999</span><br><br><span class="hljs-type">double</span>不适用于精准计算,因为计算时会转换为二进制进行计算<br></code></pre></td></tr></table></figure></blockquote><h5 id="非数值类型"><a href="#非数值类型" class="headerlink" title="非数值类型"></a>非数值类型</h5><blockquote><p>布尔型：boolean</p><p>Java中的boolean类型不参与算数运算</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-01/5d1ad6781ac3730243f1ad9eb6af602f--d1ab--image-20230201110258276.png" alt="image-20230201110258276"></p></blockquote><blockquote><p>字符型：char</p><p>ASCII(美国标准信息交换码) 码   48：0  65：A  97：a</p><p>Unicode(万国码)中每个字符都对应一个二进制整数，可以使用多种方式赋值。</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-01/bcbf441947795443cc1e9618f0c5c449--653d--image-20230201110321962.png" alt="image-20230201110321962"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">字符赋值：<span class="hljs-type">char</span> c1=<span class="hljs-string">&#x27;A&#x27;</span>;(通过<span class="hljs-string">&#x27;&#x27;</span>描述为字符赋值)<br>整数赋值：<span class="hljs-type">char</span> c2=<span class="hljs-number">65</span>;(通过十进制数<span class="hljs-number">65</span>在字符集中对应的字符赋值)<br>进制赋值：<span class="hljs-type">char</span> c3=<span class="hljs-string">&#x27;\u0041&#x27;</span>;(通过十六进制数<span class="hljs-number">41</span>在字符集中所对应的字符赋值)<br></code></pre></td></tr></table></figure></blockquote><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><blockquote><p>除了基本数据类型其余均是引用数据类型</p></blockquote><h4 id="基本类型转换"><a href="#基本类型转换" class="headerlink" title="基本类型转换"></a>基本类型转换</h4><p>容量小的的类型会自动转换为容量大的数据类型<br>容量从小到大：byte&lt;short&#x2F;char&lt;int&lt;long&lt;float&lt;double</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li><p><strong>byte&#x2F;short&#x2F;char在进行运算时，结果会自动转为int类型</strong>。</p></li><li><p>整数字面量默认类型为int,小数字面量默认类型为double。</p></li><li><p>int转换为float或long转换为double可能存在精度丢失。</p></li><li><p>&#96;&#96;&#96;java<br>short g &#x3D; 65; char h &#x3D; g; &#x2F;&#x2F;因为short 和 char 范围不全为交集，因此不可以直接赋值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>   <br><br><span class="hljs-comment">##### 自动类型转换：</span><br><br>&gt; 两种数据类型要兼容，目标类型大于原类型<br><br><span class="hljs-comment">##### 强制类型转换：</span><br><br>&gt; <span class="hljs-number">1</span>. 两种数据类型要兼容，目标类型小于原类型;<br>&gt;<br>&gt; <span class="hljs-number">2</span>. 可以通过在源类型前，加上（目标类型），达到强制类型转换的目的。可能有损失;<br>&gt;<br>&gt; <span class="hljs-number">3</span>. 如果小数转整数，失去精度。小数点之后的值无法保留。<br><br>​<br><br>容量大的类型转换为容量小的数据类型时，要加上强制转换符。<br>有可能存在精度降低或数据溢出。<br><br><span class="hljs-comment">##### 自动类型提升</span><br><br>&gt;- 进行算数运算时：<br>&gt;<br>&gt;- 两个操作数有一个为double,计算结果提升为double。<br>&gt;<br>&gt;- 如果操作数中没有double,有一个为float,计算结果提升为float。<br>&gt;<br>&gt;- 如果操作数中没有float,有一个为long,计算结果提升为long。<br>&gt;<br>&gt;- 如果操作数中没有long,有一个为int,计算结果提升为int。<br>&gt;<br>&gt;- 如果操作数中没有int,均为short或byte或char,计算结果仍l旧提升为int。<br>&gt;<br>&gt;<br>&gt;<br>&gt;- 特殊：任何类型与String相加(+)时，实为拼接，其结果自动提升为String.<br>&gt;- 口诀：<br>&gt;- +号左右两端有字符串整体提升为字符串类型<br>&gt;- +号左右两端无字符串+是算术运算符作加法操作<br><br><span class="hljs-comment">###### 总结</span><br><br>&gt;- 强制类型转换规则：<br>&gt;- 整数长度足够，数据完整。<br>&gt; - 例：int i=<span class="hljs-number">100</span>:byte b=(byte)i; <span class="hljs-regexp">//</span>b=<span class="hljs-number">100</span><br>&gt;- 整数长度不够，数据截断。<br>&gt; - 例：int i=<span class="hljs-number">10000</span>;byte b =(byte)i; <span class="hljs-regexp">//</span>b=<span class="hljs-number">16</span>（符号位变化，可能变为负数)<br>&gt;- 小数强转整数，数据截断。<br>&gt; - 例：double d=<span class="hljs-number">2.5</span>; int i = (int)d; <span class="hljs-regexp">//i</span>=<span class="hljs-number">2</span>(小数位舍掉)<br>&gt;- 字符整数互转，数据完整。<br>&gt; - 例：char c=<span class="hljs-number">65</span>;int i=c; <span class="hljs-regexp">//i</span>=<span class="hljs-number">65</span><br>&gt;- boolean的取值为true/false,不可与其他类型转换。<br><br><span class="hljs-comment">#### 转义字符</span><br><br>![image-<span class="hljs-number">20230201143615931</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/shixiaoliuo/im</span>age-store<span class="hljs-regexp">/main/</span>PicGo<span class="hljs-regexp">/2023-02-01/</span><span class="hljs-number">9</span>ab85d8dfe2ea7898cd5944f7110f7ef--<span class="hljs-number">89</span>c0--image-<span class="hljs-number">20230201143615931</span>.png)<br><br><span class="hljs-comment">#### 扩展内容</span><br><br>![image-<span class="hljs-number">20230201163320214</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/shixiaoliuo/im</span>age-store<span class="hljs-regexp">/main/</span>PicGo<span class="hljs-regexp">/2023-02-01/</span><span class="hljs-number">9</span>d665cc556259098f8dc48720f4967a7--c40b--image-<span class="hljs-number">20230201163320214</span>.png)<br><br>![image-<span class="hljs-number">20230201163403252</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/shixiaoliuo/im</span>age-store<span class="hljs-regexp">/main/</span>PicGo<span class="hljs-regexp">/2023-02-01/</span><span class="hljs-number">062</span>f403d1a947a2de74dc2587fdd5e07--<span class="hljs-number">8</span>d64--<span class="hljs-number">062</span>f403d1a947a2de74dc2587fdd5e07--<span class="hljs-number">74</span>fb--image-<span class="hljs-number">20230201163403252</span>.png)<br><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> = -<span class="hljs-number">45</span><br><br>![image-<span class="hljs-number">20230201170415172</span>](https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/shixiaoliuo/im</span>age-store<span class="hljs-regexp">/main/</span>PicGo<span class="hljs-regexp">/2023-02-01/</span><span class="hljs-number">81</span>ab77c4262e7fe6a18f7d4cb09c6fd1--<span class="hljs-number">1</span>e16--image-<span class="hljs-number">20230201170415172</span>.png)<br><br><span class="hljs-comment">## 运算符</span><br><br>&gt;<span class="hljs-number">1</span>. 算术运算符+ - * / % ++ --<br>&gt;<br>&gt;<span class="hljs-number">2</span>. 赋值运算符= += -= *= /= %=<br>&gt;<br>&gt;<span class="hljs-number">3</span>. 关系运算符&amp;&amp; || !<br>&gt;<span class="hljs-number">4</span>. 三元运算符<br><br><span class="hljs-comment">#### 面试题</span><br><br>```java<br><span class="hljs-regexp">/*面试题*/</span><br>byte y = <span class="hljs-number">5</span>;<br><span class="hljs-regexp">//y</span>=y+<span class="hljs-number">1</span>; <span class="hljs-regexp">//</span>编译不通过，因为byte、short、char进行运算时结果都会转换为int<br>y = (byte)(y+<span class="hljs-number">1</span>);<br>System.out.println(y);<br><br>****************************************<br>    <br>byte y = <span class="hljs-number">5</span>;<br>y += <span class="hljs-number">1</span>; <span class="hljs-regexp">//</span>编译通过，因为在使用+=等赋值运算符运算时会自动进行处理(系统会自动强制将运算结果转换为目标变量的类型) y = (byte) (y+<span class="hljs-number">1</span>)<br>System.out.println(y);<br></code></pre></td></tr></table></figure></li></ol><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>使用运算符连接的变量或字面值，并可以得到一个最终结果。</p></blockquote><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><blockquote><ul><li><p>使用顺序：</p></li><li><p>导入import  java.util.Scanner</p></li><li><p>声明Scanner类型的变量。</p></li><li><p>使用Scanner类中对应的方法(区分类型)：</p></li><li><p>.nextlnt();&#x2F;&#x2F;获得整数</p></li><li><p>.nextDouble();&#x2F;&#x2F;获得小数</p></li><li><p>.next();&#x2F;&#x2F;获得字符串</p></li><li><p>.next().charAt(0);&#x2F;&#x2F;获得单个字符</p></li><li><p>注：如果输入了不匹配的数据，则会产生java.util.InputMismatchException</p></li></ul></blockquote><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>主要内容：equals、getClass、hashCode、toString</p><p>含义：该类是所有类的基类&#x2F;超类<br>理解：一个类没有明确继承的父类，都默认继承Object，所以Object类是所有类的祖先类<br>Object类中的方法：</p><p>equals()、getClass()、hashCode()、toString()</p><p>思考：<br>1.Object类中有什么属性和方法？</p><p>​equals、getClass、hashCode、toString</p><p>2.为什么一个类没有明确的父类就必须默认继承0bject？为什么有这种设计思想呢？</p><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><blockquote><p>比较两个对象的内存地址是否相同，只能用于对象之间的比较。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&gt;Object o2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&gt;System.out.println(o1.equals(o2));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>基本数据类型用 &#x3D;&#x3D; 比较的是值是否相等</p><p>引用数据类型用 &#x3D;&#x3D; 比较的是内存地址是否相同</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/52da7162168eaa97c5bca296643834a6--5dd6--image-20221215201526831.png" alt="image-20221215201526831"></p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/4d39fc7283ff407b8c6c890ce60672ab--54fd--image-20221213173209137.png" alt="image-20221213173209137"></p><p>在堆中创建该对象的class对象，该class对象是class文件的访问入口（该对象的class对象和该对象不是同一种东西，该对象的class对象只在堆中创建一次，且被Class类管理；而类对象可以被创建多次，每次都不是同一个对象）<br>jvm通过class对象去访问该对象的其他成员<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1670209124286-c2c681f9-6c33-48d3-bd6e-9b26f776ac88.png#averageHue=%23e9e3e0&clientId=uaa47a924-1c2d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=350&id=u974998b6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=401&originWidth=989&originalType=binary&ratio=1&rotation=0&showTitle=false&size=129564&status=done&style=none&taskId=u70185093-734b-43d1-b255-466cf6fc197&title=&width=863.1272427948261" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/18ed90c6f9d805f8ccd5c89a12493136--1d74--image-20221213195308493.png" alt="image-20221213195308493"></p></blockquote><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><blockquote><p>作用：获取到该对象的class对象。</p><p>new对象的过程我们称作实例化</p><p>该类的class对象在堆中只被创建一次（单例）。</p><p>该类的class文件只加载一次到方法区。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&gt;Object o2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&gt;System.out.println(o1.getClass()==o2.getClass());<span class="hljs-comment">//true  因为在创建o1时就创建了该类的class对象，且只创建一次，所以o1和o2共用一个class对象</span><br></code></pre></td></tr></table></figure><p>类的class对象能做啥—&gt;可以通过class对象获取到该类class文件中的所有代码、利用反射机制去随意操作该类</p></blockquote><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><blockquote><p>作用：获取到该对象的hash对象。</p><p>理解hash值：</p><p>1、hash值是int类型</p><p>2、两个对象的hash值可能一样（概率很小）</p><p>3、hash值相当于内存地址+散列算法（两个对象的内存地址不可能相同，但加上散列算法后，最后的hash值就有可能相同）</p><p>4、hash值不等于内存地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&gt;Object o2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>&gt;<span class="hljs-comment">//hash值不同的情况</span><br>&gt;System.out.println(o1.hashCode());<span class="hljs-comment">//21685669</span><br>&gt;System.out.println(o2.hashCode());<span class="hljs-comment">// 2133927002</span><br><br>&gt;<span class="hljs-comment">//hash值相同的情况</span><br>&gt;System.out.println(<span class="hljs-string">&quot;Aa&quot;</span>.hashCode());<span class="hljs-comment">//2112</span><br>&gt;System.out.println(<span class="hljs-string">&quot;BB&quot;</span>.hashCode());<span class="hljs-comment">//2112</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><blockquote><p>直接打印对象默认调用toString();</p><p>作用：获取对象的字符串形式的数据（将对象转换为字符串，在Object中被定义返回该对象的类名+@+其哈希值的十六进制）<br>Java提供的Object的toString方法源码：</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/3627f9964c6188d06eb59a8c7d1771de--568d--image-20221213203402590.png" alt="image-20221213203402590"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>&gt;<span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br><span class="hljs-comment">//     类名                    @     哈希值的十六进制</span><br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="深入Object之方法的应用"><a href="#深入Object之方法的应用" class="headerlink" title="深入Object之方法的应用"></a>深入Object之方法的应用</h3><blockquote><p>equals()：比较两个对象的内存地址是否相同<br>标杆作用：比较两个对象是否相同，Object不同的字类，有着不同的判断标准，重写equals方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* 重写equals方法</span><br><span class="hljs-comment">&gt;*/</span><br>&gt;<span class="hljs-meta">@Override</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br> <span class="hljs-comment">//比较对象的内存地址：若相同，则返回true</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == obj)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br><br> <span class="hljs-comment">//比较两个对象的属性：若相同，则返回true</span><br> <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) obj;<br> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.username.equals(u.username))&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br> <span class="hljs-comment">//不是同一个对象、指定对象属性也不相同，则返回false</span><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>比较过程</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1670221018163-a0b36474-77e1-4d65-9b9e-c8d822232378.png#averageHue=%23f7f7f7&clientId=uaa47a924-1c2d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=364&id=ufb4cf680&margin=%5Bobject%20Object%5D&name=image.png&originHeight=417&originWidth=932&originalType=binary&ratio=1&rotation=0&showTitle=false&size=143786&status=done&style=none&taskId=u80d5bf3e-895b-49f0-9341-112730681f0&title=&width=813.3817899744973" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/f884f6c719dee3c384872d91c3afcd88--13d9--image-20221214174327837.png" alt="image-20221214174327837"></p><p>getClass()：反射机制会用到<br>hashCode()：集合里会用到<br>toString()：获取对象的字符串表示<br>标杆作用：Object的子类重写toString就可以输出要输出的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Override</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-keyword">return</span> username + <span class="hljs-string">&quot; -- &quot;</span> + password + <span class="hljs-string">&quot; -- &quot;</span> + name;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="深入Object之String的底层"><a href="#深入Object之String的底层" class="headerlink" title="深入Object之String的底层"></a>深入Object之String的底层</h3><blockquote><p>String的底层是什么、为什么使用equals而不用&#x3D;&#x3D;?</p><p>Stirng的底层数据结构为字符数组。底层将字符串转换为字符数组<br>String继承Object是属于类，则使用&#x3D;&#x3D;比较两个对象时，比较的是内存地址是否相同。但String的equals方法进行了重写，比较字符数组是否相同。</p><p>模拟String底层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//字符数组，存放字符串</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] value;<br><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-title function_">MyString</span><span class="hljs-params">(String original)</span> &#123;<br>&gt;value=original.toCharArray();<br>&gt;&#125;<br><br><br>&gt;<span class="hljs-meta">@Override</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>&gt;<span class="hljs-comment">//若两个字符串对象地址一致，则为同一个对象，返回true</span><br>&gt;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == obj)&#123;<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&gt;&#125;<br>&gt;<span class="hljs-comment">//两个字符数组长度不一致，则返回false</span><br>&gt;MyString m=(MyString) obj;<br>&gt;<span class="hljs-type">char</span>[] value = <span class="hljs-built_in">this</span>.value;<br>&gt;<span class="hljs-type">char</span>[] value1 = m.value;<br>&gt;<span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> value.length;<br>&gt;<span class="hljs-keyword">if</span>(length!=value1.length)&#123;<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&gt;&#125;<br>&gt;<span class="hljs-comment">//两个字符数组中，存在任意字符不同返回false</span><br>&gt;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>&gt;<span class="hljs-keyword">if</span> (value[i]!=value1[i])&#123;<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&gt;&#125;<br>&gt;&#125;<br>&gt;<span class="hljs-comment">//否则返回true</span><br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&gt;&#125;<br><br>&gt;<span class="hljs-meta">@Override</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>&gt;String str=<span class="hljs-string">&quot;&quot;</span>;<br>&gt;<span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c: value) &#123;<br>&gt;str+=c;<br>&gt;&#125;<br>&gt;<span class="hljs-keyword">return</span> str;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h2><blockquote><ol><li><p>修饰类 ：该类不能被继承 作用场景：工具类。</p></li><li><p>修饰方法：该方法不能被重写。</p></li><li><p>修饰变量：该变量就变成常量（不能被重新赋值）通常和static一起使用。常量是存放在常量池中的，直到项目结束后才会被销毁。</p></li><li><p>常量的命名规范：所有字母大写，但单词之间使用_隔开</p></li></ol></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><blockquote><p>​该方法在某个类中，但是具体不好实现，则将该方法变成抽象方法，则所在的类成为抽象类，方法的具体实现在抽象类的非抽象子类中。</p><p>抽象类是交给非抽象的子类实现的。</p><p>注意：<br>（1）抽象方法必须在抽象类中。<br>（2）抽象方法必须被非抽象子类实现<br>例如：<br>在抽象类中定义一个抽象 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-comment">//抽象方法,没有具体实现，具体的实现交给非抽象子类实现；抽象方法所在的类必须为抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过多次继承后，在非抽象子类中实现具体方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SiChuan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Chinese</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SiChuan</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SiChuan</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> age, String id)</span> &#123;<br><span class="hljs-built_in">super</span>(name, sex, age, id);<br>&#125;<br><span class="hljs-comment">//抽象方法的实现</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hobby</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">super</span>.getName()+<span class="hljs-string">&quot;爱好打麻将&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">super</span>.getName()+<span class="hljs-string">&quot;吃火锅&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="深入抽象类及抽象方法"><a href="#深入抽象类及抽象方法" class="headerlink" title="深入抽象类及抽象方法"></a>深入抽象类及抽象方法</h3><h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><blockquote><ol><li>抽象类中只能有抽象方法吗？</li></ol><p>​抽象类中除了抽象方法，也可以有普通类中有的成员变量、成员方法、静态方法、构造方法。</p><ol start="2"><li>抽象类中可以没有抽象方法吗？</li></ol><p>​抽象类中可以没有抽象方法，但是毫无意义；如果一个类没有抽象方法，就没有必要设计成抽象类。</p><ol start="3"><li>如果父类是抽象类，则子类必须实现父类的抽象方法吗？</li></ol><p>​父类是抽象类，其子类如果也是抽象类，子类可以不实现抽象方法。</p><ol start="4"><li>抽象类不能有构造方法？</li></ol><p>​抽象类可以有构造方法。</p><ol start="5"><li>可以使用new关键字来创建抽象类对象？</li></ol><p>​抽象类是不可以new对象的。创建的是匿名内部类的对象</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/b789e8fe59dc845d5448e833f387b7ac--0c93--image-20221214221406503.png" alt="image-20221214221406503"></p><ol start="6"><li>一个类设计成抽象类的原因是什么？</li></ol><p>​若类中的某个方法不好实现，则将这个方法变作抽象方法，抽象方法必须在抽象类中，因此该类变成抽象类。</p><ol start="7"><li>抽象类的缺点：不能new对象。</li></ol></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>接口是一个特殊的抽象类，接口中只能有静态常量和抽象方法，JDK1.8开始允许使用静态方法和默认方法。</p><p>作用：指定规范（列大纲）</p><p>接口是不能有对象的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStudentManagerSystem</span> &#123;<br><span class="hljs-comment">//属性 默认添加public static final</span><br><span class="hljs-type">int</span> NUM=<span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//接口中的抽象方法 默认添加public abstract</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student stu)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String classId,String id)</span>;<br><br><span class="hljs-comment">//jdk1.8新特性 --静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticMethod</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;接口中的静态方法&quot;</span>);<br>&#125;<br><span class="hljs-comment">//jdk 1.8新特性--默认方法</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultMethod</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;接口中的默认方法&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="深入接口："><a href="#深入接口：" class="headerlink" title="深入接口："></a>深入接口：</h3><blockquote><p>类-接口的关系：</p><p>​类与类：单继承</p><p>​类与接口：多实现</p><p>​接口与接口：多继承</p></blockquote><h4 id="面试题：-1"><a href="#面试题：-1" class="headerlink" title="面试题："></a>面试题：</h4><blockquote><ol><li>一个类可以实现多个接口？</li></ol><ul><li>可以</li></ul><ol start="2"><li>一个接口可以实现多个接口？</li></ol><ul><li>不可以,接口不能实现接口</li></ul><ol start="3"><li>接口里面的方法不一定都是抽象的？</li></ol><ul><li>JDK1.8之前，接口中只能有静态常量和抽象方法，JDK1.8开始可以使用静态方法和默认方法。</li></ul><ol start="4"><li>接口解决了类的单继承问题？</li></ol><ul><li>是的（一个类可以实现多个接口）</li></ul><ol start="5"><li>一个类是否可以继承一个类并同时实现多个接口？</li></ol><ul><li>可以</li></ul><ol start="6"><li>接口可以new对象？</li></ol><ul><li>不可以，创建出来的的是匿名内部类的对象</li><li><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/830f37d27ba37b8cad5822d4819d384d--91e5--image-20221214224700933.png" alt="image-20221214224700933"></li></ul></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>（1）一个类可以实现多个接口、一个接口可以继承多个接口。<br>（2）JDK1.8之前，接口中只能有静态常量和抽象方法，JDK1.8开始可以使用静态方法和默认方法。<br>（3）接口解决了类的单继承问题。<br>（4）一个类可以继承一个类并同时实现多个接口。<br>（5）接口不能new 对象。</p></blockquote><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>开闭原则、类的多态、接口的多态、</p><p>设计原则：前人总结的经验，告诉我们什么事情不能干（开闭原则、接口分离原则）<br>设计模式：前人总结的经验，告诉我们怎么干（单例模式、简单工厂模式。。）</p><p>开闭原则 OCP</p><p>Oopen 在需求更改时，对于创建类是欢迎的</p><p>Cclose 在需求更改时，改变原有类是拒绝的</p><p>Pprinciple原则</p><p>原因：需求更改时，创建类，因为新的类和原来的类是没有关系的，bug的几率几乎为0，</p><p>​但是，改变原来的类，可能会出现bug</p></blockquote><h3 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h3><blockquote><p><strong>类的多态：子类对象指向父类引用</strong><br><strong>父类引用中存储的是子类对象在堆中的地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-type">V</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<span class="hljs-comment">//左边是父类引用 右边是子类对象</span><br>&gt;car.run();<br><br>&gt;程序运行时，Java从实例所属的类开始寻找匹配的方法执行，如果当前类中没有匹配的方法，则沿着继承关系逐层向上，依次在父类或各祖先类中寻找匹配方法，直到Object类。<br></code></pre></td></tr></table></figure></blockquote><h3 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h3><blockquote><p>接口的多态：<strong>实现类对象指向接口的引用</strong>。<br><strong>接口的引用中存储的是实现类对象在堆中开辟的内存地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br><br><span class="hljs-comment">//接口的多态：实现类对象指向接口的引用</span><br><span class="hljs-comment">//接口的引用中存储的是实现类对象在堆中开辟的内存地址</span><br><span class="hljs-type">IUSB</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Keyboard</span>();----多态<br><br>computer.connction(usb);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/fd891b9e2a540eb653f3f59062b38f01--ff95--image-20221215161201180.png" alt="image-20221215161201180"></p></blockquote><h3 id="补充：类型转换"><a href="#补充：类型转换" class="headerlink" title="补充：类型转换"></a>补充：类型转换</h3><blockquote><ol><li><h4 id="自动转型-x2F-向上转型：子类类型转父类类型"><a href="#自动转型-x2F-向上转型：子类类型转父类类型" class="headerlink" title="自动转型&#x2F;向上转型：子类类型转父类类型"></a>自动转型&#x2F;向上转型：子类类型转父类类型</h4></li></ol><p>​<strong>父类引用可以调用父类非私有化的成员变量</strong><br>​<strong>父类引用可以调用父类非私有化的成员方法</strong><br>​<strong>父类引用可以调用子类重写父类的成员方法</strong><br>​<strong>父类引用不可以调用子类独有的成员属性和方法</strong></p><h5 id="注意：向上转型就是类的多态"><a href="#注意：向上转型就是类的多态" class="headerlink" title="注意：向上转型就是类的多态"></a>注意：向上转型就是类的多态</h5><p>向上转型的优缺点：（1）升级需求时不违反OCP原则 （2）不能调用子类独有的成员属性和方法</p><ol start="2"><li><h4 id="强制转型-x2F-向下转型：父类引用转为子类引用。"><a href="#强制转型-x2F-向下转型：父类引用转为子类引用。" class="headerlink" title="强制转型&#x2F;向下转型：父类引用转为子类引用。"></a>强制转型&#x2F;向下转型：父类引用转为子类引用。</h4></li></ol><h5 id="注意：父类对象不能转为子类引用，向下转型前必须向上转型。"><a href="#注意：父类对象不能转为子类引用，向下转型前必须向上转型。" class="headerlink" title="注意：父类对象不能转为子类引用，向下转型前必须向上转型。"></a>注意：父类对象不能转为子类引用，向下转型前必须向上转型。</h5><p>经验：向下转型是不安全的（ClassCastException–类型转换异常），必须使用instanceof去判断类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//向下转型前必须向上转型</span><br>&gt;<span class="hljs-type">V</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<span class="hljs-comment">//父类引用=子类对象</span><br>&gt;Car c=(Car) car;<span class="hljs-comment">//子类引用=（子类对象）父类引用（实际指向子类对象）</span><br>&gt;car.run();<br><br>&gt;<span class="hljs-comment">/*</span><br><span class="hljs-comment">&gt;以下转型是不被允许的；因为只有父类类型引用能转为实际指向子类对象的类型</span><br><span class="hljs-comment">&gt;Car car=(Car)new V()</span><br><span class="hljs-comment">&gt;*/</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/bc33689e2899a798ad55d03d7647d52c--10af--image-20221215162453005.png" alt="image-20221215162453005"></p></blockquote><hr><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>含义：一个类的里面去声明另一个类</p><p>分类：</p><ol><li>成员内部类</li><li>静态内部类</li><li>接口内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><p>如果B类对象只在A类中使用，且B类中使用A类所有的属性，则可以将B类设置为A类的成员内部类。</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/6ee27815de5e5bd5e968705329adda2d--ccf6--image-20221215184531666.png" alt="image-20221215184531666"></p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><blockquote><p>创建成员内部类之前，必须先创建外部类对象</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/8ecf05a6c53f89901031228343878b18--9746--image-20221215184740473.png" alt="image-20221215184740473"></p><p>成员内部类中的方法可以调用外部类的所有属性和方法                                           </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">V</span> &#123;<br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> a=<span class="hljs-number">12</span>;<br><br>&gt;<span class="hljs-comment">//成员内部类；和类的成员一个级别</span><br>&gt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>&gt;<span class="hljs-comment">//可以使用外部类的所有成员，若和内部类成员同名则按就近原则，或外部类名.this.a来调用外部类成员</span><br>&gt;System.out.println(a);<br>&gt;System.out.println(V.<span class="hljs-built_in">this</span>.a);<br>&gt;&#125;<br>&gt;&#125;<br><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>&gt;<span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>&gt;car.print();<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>成员内部类的class文件：外部类名$内部类名.class – Outter$Inner.class</p></blockquote><hr><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><p>创建静态内部类不用创建外部类对象</p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ol><li>静态内部类只能调用外部类的静态属性</li><li>如果B类对象只在A类中使用，并且B类中只使用到了A类静态的属性，就可以将B类设置A类的静态内部类</li></ol><h4 id="经典面试题："><a href="#经典面试题：" class="headerlink" title="经典面试题："></a>经典面试题：</h4><p>​静态内部类中为什么不能调用外部类的非静态属性？</p><p>​成员属性必须new对象时才会在堆内存中得到体现</p><p>​创建静态内部类的对象时，不用创建外部类对象，所以外部类的成员属性不在内存中，静态内部类就无法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//创建静态内部类的对象</span><br><span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outter</span>.Inner();<br><br><span class="hljs-comment">//调用内部类中的method方法</span><br>inner.method();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>静态内部类的class文件：外部类名$内部类名.class</p><h3 id="接口内部类"><a href="#接口内部类" class="headerlink" title="接口内部类"></a>接口内部类</h3><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h4><p>接口内部类与静态内部类创建的方式是一致的</p><h4 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h4><p>如果B类对象只能在A接口中使用，就可以将B类设置A接口的接口内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOutter</span> &#123;<br><br><span class="hljs-comment">//接口内部类</span><br><span class="hljs-comment">//默认添加public static</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;接口内部类&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//创建成员内部类的对象</span><br><span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOutter</span>.Inner();<br><br><span class="hljs-comment">//调用内部类中的method方法</span><br>inner.method();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接口内部类的class文件：外部类名$内部类名.class</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h4 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h4><p>​局部内部类使用到外部类的局部变量，JDK1.8开始该变量（默认加上final修饰）会自动变成常量（因为常量的生命周期更长，可以让局部内部类对象随时调用），JDK1.8之前需要手动加final</p><h4 id="面试题：-2"><a href="#面试题：-2" class="headerlink" title="面试题："></a>面试题：</h4><p>​局部内部类使用到外部类的局部变量，变量为什么会变成常量？</p><p>​JDK1.8后默认加上final修饰符，自动变为常量，常量的生命周期更长，可以让局部内部类对象随时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outter</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">outterMethod</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;--&quot;</span>+num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/d3e0400b499b584dcc126e30e230f26b--4ccb--image-20221215201950293.png" alt="image-20221215201950293"></p><p>局部内部类的class文件：外部类$数字 内部类.class</p><p>为什么有数字？因为不同成员内部类里的局部内部类名可能一样</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>应用场景：A类的子类在整个项目中只创建了一次对象时，就没有必要创建子类，直接newA类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//创建的是匿名内部类的对象</span><br><span class="hljs-comment">//底层：</span><br><span class="hljs-comment">//1.创建匿名类，继承A类，重写method方法</span><br><span class="hljs-comment">//2.创建匿名子类的对象</span><br><span class="hljs-comment">//3.赋值给父类的引用(多态)</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>&#125;<br>&#125;;<br><br>a.method();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>应用场景：I1接口的实现类在整个项目中只new了一个对象，就没有必要去创建实现类，直接new接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//创建匿名内部类的对象</span><br><span class="hljs-comment">//底层：</span><br><span class="hljs-comment">//1.创建匿名类，实现I1接口中的method方法</span><br><span class="hljs-comment">//2.创建匿名实现类的对象</span><br><span class="hljs-comment">//3.赋值给I1的引用（多态）</span><br><span class="hljs-type">I1</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">I1</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br>&#125;;<br><br>i1.method();<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类的class文件：外部类$数字.class</p><p>为什么有数字？因为可以在外部类中new多次</p><h3 id="成员内部类的应用-单向链表"><a href="#成员内部类的应用-单向链表" class="headerlink" title="成员内部类的应用-单向链表"></a>成员内部类的应用-单向链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 链表;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OneWayLinkedList</span> &#123;<br>    <span class="hljs-comment">//单向链表的第一个节点（头节点）--null</span><br>    <span class="hljs-keyword">private</span> Node first;<br>    <span class="hljs-comment">//单向链表的最后一个节点（尾节点）--null</span><br>    <span class="hljs-keyword">private</span> Node last;<br><br>    <span class="hljs-comment">//添加节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String element)</span>&#123;<br>        Node node=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(element,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//若first为空则新节点为first</span><br>        <span class="hljs-keyword">if</span>(first==<span class="hljs-literal">null</span>)&#123;<br>            first=node;<br>        &#125;<br>        <span class="hljs-comment">//若last为空，则新节点为last</span><br>        <span class="hljs-keyword">if</span>(last==<span class="hljs-literal">null</span>)&#123;<br>            last=node;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则将新节点设置为last的下一个节点，并将last指向新结点。</span><br>            last.setNext(node);<br>            last=node;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getFirstNode</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br><span class="hljs-comment">//    public Node getAll()&#123;</span><br><span class="hljs-comment">//        Node node = first;</span><br><span class="hljs-comment">//        while (node!=null)&#123;</span><br><span class="hljs-comment">//            String element = first.getElement();</span><br><span class="hljs-comment">//            System.out.println(element);</span><br><span class="hljs-comment">//            node = first.getNext();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        return node;</span><br><span class="hljs-comment">//    &#125;</span><br><br><span class="hljs-comment">//节点类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-keyword">private</span> String element;<br>        <span class="hljs-keyword">private</span> Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(String element, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.element = element;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getElement</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> element;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setElement</span><span class="hljs-params">(String element)</span> &#123;<br>            <span class="hljs-built_in">this</span>.element = element;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成员内部类的应用-双向链表"><a href="#成员内部类的应用-双向链表" class="headerlink" title="成员内部类的应用-双向链表"></a>成员内部类的应用-双向链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoWayLinkedList</span> &#123;<br>    <span class="hljs-comment">//双向链表的第一个节点</span><br>    <span class="hljs-keyword">private</span> Node first;<br>    <span class="hljs-comment">//双向链表的第二个节点</span><br>    <span class="hljs-keyword">private</span> Node last;<br>    <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TwoWayLinkedList</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TwoWayLinkedList</span><span class="hljs-params">(Node first, Node last)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.last = last;<br>    &#125;<br>    <span class="hljs-comment">//添加新节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String element)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(element, last, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(first==<span class="hljs-literal">null</span>)&#123;<br>            first=node;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(last==<span class="hljs-literal">null</span>)&#123;<br>            last=node;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            last.next=node;<br>            last=node;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFirstNode</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLastNode</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br>    <br>    <br>    <br>    <span class="hljs-type">TwoWayLinkedList</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwoWayLinkedList</span>();<br>    c.add(<span class="hljs-string">&quot;李波&quot;</span>);<br>    c.add(<span class="hljs-string">&quot;蔡文姬&quot;</span>);<br>    c.add(<span class="hljs-string">&quot;和周瑜&quot;</span>);<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> c.getFirstNode();<br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.first;<br>        <span class="hljs-keyword">while</span> (node!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(node.element);<br>            node=node.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//逆序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllByRe</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.last;<br>        <span class="hljs-keyword">while</span> (node!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(node.element);<br>            node=node.prev;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//节点类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        String element;<br>        Node prev;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(String element, Node prev, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.element = element;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>含义：8中基本类型对应的类</p><p>出现原因：Java为纯面向对象语言，8种基本数据类型不能new对象，就破坏了Java为纯面向对象语言的特征，所以Java又为8种基本数据类型分别匹配了对应的类，这种类叫做包装类&#x2F;封装类</p><p>将基本数据类型装换成引用数据类型</p><p>基本类型包装类继承关系<br>byteByte  Object.Number.Byte<br>short   Short Object.Number.Short<br>int     Integer   Object.Number.Integer<br>longLong  Object.Number.Long<br>float   Float Object.Number.Float<br>double  Double    Object.Number.Double<br>charCharacter         Object.Character<br>boolean Boolean   Object.Boolean</p><p>JDK1.5以前，基本数据类型和包装类之间的转换需要手动装箱和手动拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱：基本数据类型-》包装类</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">100</span>;<br>Integer integer=Integer.valueOf(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//手动拆箱：包装类-》基本数据类型</span><br><span class="hljs-type">int</span> num2=integer.intValue();<br></code></pre></td></tr></table></figure><p>JDK1.5后，可以进行自动装箱和拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自动装箱：基本数据类型-》包装类</span><br>  <span class="hljs-type">int</span> num=<span class="hljs-number">100</span>;<br>  Integer integer=<span class="hljs-number">100</span>;<br>  <span class="hljs-comment">//自动拆箱：包装类-》基本数据类型</span><br>  <span class="hljs-type">int</span> num2=integer;<br></code></pre></td></tr></table></figure><h3 id="深入包装类的底层原理"><a href="#深入包装类的底层原理" class="headerlink" title="深入包装类的底层原理"></a>深入包装类的底层原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">100</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">100</span>);<br>System.out.println(integer==integer1);<span class="hljs-comment">//true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">200</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer3</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">200</span>);<br>System.out.println(integer2==integer3);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>为什么上面的两个输出结果是不同的？</p><p>​答：当我们给一个Integer赋予一个int类型的值的时候它会调用Integer的静态方法ValueOf()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码中有一个静态内部类，这个类定义了-128~127的范围，并且放到一个静态缓存数组cache中。在类加载时就将-128 到 127 的Integer对象创建了，并保存在cache数组中。  </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br> <br>        <span class="hljs-keyword">static</span> &#123;<br>            <span class="hljs-comment">// high value may be configured by property</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>                sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>            <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> parseInt(integerCacheHighPropValue);<br>                    i = Math.max(i, <span class="hljs-number">127</span>);<br>                    <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                    <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>                &#125;<br>            &#125;<br>            high = h;<br> <br>            cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[(high - low) + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>                cache[k] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(j++);<br> <br>            <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>            <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">IntegerCache</span><span class="hljs-params">()</span> &#123;&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>一旦程序调用valueOf 方法，如果i的值是在-128 到 127 之间就直接在cache缓存数组中去取Integer对象。而不在此范围内的数值则要new到堆中了。所以integer和integer1是同一个对象，integer2和integer3不是同一个对象</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/403845e916ec215facc78e3322b2264f--8f34--image-20221221191842095.png" alt="image-20221221191842095">底层实现Integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟Integer的底层代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br>    <span class="hljs-comment">//存放数据的变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-built_in">this</span>.value=value;<br>    &#125;<br><br>    <span class="hljs-comment">//装箱过程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MyInteger <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-comment">//如果要装入的数值在-128到127之间，则直接返回对应已经装好的MyInteger</span><br>        <span class="hljs-keyword">if</span>(i&gt;=MyIntegerCache.low &amp;&amp; i&lt;=MyIntegerCache.high)&#123;<br>            <span class="hljs-keyword">return</span> MyIntegerCache.cache[i+(-MyIntegerCache.low)];<br>        &#125;<br>        <span class="hljs-comment">//否则返回一个新的MyInteger对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInteger</span>(i);<br>    &#125;<br><br>    <span class="hljs-comment">//静态成员内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIntegerCache</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> low=-<span class="hljs-number">128</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high=<span class="hljs-number">127</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> MyInteger[] cache;<br><br>        <span class="hljs-comment">//给cache赋值,赋值-128~127</span><br>        <span class="hljs-keyword">static</span> &#123;<br>            cache=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInteger</span>[high-low+<span class="hljs-number">1</span>];<span class="hljs-comment">//容量：256 为low-high</span><br>            <span class="hljs-type">int</span> j=low;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;cache.length ; i++) &#123;<br>                cache[i]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInteger</span>(j++);<span class="hljs-comment">//将数组cache[0]-cache[255]中装上-128~127</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger</span> <span class="hljs-operator">=</span> MyInteger.valueOf(-<span class="hljs-number">128</span>);<br><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger1</span> <span class="hljs-operator">=</span> MyInteger.valueOf(-<span class="hljs-number">128</span>);<br>System.out.println(myInteger1==myInteger);<span class="hljs-comment">//true</span><br><br><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger2</span> <span class="hljs-operator">=</span> MyInteger.valueOf(<span class="hljs-number">127</span>);<br><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger3</span> <span class="hljs-operator">=</span> MyInteger.valueOf(<span class="hljs-number">127</span>);<br>System.out.println(myInteger2==myInteger3);<span class="hljs-comment">//true</span><br><br><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger4</span> <span class="hljs-operator">=</span> MyInteger.valueOf(<span class="hljs-number">128</span>);<br><span class="hljs-type">MyInteger</span> <span class="hljs-variable">myInteger5</span> <span class="hljs-operator">=</span> MyInteger.valueOf(<span class="hljs-number">128</span>);<br>System.out.println(myInteger4==myInteger5);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>通过底层代码可以发现：Integer的底层将-128<del>127的Integer对象封装到了一个数组中，当装箱的数值在-128</del>127之间时，直接返回数组中的对应的Integer对象，所以上方代码两次返回的都是同一个对象，而超过这个范围的数返回的都是一个新的对象。</p><h2 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h2><p><strong>工具类</strong><br>判断数据是否符合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> test02.com.lh.pojo.Student;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuUtils</span>&#123;<br><br>    <span class="hljs-comment">//验证学生所有信息是否合法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStu</span><span class="hljs-params">(Student stu)</span>&#123;<br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stu.getName();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> stu.getSex();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stu.getAge();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classId</span> <span class="hljs-operator">=</span> stu.getClassId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> stu.getId();<br>        <span class="hljs-keyword">if</span>(isName(name) &amp;&amp;  isSex(sex) &amp;&amp; isAge(age) &amp;&amp; isClassId(classId) &amp;&amp; isId(id))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//姓名必须2-16位</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> name.length();<br>        <span class="hljs-keyword">if</span>(length&gt;=<span class="hljs-number">2</span> &amp;&amp; length&lt;=<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//性别必须是男或女</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span>&#123;<br>        <span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&#x27;男&#x27;</span> || sex==<span class="hljs-string">&#x27;女&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//年龄必须是16-50岁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">16</span> &amp;&amp; age&lt;=<span class="hljs-number">50</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//班级号必须是4位</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClassId</span><span class="hljs-params">(String classId)</span>&#123;<br>        <span class="hljs-type">int</span> len=classId.length();<br>        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//学号必须是3位</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isId</span><span class="hljs-params">(String id)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> id.length();<br>        <span class="hljs-keyword">if</span>(length==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>接口实现类</strong><br>StudentManagerSystemImpl初始化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT_INIT_CAPACITY=<span class="hljs-number">3</span>;<br><span class="hljs-comment">//学生容器</span><br><span class="hljs-keyword">private</span> Student[] stus;<br><span class="hljs-comment">//学生个数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br><span class="hljs-comment">//初始化学生数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StudentManagerSystemImpl</span><span class="hljs-params">()</span>&#123;<br>stus=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[DEFAULT_INIT_CAPACITY];<br><br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;麻生希&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;椎名空&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;水菜丽&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;朝桐光&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;樱井步&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;005&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;爱田奈奈&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;006&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;水野朝阳&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;007&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;奈亚美丽&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;008&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;古川伊织&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;009&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;北条麻衣&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;010&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;011&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;012&quot;</span>));<br><br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;三上悠亚&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;波多野结衣&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;桃谷绘里香&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;铃原爱蜜莉&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小西满里惠&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;005&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;明日花绮罗&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;006&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;京香Julia&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;007&quot;</span>));<br>add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;代龙&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2214&quot;</span>, <span class="hljs-string">&quot;008&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StudentManagerSystemImpl</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br><span class="hljs-keyword">if</span> (i&lt;DEFAULT_INIT_CAPACITY)&#123;<br>stus=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[DEFAULT_INIT_CAPACITY];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>stus=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加功能</strong><br>StudentManagerSystemImpl方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student stu)</span> &#123;<br><span class="hljs-comment">//插入前先判断</span><br><span class="hljs-comment">//1、判断学生信息合法性</span><br><span class="hljs-keyword">if</span>(!StuUtils.isStu(stu))&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//2、查询在容器中是否有该学生</span><br><span class="hljs-keyword">if</span>(queryToIndex(stu.getClassId(),stu.getId())!=-<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//3、判断是否扩容</span><br><span class="hljs-keyword">if</span>(stus.length==size)&#123;<br>expansion();<br>&#125;<br><span class="hljs-comment">//4、添加学生</span><br>stus[size++]=stu;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">queryToIndex</span><span class="hljs-params">(String classId, String id)</span> &#123;<br><span class="hljs-comment">//创建Student对象 -只包含classId和id</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(classId, id);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i;i&lt;size;i++)&#123;<br><span class="hljs-comment">//利用Student重写的equals进行对比，返回对比成功的索引</span><br><span class="hljs-keyword">if</span>(stus[i].equals(student))&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expansion</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> stus.length;<br><span class="hljs-type">int</span> newCapacity=oldCapacity+ (oldCapacity&gt;&gt;<span class="hljs-number">1</span>);<br>stus= Arrays.copyOf(stus,newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加菜单</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMenu</span><span class="hljs-params">(Scanner scanner, StudentManagerSystemImpl sms)</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;请输入姓名：&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>       System.out.println(<span class="hljs-string">&quot;请输入性别：&quot;</span>);<br>       <span class="hljs-type">char</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> scanner.next().toCharArray()[<span class="hljs-number">0</span>];<br>       System.out.println(<span class="hljs-string">&quot;请输入年龄：&quot;</span>);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>       System.out.println(<span class="hljs-string">&quot;请输入班级号：&quot;</span>);<br>       String classId= scanner.next();<br>       System.out.println(<span class="hljs-string">&quot;请输入学号：&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> scanner.next();<br><br>       <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name, sex, age, classId, id);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> sms.add(student);<br>       <span class="hljs-keyword">if</span>(add==-<span class="hljs-number">1</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;添加失败-- 学生信息不合法&quot;</span>);<br>       &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(add==<span class="hljs-number">1</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;添加失败-- 有重复学生&quot;</span>);<br>       &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(add==<span class="hljs-number">1</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>主程序方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    StudentManagerSystemImpl sms= <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentManagerSystemImpl</span>();<br><br>    System.out.println(<span class="hljs-string">&quot;欢迎进入到**学生管理系统&quot;</span>);<br>    <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (flag)&#123;<br>        System.out.println(<span class="hljs-string">&quot;请选择以下功能：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1 - 添加学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2 - 删除学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3 - 修改学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4 - 查询学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5 - 打印所有学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;886 - 退出系统&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">switch</span> (num)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                addMenu(scanner,sms);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                deleteMenu(scanner,sms);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sms.printAllStu();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">886</span>:<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>    &#125;<br>    scanner.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除功能</strong><br>StudentManagerSystemImpl#delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String classId, String id)</span> &#123;<br><span class="hljs-comment">//1.判断学生信息合法性</span><br><span class="hljs-keyword">if</span>(!StuUtils.isClassId(classId)||!StuUtils.isId(id))&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//返回-1表示不合法</span><br>&#125;<br><span class="hljs-comment">//2.判断是否有该学生</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> queryToIndex(classId,id);<br><span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">2</span>;<span class="hljs-comment">//返回-2表示没有该学生</span><br>&#125;<br><span class="hljs-comment">//3.删除学生</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=index;i&lt;size-<span class="hljs-number">1</span>;i++)&#123;<br>stus[i] = stus[i+<span class="hljs-number">1</span>];<br>&#125;<br>size--;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test01#deleteMenu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//deleteMenu</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMenu</span><span class="hljs-params">(Scanner scanner,StudentManagerSystemImpl sms)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;请输入班级号：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">classId</span> <span class="hljs-operator">=</span> scanner.next();<br>    System.out.println(<span class="hljs-string">&quot;请输入学号：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> scanner.next();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> sms.delete(classId, id);<br>    <span class="hljs-keyword">if</span>(delete==-<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除失败 --学生信息不合法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(delete==-<span class="hljs-number">2</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除失败 --没有该学生&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(delete==<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>打印功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllStu</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;size ; i++) &#123;<br>System.out.println(stus[i]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="String的三种拼接方式"><a href="#String的三种拼接方式" class="headerlink" title="String的三种拼接方式"></a>String的三种拼接方式</h3><ol><li>“+”连接符</li></ol><blockquote><p>我们都知道，String类是一个final的，不允许字符串的修改，更不允许字符串的“拼接”<br>使用“+” 连接符操作String类实际上是将String类转为<a href="https://so.csdn.net/so/search?q=StringBuilder%E7%B1%BB&spm=1001.2101.3001.7020">StringBuilder类</a>，调用StringBuilder类的append方法完成字符串拼接操作</p></blockquote><ol start="2"><li>concat()方法</li></ol><blockquote><p>concat方法实际上是重新申请一个当前字符串长度+拼接字符串长度的字符数组，然后拼接好的字符串复制到新数组中，然后调用String类的构造方法创建一个新的数组</p></blockquote><ol start="3"><li>join方法</li></ol><blockquote><p>StringJoiner类的join方法可以指定使用什么字符进行字符串的拼接，实际上也是借助StringBuilder的append()方法完成拼接</p></blockquote><h3 id="String类的使用"><a href="#String类的使用" class="headerlink" title="String类的使用"></a>String类的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">der123</span> <span class="hljs-operator">=</span> str.concat(<span class="hljs-string">&quot;DER123&quot;</span>);<br><span class="hljs-comment">//在原字符串的后面拼接字符串，并返回新的字符串</span><br><span class="hljs-comment">// 123abc-》123abcDER123</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">2</span>);<br><span class="hljs-comment">//从开始下标截取到字符串末尾，并返回新的字符串</span><br><span class="hljs-comment">//123abc-》3abc</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">substring1</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">//从开始下标（包含）截取到结束下标处（不包含），并返回新的字符串。</span><br><span class="hljs-comment">//123abc-》23a</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> str.toUpperCase();<br><span class="hljs-comment">//转大写，并返回新的字符串</span><br><span class="hljs-comment">//123abc-》123ABC</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> str.toLowerCase();<br><span class="hljs-comment">//转小写，并返回新的字符串</span><br><span class="hljs-comment">//123ABC-》123abc</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">str=<span class="hljs-string">&quot;  123ab cD   EF  123   &quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">trim</span> <span class="hljs-operator">=</span> str.trim();<br><span class="hljs-comment">//去除首尾空格，并返回新的字符串</span><br><span class="hljs-comment">//  123ab cD   EF  123-&gt;123ab cD   EF  123</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> str.replace(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-comment">//替换指定字符，并返回新的字符串</span><br><span class="hljs-comment">//  123ab cD   EF  123-&gt;  a23ab cD   EF  a23</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> str.replaceFirst(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;aaaaa&quot;</span>);<br><span class="hljs-comment">//替换第一次出现的字符串，并返回新的字符串</span><br><span class="hljs-comment">//  123ab cD   EF  123-&gt;  aaaaaab cD   EF  123</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br><span class="hljs-comment">//替换字符串，并返回新的字符串</span><br><span class="hljs-comment">//  123ab cD   EF  123-&gt;  111ab cD   EF  111</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//去除空格</span><br><span class="hljs-comment">//  123ab cD   EF  123-&gt;123abcDEF123</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">str.length();<span class="hljs-comment">//获取字符串中字符个数</span><br>str.startsWith(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//判断字符串是否以某个字符串开头</span><br>str.endsWith(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//判断字符串是否以某个字符串结尾</span><br>str.equals(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//判断字符串是否相同（区分大小写）</span><br>str.equalsIgnoreCase(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//判断字符串是否相同（不区分大小写）</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str.charAt(<span class="hljs-number">2</span>);<span class="hljs-comment">//获取指定字符</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> str.indexOf(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//获取指定字符在字符串中第一次出现的下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> str.lastIndexOf(<span class="hljs-string">&#x27;8&#x27;</span>);<span class="hljs-comment">//获取指定字符在字符串中最后一次出现的下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> str.indexOf(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">// 返回指定字符str在字符串中（方法调用者）第一次出现处的起始索引，如果此字符串中没有这样的字符，则返回 -1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> str.lastIndexOf(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">// 返回指定字符str在字符串中（方法调用者）最后一次出现处的起始索引，如果此字符串中没有这样的字符，则返回 -1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本数据类型转字符串</span><br><span class="hljs-comment">//方式1</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-number">12</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> String.valueOf(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//方式2,使用&quot;&quot;进行拼接</span><br>String u=<span class="hljs-number">12</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-number">12.2</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-literal">true</span>;<br>System.out.println(u);<span class="hljs-comment">//1212.2true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">拼接、截取、转大小写<br>去空格、替换<br>长度、判断字符串是否以某个字符串开头、判断字符串是否以某个字符串结尾、判断字符串是否相同（不区分大小写）<br>获取字符、获取某字符下标、获取某字符（串）下标、获取指定字符在字符（串）中最后一次出现的下标<br>基本数据类型转字符串（两种方式）<br></code></pre></td></tr></table></figure><h3 id="StringBuffer的使用"><a href="#StringBuffer的使用" class="headerlink" title="StringBuffer的使用"></a>StringBuffer的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br><br>sb.append(<span class="hljs-string">&quot;LOVE&quot;</span>);<span class="hljs-comment">//在末尾追加内容</span><br>System.out.println(sb);<br>sb.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;LH!&quot;</span>);<span class="hljs-comment">//在指向下标插入字符串</span><br>System.out.println(sb);<br>sb.setCharAt(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;H&#x27;</span>);<span class="hljs-comment">//指定下标替换字符</span><br>System.out.println(sb);<br>sb.replace(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;heheheh&quot;</span>);<span class="hljs-comment">//从开始下标到结束下标的字符替换为指定字符串</span><br>System.out.println(sb);<br>sb.deleteCharAt(<span class="hljs-number">1</span>);<span class="hljs-comment">//删除指定下标的字符</span><br>System.out.println(sb);<br>sb.delete(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//删除开始下标（包含）的结束下标（不包含）的字符串</span><br>System.out.println(sb);<br>sb.reverse();<span class="hljs-comment">//反转字符串</span><br>System.out.println(sb);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">使用StringBuffer<br><span class="hljs-number">1</span>、在末尾追加内容<br><span class="hljs-number">2</span>、在指定下标插入字符串<br><span class="hljs-number">3</span>、指定下标替换字符<br><span class="hljs-number">4</span>、从开始下标到结束下标的字符替换为指定字符串<br><span class="hljs-number">5</span>、删除指定下标的字符<br><span class="hljs-number">6</span>、删除开始下标（包含）的结束下标（不包含）的字符串    <br><span class="hljs-number">7</span>、反转字符串<br></code></pre></td></tr></table></figure><h3 id="StringBuilder的使用"><a href="#StringBuilder的使用" class="headerlink" title="StringBuilder的使用"></a>StringBuilder的使用</h3><p>和StringBuffer一致</p><h3 id="深入字符串String-StringBuffer-StringBuildr"><a href="#深入字符串String-StringBuffer-StringBuildr" class="headerlink" title="深入字符串String-StringBuffer-StringBuildr"></a>深入字符串String-StringBuffer-StringBuildr</h3><p>为什么String不可变、StringBuffer和StringBuilder可变<br>StringBuffer和StringBuilder的同异？</p><p>String：String底层时final的字符数组，<strong>是不可变类</strong>，即一旦一个String对象被创建，包含在这个对象中的字符序列是不可改变的，直至该对象被销毁。String类是final类，不能有子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] value;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么String不可变，因为底层的字符数组是常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>str = <span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//此时常量池里有两个数组，即abc、abcd</span><br></code></pre></td></tr></table></figure><p>StringBuffer：<strong>可变的字符序列</strong>。StringBuffer称为字符串缓冲区。<br>工作原理是：预先申请一块内存，存放字符序列，如果字符序列满了，会重新改变缓存区的大小，以容纳更多的字符序列。StringBuffer是可变对象，这个是String最大的不同。<br>*注意：StringBufferextendsAbsractStringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//缓冲区默认开辟16个长度的字符数组（）</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br><span class="hljs-comment">//缓冲区大小：长度30的字符数组</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">30</span>);<br><br><span class="hljs-comment">//缓冲区大小：长度16+3个长度的字符数组 -- 16+&quot;abc&quot;.length()</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h4><p>同：StringBuilder和StringBuffer都继承AbsractStringBuilder。<br>异：StringBuffer中的方法都使用了synchronized，进行了加锁，在多线程的情况下使用，效率低。<br>而StringBuilder不使用锁，则安全性低，效率高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span>&#123;<br><span class="hljs-type">char</span>[] value;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span>&#123;<br><span class="hljs-built_in">super</span>.append(str);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuffer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span>&#123;<span class="hljs-comment">//调用方法自动上锁</span><br><span class="hljs-built_in">super</span>.append(str);<br>&#125;<span class="hljs-comment">//调用结束自动解锁</span><br>&#125;<br><br><span class="hljs-comment">//StringBuilder：线程不安全的，在多线程的情况下使用，效率高</span><br><span class="hljs-comment">//StringBuffer：线程安全的（上锁），在多线程的情况下使用，效率低</span><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>String不可变，StringBuilder、StringBuffer可变</p><p>StringBuffer线程安全，StringBuilder线程不安全</p><p>运行速度 StringBuilder &gt; StringBuffer</p><h3 id="深入String面试题"><a href="#深入String面试题" class="headerlink" title="深入String面试题"></a>深入String面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、以下代码会创建多少个String对象？</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//答案：1个；因为常量池中的数据不允许重复</span><br><br><span class="hljs-comment">//2、下面代码会创建多少个String对象？</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-comment">//答案：3个；new了2个，常量池中1个.</span><br><br><span class="hljs-comment">//3、</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(str1==str2);<br><span class="hljs-comment">//答案：true;因为都是常量池中的同一个对象</span><br><br><span class="hljs-comment">//4、</span><br>String str5=<span class="hljs-string">&quot;ab&quot;</span>+<span class="hljs-string">&quot;c&quot;</span>;<br>System.out.println(str1==str5);<br><span class="hljs-comment">//答案：true;因为两个常量字符串在编译时就拼接了</span><br><span class="hljs-keyword">final</span> String s1=<span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-keyword">final</span> String s2=<span class="hljs-string">&quot;c&quot;</span>;<br>String s3=s1+s2;<br>System.out.println(str1==s3);<br><span class="hljs-comment">//true;因为两个常量字符串在运行时就拼接了</span><br><br><span class="hljs-comment">//5、</span><br>String a1=<span class="hljs-string">&quot;ab&quot;</span>;<br>String a2=<span class="hljs-string">&quot;c&quot;</span>;<br>String a=a1+a2;<br>System.out.println(a==str1);<br><span class="hljs-comment">//true;因为变量是在运行时进行拼接的：new StringBuilder(a1).append(a2).toString()</span><br><br><span class="hljs-comment">//6、频繁拼接字符串问题</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 知识点：深入频繁拼接字符串问题</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 频繁的字符串拼接考虑使用StringBuilder或StringBuffer</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//long startTime = System.currentTimeMillis();//获取自1970年1月1日到现在的毫秒数</span><br><span class="hljs-comment">//String str = &quot;蔡文静&quot;;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="hljs-comment">//str += &quot;小可爱&quot;;</span><br><span class="hljs-comment">//str = new StringBuilder(str).append(&quot;小可爱&quot;).toString();</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//long endTime = System.currentTimeMillis();//获取自1970年1月1日到现在的毫秒数</span><br><span class="hljs-comment">//System.out.println(&quot;消耗时长为：&quot; + (endTime-startTime));//181</span><br><br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//获取自1970年1月1日到现在的毫秒数</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;蔡文静&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>sb.append(<span class="hljs-string">&quot;小可爱&quot;</span>);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//获取自1970年1月1日到现在的毫秒数</span><br>System.out.println(<span class="hljs-string">&quot;消耗时长为：&quot;</span> + (endTime-startTime));<span class="hljs-comment">//1</span><br>&#125;<br><br>String name=<span class="hljs-string">&quot;lh&quot;</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;lh&quot;</span>);<br><span class="hljs-comment">//循环1000次</span><br>name+=<span class="hljs-string">&quot;he&quot;</span>;<span class="hljs-comment">//new StringBuilder(name).append(&quot;he&quot;).toString();</span><br><span class="hljs-comment">//循环1000次</span><br>sb.append(<span class="hljs-string">&quot;he&quot;</span>);<br><span class="hljs-comment">//哪个执行时间少？答案：sb.append(&quot;he&quot;); 因为sb.append(&quot;he&quot;)不用new对象，而str+=&quot;he&quot;拼接需要new对象</span><br></code></pre></td></tr></table></figure><blockquote><p>如何将List转换为String?<br>1.toString();<br>    2.StringBuilder 的 append()方法使用‘，’循环拼接；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ListToString</span><span class="hljs-params">()</span> &#123;<br>  List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>);<br>  <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>      builder.append(list.get(i));<br>      builder.append(<span class="hljs-string">&quot;,&quot;</span>);<br>  &#125;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> builder.substring(<span class="hljs-number">0</span>, builder.length() - <span class="hljs-number">1</span>);<br>  System.out.println(<span class="hljs-string">&quot;String.join() 转化后的字符串 : &quot;</span> + substring);<br>&#125;<br><span class="hljs-comment">// 输出</span><br>String.join() 转化后的字符串 : 张三,李四,王五,赵六<br></code></pre></td></tr></table></figure><p>​    3.String.join()以将集合转换为具有给定分隔符的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ListToString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 构造list</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;,&quot;</span>, list);<span class="hljs-comment">// StringUtils.join(list, &quot;,&quot;);</span><br>System.out.println(<span class="hljs-string">&quot;String.join() 转化后的字符串 : &quot;</span> + str);<br>&#125;<br><span class="hljs-comment">// 输出</span><br>String.join() 转化后的字符串 : 张三,李四,王五,赵六<br></code></pre></td></tr></table></figure><p>​4.StringUtils.join()方法拼接；(注意：String.join与StringUtils.join的参数相反)    </p><p>​5.使用Srteam流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ListToString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 构造list</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>);<br><br><span class="hljs-comment">// 以逗号分隔，带前缀后缀</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> list.stream().collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;Collectors.joining 带前缀后缀 : &quot;</span> + str1);<br><br><span class="hljs-comment">// 以@分隔，不带前缀后缀</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> list.stream().collect(Collectors.joining(<span class="hljs-string">&quot;@&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;Collectors.joining 不带前缀后缀 : &quot;</span> + str2);<br>&#125;<br><span class="hljs-comment">// 输出</span><br>Collectors.joining 带前缀后缀 : &#123;张三,李四,王五,赵六&#125;<br>Collectors.joining 不带前缀后缀 : 张三@李四@王五@赵六<br></code></pre></td></tr></table></figure></blockquote><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><table><thead><tr><th>[abc]</th><th>a、b或c</th></tr></thead><tbody><tr><td>[^abc]</td><td>任何字符，除了a、b或c</td></tr><tr><td>[a-zA-Z]</td><td>a到z或A到Z</td></tr><tr><td></td><td></td></tr><tr><td>.</td><td>任何字符</td></tr><tr><td>&#x2F;d</td><td>数字</td></tr><tr><td>&#x2F;D</td><td>非数字</td></tr><tr><td>&#x2F;s</td><td>空白字符</td></tr><tr><td>&#x2F;S</td><td>非空白字符</td></tr><tr><td>&#x2F;w</td><td>单词字符</td></tr><tr><td>&#x2F;W</td><td>非单词字符</td></tr><tr><td></td><td></td></tr><tr><td>？</td><td>一次或0次</td></tr><tr><td>*</td><td>0次或多次</td></tr><tr><td>+</td><td>一次或多次</td></tr><tr><td>{n}</td><td>恰好n次</td></tr><tr><td>{n,}</td><td>至少n次</td></tr><tr><td>{n,m}</td><td>至少n次，不超过m次</td></tr><tr><td></td><td></td></tr><tr><td>??</td><td>一次或0次</td></tr><tr><td>*?</td><td>0次或多次</td></tr><tr><td>+?</td><td>一次或多次</td></tr><tr><td>{n}?</td><td>恰好n次</td></tr><tr><td>{n,}?</td><td>至少n次</td></tr><tr><td>{n,m}?</td><td>至少n次，不超过m次</td></tr></tbody></table><p>使用正则进行替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小红15111111234 小绿12922221234&quot;</span>;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(1\\d&#123;2&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)&quot;</span>;<br>      <span class="hljs-comment">//()表示分组；\d表示数字；\d&#123;2&#125;表示仅有2个数字;</span><br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">replaceAll</span> <span class="hljs-operator">=</span> str.replaceAll(regex, <span class="hljs-string">&quot;$1****$3&quot;</span>);<br>      <span class="hljs-comment">//获取匹配项，将符合匹配的项进行替换 -- (保存第一组和第三组)</span><br>      System.out.println(replaceAll);<br>      <span class="hljs-comment">//小红151****1234 小绿129****1234</span><br></code></pre></td></tr></table></figure><p>使用正则进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;14455849801@qq.com&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;6,11&#125;@qq.com&quot;</span>;<br><span class="hljs-comment">//\\d&#123;6,11&#125; 数字6-11位</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">matches</span> <span class="hljs-operator">=</span> str.matches(regex);<br><span class="hljs-comment">//判断字符串是否匹配这个正则</span><br><br>System.out.println(matches);<br><span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>分割数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\资源\\日韩\\波多.avi&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;:?\\\\&quot;</span>;<br><span class="hljs-comment">//:? 表示:出现一个或不出现，\\表示一个\</span><br><span class="hljs-comment">//java中两个\\对应一个\</span><br>String[] split = str.split(regex);<br><span class="hljs-keyword">for</span> (String s:split) &#123;<br>    System.out.println(s);<br>&#125;<br><span class="hljs-comment">//C</span><br><span class="hljs-comment">//资源</span><br><span class="hljs-comment">//日韩</span><br><span class="hljs-comment">//波多.avi</span><br></code></pre></td></tr></table></figure><p>爬取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab99123ab3242499ab353ab3994242&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(99\\d&#123;3&#125;)|(ab\\d&#123;2&#125;)&quot;</span>;<br><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<span class="hljs-comment">//获取正则对象</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<span class="hljs-comment">//获取匹配结果</span><br><br><span class="hljs-comment">//判断是否有匹配结果</span><br><span class="hljs-keyword">while</span> (matcher.find())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> matcher.group(<span class="hljs-number">2</span>);<span class="hljs-comment">//获取匹配结果 2表示第二组</span><br>    System.out.println(group);<br>&#125;<br><span class="hljs-comment">//ab99</span><br><span class="hljs-comment">//ab32</span><br><span class="hljs-comment">//ab35</span><br><span class="hljs-comment">//ab39</span><br></code></pre></td></tr></table></figure><h3 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h3><p><strong>内容：Date对象、SimpleDateFormat格式化时间以及获取Date对象、Calendar类获取时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//获取时间</span><br>System.out.println(date);<br><span class="hljs-comment">//Thu Dec 08 15:49:24 CST 2022</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//格式化时间</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">format1</span> <span class="hljs-operator">=</span> format.format(date);<br>System.out.println(format1);<br><span class="hljs-comment">//2022年12月08日 15:50:45</span><br><br><span class="hljs-comment">//通过符合格式化的时间得到Date对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> format.parse(<span class="hljs-string">&quot;2022年12月08日 15:50:45&quot;</span>);<br>System.out.println(date1);<br><span class="hljs-comment">//Thu Dec 08 15:50:45 CST 2022</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> calendar.get(Calendar.YEAR);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> calendar.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<span class="hljs-comment">//月份从0开始</span><br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);<br>System.out.println(year+<span class="hljs-string">&quot;年&quot;</span>+month+<span class="hljs-string">&quot;月&quot;</span>+day+<span class="hljs-string">&quot;日&quot;</span>);<br><span class="hljs-comment">//2022年12月8日</span><br></code></pre></td></tr></table></figure><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>内容：平方、开平方根、绝对值、取上取下、最大最小、随机数、Math.abs() 有可能会返回负数吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//9.0 -- 平方</span><br>Math.sqrt(<span class="hljs-number">9</span>);<span class="hljs-comment">//3.0 -- 开平方</span><br>Math.abs(-<span class="hljs-number">100</span>);<span class="hljs-comment">//100 -- 绝对值</span><br>Math.ceil(<span class="hljs-number">1.9</span>);<span class="hljs-comment">//2.0 -- 向上取</span><br>Math.floor(<span class="hljs-number">1.1</span>);<span class="hljs-comment">//1.0 -- 向下取</span><br>Math.max(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//20 -- 两个值取最大值</span><br>Math.min(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//10 -- 两个值取最小值</span><br>Math.random();<span class="hljs-comment">//0-1（包含0但不包含1） -- 随机数</span><br></code></pre></td></tr></table></figure><h4 id="Math类面试题"><a href="#Math类面试题" class="headerlink" title="Math类面试题"></a>Math类面试题</h4><p>Math.abs() 有可能会返回负数吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;求绝对值&quot;</span>+Math.abs(Integer.MAX_VALUE+<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;求绝对值&quot;</span>+Math.abs(Integer.MIN_VALUE));<br><span class="hljs-comment">//求绝对值-2147483648</span><br><span class="hljs-comment">//求绝对值-2147483648</span><br><br><span class="hljs-comment">//abs的底层</span><br><span class="hljs-comment">//    public static int abs(int a) &#123;</span><br><span class="hljs-comment">//        return (a &lt; 0) ? -a : a;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//返回的是int类型，int的取值范围在-2147483648到2147483647之间，超过这两个范围之外的数表示都带-号</span><br></code></pre></td></tr></table></figure><p>int的取值范围在-2147483648到2147483647之间，超过这两个范围之外的数取到的绝对值都是负数</p><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p><strong>随机数的获取、点名器、深入Random</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>System.out.println(<span class="hljs-string">&quot;int类型取值范围内的随机数：&quot;</span>+random.nextInt());<br>System.out.println(<span class="hljs-string">&quot;int类型0-9之间的随机数：&quot;</span>+random.nextInt(<span class="hljs-number">10</span>));<br>System.out.println(<span class="hljs-string">&quot;Double类型取值范围内的随机数：&quot;</span>+random.nextDouble());<br>System.out.println(<span class="hljs-string">&quot;Boolean类型取值范围内的随机数：&quot;</span>+random.nextBoolean());<br><br><span class="hljs-comment">//int类型取值范围内的随机数：-1675647144</span><br><span class="hljs-comment">//int类型0-9之间的随机数：2</span><br><span class="hljs-comment">//Double类型取值范围内的随机数：0.5277800741247717</span><br><span class="hljs-comment">//Boolean类型取值范围内的随机数：true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>String[] str=&#123;<span class="hljs-string">&quot;gkz&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>,<span class="hljs-string">&quot;wh&quot;</span>,<span class="hljs-string">&quot;sl&quot;</span>,<span class="hljs-string">&quot;wsa&quot;</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> random.nextInt(str.length);<br>System.out.println(str[index]);<br><span class="hljs-comment">//gkz</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Random给出的随机数属于伪随机数</span><br><span class="hljs-comment">* Random随机的数据是由种子数确定的，种子数固定，随机出的数据就是固定的</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//seed种子数</span><br>System.out.println(random.nextInt());<span class="hljs-comment">//每次执行的数据都是一样的</span><br><br></code></pre></td></tr></table></figure><h3 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        System.out.println(<span class="hljs-string">&quot;获取最大操作数：&quot;</span>+runtime.availableProcessors());<br>        System.out.println(<span class="hljs-string">&quot;获取最大内存：&quot;</span>+runtime.maxMemory());<br>        System.out.println(<span class="hljs-string">&quot;获取可用空间：&quot;</span>+runtime.freeMemory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1670548713913-fcd99aa9-b111-47ed-bccf-fdefa08d42e6.png#averageHue=%23d9d5ce&clientId=ub5be0039-52c7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=243&id=u912e38b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=278&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130134&status=done&style=none&taskId=u0232e44f-5973-4209-a73f-ba4c28bd807&title=&width=583.8545252070159" alt="image.png"></p><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取系统标准的输入流（控制台-》程序）</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> System.in;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>scanner.close();<br><br><span class="hljs-comment">//获取系统标准的输出流（程序-》控制台）</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out; <span class="hljs-comment">// 字节打印流</span><br>out.println(i);<br><br><span class="hljs-comment">//获取系统标准的错误输出流（程序-》控制台）</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> System.err;<br>err.println(i);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;小明&quot;</span>);<br>System.err.println(<span class="hljs-string">&quot;小红&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;小强&quot;</span>);<br><br><span class="hljs-comment">//每一次输出的结果都不一样；</span><br><span class="hljs-comment">//因为out和err是不同线程中的代码，所以会相互抢cpu资源，如果抢到了就会执行。</span><br><span class="hljs-comment">//小红</span><br><span class="hljs-comment">//小明</span><br><span class="hljs-comment">//小强</span><br><br><span class="hljs-comment">//小明</span><br><span class="hljs-comment">//小强</span><br><span class="hljs-comment">//小红</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] str=&#123;<span class="hljs-string">&quot;gkz&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>,<span class="hljs-string">&quot;wh&quot;</span>,<span class="hljs-string">&quot;sl&quot;</span>,<span class="hljs-string">&quot;wsa&quot;</span>&#125;;<br>String[] newStr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br><br>System.arraycopy(str,<span class="hljs-number">2</span>,newStr,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//(原数组，原数组开始下标，新数组，新数组开始下标，拷贝长度)</span><br>System.out.println(Arrays.toString(newStr));<br><span class="hljs-comment">//[wh, sl]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] str=&#123;<span class="hljs-string">&quot;gkz&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>,<span class="hljs-string">&quot;wh&quot;</span>,<span class="hljs-string">&quot;sl&quot;</span>,<span class="hljs-string">&quot;wsa&quot;</span>&#125;;<br>System.arraycopy(str,<span class="hljs-number">2</span>,str,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">//从原数组的下标2开始后的三个元素，移动到数组的下标1开始处</span><br>str[str.length-<span class="hljs-number">1</span>]=<span class="hljs-literal">null</span>;<br>System.out.println( Arrays.toString(str));<br><span class="hljs-comment">//[gkz, wh, sl, wsa, null]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、系统标准的输入输出有哪些<br><span class="hljs-number">2</span>、out和err<br><span class="hljs-number">3</span>、System.arraycopy做数组拷贝<br><span class="hljs-number">4</span>、arraycopy删除数组元素<br></code></pre></td></tr></table></figure><h3 id="大数类"><a href="#大数类" class="headerlink" title="大数类"></a>大数类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;32344567788543222&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;32344567788543922&quot;</span>);<br><span class="hljs-comment">//选字符串类型的</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> b1.add(b2);<br>System.out.println(add);<br><span class="hljs-comment">//加：64689135577087144</span><br><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> b1.subtract(b2);<br>System.out.println(subtract);<br><span class="hljs-comment">//减：-700</span><br><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> b1.multiply(b2);<br>System.out.println(multiply);<br><span class="hljs-comment">//乘：1046171065427690415747612942396684</span><br><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> b1.divide(b2);<br>System.out.println(divide);<br><span class="hljs-comment">//除：0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">      <span class="hljs-comment">//金融类项目推荐使用BigDecimal</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.5&quot;</span>);<br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.4&quot;</span>);<br><br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> b1.add(b2);<br>      System.out.println(add);<span class="hljs-comment">//0.9</span><br><br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> b1.subtract(b2);<br>      System.out.println(subtract);<span class="hljs-comment">//0.1</span><br><br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> b1.multiply(b2);<br>      System.out.println(multiply);<span class="hljs-comment">//0.20</span><br><br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> b1.divide(b2);<br>      System.out.println(divide);<span class="hljs-comment">//1.25</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;10&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3&quot;</span>);<br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> b1.divide(b2,<span class="hljs-number">2</span>,BigDecimal.ROUND_HALF_UP);<br><span class="hljs-comment">//(除数，保留2个小数位，四舍五入)</span><br>System.out.println(divide);<br><span class="hljs-comment">//3.33</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、整数大数值加减乘除<br><span class="hljs-number">2</span>、小数大数值加减乘除<br><span class="hljs-number">3</span>、<span class="hljs-number">10</span>/<span class="hljs-number">3</span>的结果怎么保留两位小数<br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>    <span class="hljs-comment">// 默认添加 public static final Color 并new一个该对象</span><br>    RED,BLUE,GREEN;<span class="hljs-comment">//不带()表示使用无参构造器初始化</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;<br>    spring(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春雨绵绵&quot;</span>),<br>    summer(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;烈日炎炎&quot;</span>),<br>    autumn(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋高气爽&quot;</span>),<br>    winter(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;大雪纷飞&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String info;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String info)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, info=&#x27;&quot;</span> + info + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//打印</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season.spring.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​枚举类是一种受限制的类，并且具有自己的方法。创建自己的enum类时，这个类继承自java.lang.Enum。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>（1）自定义枚举类默认（隐式）继承Enum，且不能继承其他类（Enum默认继承Object），但可以实现接口。</p><p>（2）枚举类不能被继承。</p><p>（3）第一行必须定义该枚举类型的对象，且枚举类型对象默认添加：public static final 类型</p><p>（4）枚举类里可以有构造方法、成员方法、静态方法、抽象方法（虽然枚举类不能被子类继承，但是可以通过匿名子类来实现抽象方法）</p><p>（5）枚举类是没有（显示）继承关系的（自定义枚举类默认（隐式）继承Enum，Enum默认继承Object）。</p><p>（6）枚举里没有定义方法的时候，可以在最后一个对象后面加逗号、分号或什么都不加。</p><h4 id="枚举常用方法"><a href="#枚举常用方法" class="headerlink" title="枚举常用方法"></a>枚举常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取到对应名字的枚举对象</span><br>      <span class="hljs-type">Season</span> <span class="hljs-variable">spring</span> <span class="hljs-operator">=</span> Enum.valueOf(Season.class, <span class="hljs-string">&quot;spring&quot;</span>);<br>      System.out.println(spring);<br><br>      <span class="hljs-comment">//获取到对应名字的枚举对象</span><br>      <span class="hljs-type">Season</span> <span class="hljs-variable">spring1</span> <span class="hljs-operator">=</span> Season.valueOf(<span class="hljs-string">&quot;spring&quot;</span>);<br>      System.out.println(spring1);<br><br>      System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);<br><br>      <span class="hljs-comment">//获取到Season类中所有的枚举对象</span><br>      Season[] values = Season.values();<br>      <span class="hljs-keyword">for</span> (Season value : values) &#123;<br>          System.out.println(value);<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="枚举案例之状态机"><a href="#枚举案例之状态机" class="headerlink" title="枚举案例之状态机"></a>枚举案例之状态机</h3><h4 id="关于为什么switch可以判断枚举的问题"><a href="#关于为什么switch可以判断枚举的问题" class="headerlink" title="关于为什么switch可以判断枚举的问题"></a>关于为什么switch可以判断枚举的问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Description</span> : 信号灯的枚举</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Date</span> : 2022/12/25 5:37</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Signal</span> &#123;<br>    <span class="hljs-comment">// 枚举对象系统会默认编号（从0开始）</span><br>    RED,GREEN,YELLOW;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 枚举案例 -- 状态机</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2022/12/25 5:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 知识点：枚举案例之 状态机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请选择信号灯：RED/GREEN/YELLOW&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scan.next();<br>        <span class="hljs-type">Signal</span> <span class="hljs-variable">signal</span> <span class="hljs-operator">=</span> Signal.valueOf(str);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instruct</span> <span class="hljs-operator">=</span> getTrafficInstruct(signal);<br>        System.out.println(instruct);<br><br>        scan.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getTrafficInstruct</span><span class="hljs-params">(Signal signal)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instruct</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;信号灯故障&quot;</span>;<br><br>        <span class="hljs-comment">//System.out.println(&quot;获取当前枚举对象的编号：&quot; + signal.ordinal());//RED-0,GREEN-1,YELLOW-2</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * $SWITCH_TABLE$com$qf$enum_class03$Signal() 的含义：</span><br><span class="hljs-comment">         * 遍历Signal枚举类中所有的枚举对象的&#x27;编号&#x27;放在数组中</span><br><span class="hljs-comment">         *  public int[] $SWITCH_TABLE$com$qf$enum_class03$Signal()&#123;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Signal[] ss = Signal.valueOf();</span><br><span class="hljs-comment">         *  int[] is = new int[ss.length];</span><br><span class="hljs-comment">         *  int num = 1;</span><br><span class="hljs-comment">         * for(int i = 0;i&lt;ss.length;i++)&#123;</span><br><span class="hljs-comment">         * is[i] = num;</span><br><span class="hljs-comment">         * num++;</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         *  return is;//[1,2,3]</span><br><span class="hljs-comment">         *  &#125;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br><br><br>        <span class="hljs-comment">//$SWITCH_TABLE$com$qf$enum_class03$Signal()[signal.ordinal()]</span><br>        <span class="hljs-keyword">switch</span> (signal) &#123;<br>            <span class="hljs-keyword">case</span> RED:<span class="hljs-comment">//1</span><br>                instruct = <span class="hljs-string">&quot;红灯停&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GREEN:<span class="hljs-comment">//2</span><br>                instruct = <span class="hljs-string">&quot;绿灯行&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> YELLOW:<span class="hljs-comment">//3</span><br>                instruct = <span class="hljs-string">&quot;黄灯请注意&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instruct;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举案例之错误码"><a href="#枚举案例之错误码" class="headerlink" title="枚举案例之错误码"></a>枚举案例之错误码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 组织枚举（组织枚举一般使用接口去组织）</span><br><span class="hljs-comment">* 如果使用类去组织，类中的枚举默认使用 static 修饰，只能本包、本类使用</span><br><span class="hljs-comment">* 如果使用接口去组织，接口中的枚举默认使用public static 修饰，则整个项目均可以使用</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Code</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AddCode</span> &#123;<br>        ERR_A(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;添加失败-学生信息不合法&quot;</span>),<br>        ERR_B(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;添加失败-有重复学生&quot;</span>),<br>        OK(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;添加成功&quot;</span>);<br>        <span class="hljs-type">int</span> code;<br>        String message;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;AddCode&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                    <span class="hljs-string">&quot;, message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        AddCode(<span class="hljs-type">int</span> code, String message) &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        AddCode() &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DeleteCode</span> &#123;<br>        ERR_A(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;删除失败-学生信息不合法&quot;</span>),<br>        ERR_B(-<span class="hljs-number">2</span>, <span class="hljs-string">&quot;删除失败-没有该学生&quot;</span>),<br>        OK(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;删除成功&quot;</span>);<br>        <span class="hljs-type">int</span> code;<br>        String message;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;AddCode&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                    <span class="hljs-string">&quot;, message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        DeleteCode(<span class="hljs-type">int</span> code, String message) &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        DeleteCode() &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UpdateCode</span> &#123;<br>        ERR_A(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;修改失败-学生信息不合法&quot;</span>),<br>        ERR_B(-<span class="hljs-number">2</span>, <span class="hljs-string">&quot;修改失败-无该学生信息&quot;</span>),<br>        ERR_C(-<span class="hljs-number">3</span>, <span class="hljs-string">&quot;修改失败-修改类型错误&quot;</span>),<br>        ERR_D(-<span class="hljs-number">4</span>, <span class="hljs-string">&quot;修改失败-数据类型失败&quot;</span>),<br>        ERR_E(-<span class="hljs-number">5</span>, <span class="hljs-string">&quot;修改失败-目标班级上已有学生&quot;</span>),<br>        ERR_F(-<span class="hljs-number">6</span>, <span class="hljs-string">&quot;修改失败-本班级上已有学号&quot;</span>),<br>        ERR_G(-<span class="hljs-number">7</span>, <span class="hljs-string">&quot;修改失败-修改数据不合法&quot;</span>),<br>        OK(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;修改成功&quot;</span>);<br>        <span class="hljs-type">int</span> code;<br>        String message;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;AddCode&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                    <span class="hljs-string">&quot;, message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        UpdateCode(<span class="hljs-type">int</span> code, String message) &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.message = message;<br>        &#125;<br><br>        UpdateCode() &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据组织枚举优化后的学生管理系统</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        int add = sms.add(stu);</span><br><span class="hljs-comment">//        if (add == -1) &#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;添加失败 -- 学生信息不合法&quot;);</span><br><span class="hljs-comment">//        &#125; else if (add == -2) &#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;添加失败 -- 有重复学生&quot;);</span><br><span class="hljs-comment">//        &#125; else if (add == 1) &#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;添加成功&quot;);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        Code.<span class="hljs-type">AddCode</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> sms.add(stu);<br>        System.out.println(add);<br>        System.out.println(add.getMessage());<br>        System.out.println(add.getCode());<br></code></pre></td></tr></table></figure><h3 id="枚举案例之策略枚举"><a href="#枚举案例之策略枚举" class="headerlink" title="枚举案例之策略枚举"></a>枚举案例之策略枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//知识点：策略枚举</span><br><span class="hljs-comment">//需求：计算员工的工资</span><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//员工类型：</span><br><span class="hljs-comment">//行政人员（校长、前台、财务）、讲师（Java、Pyhton、H5、UI)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Salary</span> &#123;<br>    <span class="hljs-comment">//</span><br>    JAVA(Type.teacher),Python(Type.teacher),UI(Type.teacher),H5(Type.teacher),<br>    principal(Type.administrative),finance(Type.administrative),reception(Type.administrative);<br><br>    <span class="hljs-keyword">private</span> Type type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Salary</span><span class="hljs-params">(Type type)</span>&#123;<br>        <span class="hljs-built_in">this</span>.type=type;<br>    &#125;<br><br>    <span class="hljs-comment">//获取工资</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary, <span class="hljs-type">int</span> classHour, <span class="hljs-type">double</span> teachingHourSubsidy, <span class="hljs-type">double</span> achievements)</span>&#123;<br>        <span class="hljs-keyword">return</span> type.calculationSalary(baseSalary,classHour,teachingHourSubsidy,achievements);<br>    &#125;<br><br>    <span class="hljs-comment">//员工类别的枚举类</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Type</span>&#123;<br>        <span class="hljs-comment">//创建匿名内部类对象</span><br>        <span class="hljs-comment">//底层：创建匿名类继承Type，实现calculationSalary(),创建匿名子类的对象赋值给administrative</span><br>        administrative &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculationSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary, <span class="hljs-type">int</span> classHour, <span class="hljs-type">double</span> teachingHourSubsidy, <span class="hljs-type">double</span> achievements)</span> &#123;<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(baseSalary));<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(achievements));<br>                <span class="hljs-type">double</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> big1.add(big2).doubleValue();<br>                <span class="hljs-keyword">return</span> v;<br>            &#125;<br>        &#125;,<br>        teacher&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculationSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary, <span class="hljs-type">int</span> classHour, <span class="hljs-type">double</span> teachingHourSubsidy, <span class="hljs-type">double</span> achievements)</span> &#123;<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(baseSalary));<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(classHour));<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(teachingHourSubsidy));<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">big4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(achievements));<br>                <span class="hljs-type">double</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> big2.multiply(big3).add(big1).add(big4).doubleValue();<br>                <span class="hljs-keyword">return</span> v;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> baseSalary 基本工资</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> classHour 课时</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> teachingHourSubsidy 课时费</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> achievements 绩效</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span> 工资</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculationSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary,<span class="hljs-type">int</span> classHour,<span class="hljs-type">double</span> teachingHourSubsidy,<span class="hljs-type">double</span> achievements)</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Vetor、Hashtable线程安全</p><h3 id="（一）初识集合"><a href="#（一）初识集合" class="headerlink" title="（一）初识集合"></a>（一）初识集合</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><blockquote><ol><li>集合是Java API所提供的一系列类，可以用于动态存放多个对象 (集合只能存对象)</li><li>集合与数组的不同在于，集合是大小可变的序列（可扩容），而且元素类型可以不受限定，只要是引用类型均可。(集合中不能放基本数据类型，但可以放基本数据类型的包装类)</li><li>集合类全部支持泛型，是一种数据安全的用法。</li></ol></blockquote><h4 id="集合与数组的不同"><a href="#集合与数组的不同" class="headerlink" title="集合与数组的不同"></a>集合与数组的不同</h4><blockquote><p>数组：一旦初始化后长度不可变，元素类型受限定（String类型的数组只能装String的数据），数组可以存储基本数据类型</p><p>集合：长度可变的序列，元素类型不受限定（一个集合可以存储多个数据类型的元素），集合只能存储引用数据类型</p></blockquote><blockquote><p>集合框架：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1670574210875-6d3b4fc9-7cea-4c9a-bfec-182f16c8439d.png#averageHue=%23fbfbfa&clientId=u3b0e4ab9-aa47-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=238&id=t19L9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=273&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97780&status=done&style=none&taskId=ue7d25392-7d1e-4f02-a23c-e52b29718e9&title=&width=699.0545212119875" alt="image.png"><br />主要内容：<br />1、只有Collection中的实现类能使用Iterator进行遍历。<br />2、只有List的实现类能使用ListIterator进行遍历。<br />3、<strong>List与Set的区别：List有操作下标的方法，Set没有操作下标的方法</strong>。<br />4、ArrayList底层是数组，LinkedList底层是双向链表。<br />5、HashSet的特点是无序+去重<br />6、LinkedHashSet继承自HashSet，在此继承上加入了双向链表，特点为有序+去重。<br />7、TreeSet底层使用实现TreeMap，特点为对于自然类型进行排序，对实现Comparable或Comparator的类对象进行排序。<br />8、Map的特点为键值对。<br />9、HashMap的特点key唯一、无序、线程不安全、可以写入null key。<br />10、LinkedHashMap继承HashMap，特点为key唯一、有序、线程不安全、可以写入null key。<br />11、Hashtable特点为key唯一、无序、线程安全（方法锁）、效率低、不能写入null key。<br />12、ConcurrentHashMap特点为key唯一、无序、线程安全（局部锁）、效率高、不能写入null key。<br />13、Properties配置文件类，可以读取properties文件的内容。<br />14、TreeMap可以对自然类型进行排序、对实现Comparable或Comparator的类对象进行排序。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671412440049-bc165e63-fdbd-4f8a-a48d-9c651f4c6364.png#averageHue=%23b7bbb8&clientId=u505d7b00-897e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=449&id=u6ae4f3b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=514&originWidth=1147&originalType=binary&ratio=1&rotation=0&showTitle=false&size=545463&status=done&style=none&taskId=ubdc9ce10-3cba-4fd9-800b-8097c2321e0&title=&width=1001.0181471038073" alt="image.png"></p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ol><li>Collection 与 Map的区别</li></ol><p>Collection 存单个值，可以获取迭代器进行遍历</p><p>Map存两个值(Key-Value)，不可以获取迭代器，不能遍历（Map可以间接遍历）</p><ol start="2"><li>理解Set为什么是无序</li></ol><p>无序：存入顺序和取出顺序不一致，无序不等于随机</p><ol start="3"><li>ArrayList 与 LinkedList的区别</li></ol><p>使用上的区别：</p><p>​LinkedList添加了</p><p>​队列模式-先进先出（removeFirst（））</p><p>​栈模式-先进后出（removeLast（））</p><p>效率上的区别：</p><p>ArrayList底层数据结构是一维数组</p><p>LinkedList底层数据结构是双向链表</p><p>​添加 - 不扩容的情况：ArrayList快</p><p>​添加 - 扩容的情况：LinkedList快</p><p>​删除：LinkedList快</p><p>​查询：ArrayList快</p><p>​修改：ArrayList快</p><p>​注意：工作中常用ArrayList，因为很多需求都需要使用查询功能，ArrayList查询更快</p><ol start="4"><li>各种集合的应用场景</li></ol><p>ArrayList：存数据，线程不安全</p><p>LinkedList：队列模式、栈模式，线程不安全</p><p>Vector：弃用，线程安全</p><p>Stack：弃用，线程安全</p><p>HashSet：去重+无序，线程不安全</p><p>LinkedHashSet：去重+有序，线程不安全</p><p>TreeSet：排序，线程不安全</p><p>HashMap：存key+value，key去重，无序，线程不安全</p><p>LinkedHashMap：存key+value，key去重，有序，线程不安全</p><p>Hashtable：弃用，存key+value，key去重，无序，线程安全，方法加锁-效率低</p><p>ConcurrentHashMap：存key+value，key去重，无序，线程安全，局部加锁、CAS（高并发）-效率高</p><p>TreeMap：存key+value，针对于Key排序</p><p>Properties：配置文件</p></blockquote><h3 id="（二）List"><a href="#（二）List" class="headerlink" title="（二）List"></a>（二）List</h3><blockquote><p>特点：有序且可重复（因为List接口中添加了许多针对下标操作的方法）</p><p>​允许多个null元素</p><p>在实际开发中，我们如何选择list的具体实现？</p><p>1.安全性问题</p><p>2.是否频繁插入，删除操作（LinkedList）</p><p>3.是否是存储后遍历</p></blockquote><h4 id="1、ArrayList"><a href="#1、ArrayList" class="headerlink" title="1、ArrayList"></a>1、ArrayList</h4><blockquote><p>ArrayList</p><ol><li>实现原理：采用动态对象数组实现，默认构造方法创建了一个空数组</li><li>第一次添加元素，扩展容量为10，之后的扩充算法：原来数组大小+原数组大小的一半（右移为0.5倍）</li><li>不适合进行删除或插入操作</li><li>为了防止数组动态扩充次数过多，建议创建ArrayList时，给定初始容量</li><li>多线程中使用不安全，适合在单线程访问时使用，效率较高</li><li>JDK1.2开始引入</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>   <span class="hljs-comment">//添加数据 add</span><br>   list.add(<span class="hljs-string">&quot;lh&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;wh&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;zs&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;sl&quot;</span>);<br><br>   <span class="hljs-comment">//获取长度 size</span><br>   System.out.println(<span class="hljs-string">&quot;获取元素个数：&quot;</span>+list.size());<br><br>   <span class="hljs-comment">//设置指定下标的元素</span><br>   list.set(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br><br>   <span class="hljs-comment">//获取指定下标元素</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">2</span>);<br><br>   <span class="hljs-comment">//在指定下标上添加元素</span><br>   list.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;join&quot;</span>);<br><br><br>   ArrayList&lt;String&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   Collections.addAll(newList,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;ccc&quot;</span>);<span class="hljs-comment">//使用集合工具类批量添加元素</span><br>   <span class="hljs-comment">//将另一个List对象添加到list的末尾</span><br>   list.addAll(newList);<span class="hljs-comment">//[lh, wh, Tom, join, sl, aaa, bbb, ccc]</span><br><br>   <span class="hljs-comment">//将另一个List对象添加到list的指定位置，将原来的元素后移</span><br>   list.addAll(<span class="hljs-number">0</span>,newList);<span class="hljs-comment">//[aaa, bbb, ccc, lh, wh, Tom, join, sl, aaa, bbb, ccc]</span><br><br>   <span class="hljs-comment">//判断集合中是否有指定元素</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">lg</span> <span class="hljs-operator">=</span> list.contains(<span class="hljs-string">&quot;lg&quot;</span>);<br>   System.out.println(lg);<span class="hljs-comment">//false</span><br><br>   <span class="hljs-comment">//判断集合中是否有指定集合</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> list.containsAll(newList);<br>   System.out.println(b);<span class="hljs-comment">//true</span><br><br>   <span class="hljs-comment">//判断集合是否为空</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">empty</span> <span class="hljs-operator">=</span> list.isEmpty();<br>   System.out.println(empty);<span class="hljs-comment">//false</span><br><br>   <span class="hljs-comment">//获取元素在集合中第一次出现的下标</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> list.indexOf(<span class="hljs-string">&quot;aaa&quot;</span>);<br>   System.out.println(aaa);<span class="hljs-comment">//0</span><br>   <span class="hljs-comment">//获取元素在集合中最后一次出现的下标</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">bbb</span> <span class="hljs-operator">=</span> list.lastIndexOf(<span class="hljs-string">&quot;bbb&quot;</span>);<br>   System.out.println(bbb);<span class="hljs-comment">//9</span><br><br>   <span class="hljs-comment">//根据下标删除元素</span><br>   list.remove(<span class="hljs-number">0</span>);<br>   <span class="hljs-comment">//根据元素删除元素</span><br>   list.remove(<span class="hljs-string">&quot;bbb&quot;</span>);<br>   <span class="hljs-comment">//删除此集合中与子集相同的元素</span><br>   list.removeAll(newList);<span class="hljs-comment">//[lh, wh, Tom, join, sl]</span><br><br>   <span class="hljs-comment">//保留集合与子集合中相同的元素</span><br>   ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   strings.add(<span class="hljs-string">&quot;lh&quot;</span>);<br>   strings.add(<span class="hljs-string">&quot;wh&quot;</span>);<br>   strings.add(<span class="hljs-string">&quot;sl&quot;</span>);<br>   strings.add(<span class="hljs-string">&quot;zs&quot;</span>);<br>   list.retainAll(strings);<span class="hljs-comment">//[lh, wh, sl]</span><br><br>   <span class="hljs-comment">//从开始下标截取到结束（不包含）下标的集合</span><br>   List&lt;String&gt; strings1 = list.subList(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>   System.out.println(strings1);<span class="hljs-comment">//[lh, wh]</span><br><br>   <span class="hljs-comment">//将集合转换为数组</span><br>   Object[] array1 = strings1.toArray();<br>   System.out.println(Arrays.toString(array1));<span class="hljs-comment">//[lh, wh]</span><br><br>   <span class="hljs-comment">//将集合转换为数组</span><br>   String[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">4</span>];<br>   strings1.toArray(array);<span class="hljs-comment">//[lh, wh, null, null]</span><br>   System.out.println(Arrays.toString(array));<br><br>   <span class="hljs-comment">//输出集合</span><br>   System.out.println(list);<br><br>   <span class="hljs-comment">//遍历ArrayList集合 for循环</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>       System.out.println(list.get(i));<br>   &#125;<br><br>   <span class="hljs-comment">//遍历ArrayList集合 --foreach</span><br>   <span class="hljs-keyword">for</span> (String element: list) &#123;<br>       System.out.println(element);<br>   &#125;<br><br>   <span class="hljs-comment">//遍历ArrayList集合 Iterator迭代器</span><br>   Iterator&lt;String&gt; it = list.iterator();<span class="hljs-comment">//迭代器对象</span><br>   <span class="hljs-keyword">while</span> (it.hasNext())&#123;<span class="hljs-comment">//判断是否有可迭代的对象，迭代的光标最开始在第一个元素的前方</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> it.next();<span class="hljs-comment">//返回下一个数据</span><br>       System.out.println(next);<br>   &#125;<br><br>   <span class="hljs-comment">//遍历ArrayList集合 ListIterator迭代器</span><br>   ListIterator&lt;String&gt; listIterator = list.listIterator();<br>   <span class="hljs-keyword">while</span> (listIterator.hasNext())&#123;<br>       System.out.println(listIterator.next());<br>   &#125;<br><br>   <span class="hljs-comment">//清空集合中所有数据</span><br>   list.clear();<br></code></pre></td></tr></table></figure><h4 id="2、ArrayList底层"><a href="#2、ArrayList底层" class="headerlink" title="2、ArrayList底层"></a>2、ArrayList底层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//通过特定场景来进入源码</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      list.add(<span class="hljs-string">&quot;麻生希&quot;</span>);<br>      list.add(<span class="hljs-string">&quot;椎名空&quot;</span>);<br>      list.add(<span class="hljs-string">&quot;朝桐光&quot;</span>);<br>      list.add(<span class="hljs-string">&quot;樱井步&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">       <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  ArrayList的父类AbstractList中一个重要的内容：modCount 外部操作数（记录添加和删除数据的次数）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCollection</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>           <span class="hljs-comment">//外部操作数（记录添加和删除数据的次数）</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">modCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ArrayList类中以下重要的参数和方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.util.AbstractList&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>            <span class="hljs-comment">//默认初始化容量</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//没有长度的数据</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br>            <span class="hljs-comment">//没有长度的数据</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br>            <span class="hljs-comment">//容器</span><br>            <span class="hljs-keyword">transient</span> Object[] elementData;<br>            <span class="hljs-comment">//元素个数</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br><br>            <span class="hljs-comment">//无参构造器，默认情况下将一个空数组 赋值给 容器</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>            &#125;<br><br>            <span class="hljs-comment">//有参构造器，指定容器的容量。</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>                <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//&gt;0 则将指定容量的数组 赋值给 容器</span><br>                    <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//=0 则将没有长度的数组 赋值给 容器</span><br>                    <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//其他数值，不符合条件，则报错</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                            initialCapacity);<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br><span class="hljs-comment">//  ******************************************************************     </span><br><br><span class="hljs-comment">//ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br>        <span class="hljs-comment">//创建ArrayList对象，执行无参构造器进行初始化参数</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<span class="hljs-comment">//DEFAULTCAPACITY_EMPTY_ELEMENTDATA=&#123;&#125;</span><br>        &#125;<br>        <span class="hljs-comment">//此时elementData=&#123;&#125; size=0 elementData容量=0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一次进行添加元素</span><br><span class="hljs-comment">//list.add(&quot;麻生希&quot;);</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=麻生希</span><br>           ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// size=0 进入ensureCapacityInternal</span><br>           elementData[size++] = e;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-comment">//进入ensureCapacityInternal</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=1</span><br>           ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<span class="hljs-comment">//minCapacity=1，elementData=&#123;&#125; 进入calculateCapacity</span><br>       &#125;<br><br>       <span class="hljs-comment">//进入calculateCapacity</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//elementData=&#123;&#125;,minCapacity=1</span><br>           <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>               <span class="hljs-comment">//如果elementData=&#123;&#125;则返回minCapacity和DEFAULT_CAPACITY中的最大值</span><br>               <span class="hljs-comment">//minCapacity=1 ，DEFAULT_CAPACITY=10</span><br>               <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<span class="hljs-comment">//返回10</span><br>           &#125;<br>           <span class="hljs-keyword">return</span> minCapacity;<br>       &#125;<br><br>   <span class="hljs-comment">//</span><br><br>       <span class="hljs-comment">//返回 10 进入ensureExplicitCapacity</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=10</span><br>           modCount++;<span class="hljs-comment">//外部操作数++</span><br><br>           <span class="hljs-comment">// 判断是否需要扩容，</span><br>           <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//10-0&gt;0 满足</span><br>               grow(minCapacity);<span class="hljs-comment">//进入grow  minCapacity=10</span><br>       &#125;<br><br>       <span class="hljs-comment">//进入grow</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">// minCapacity=10</span><br>           <span class="hljs-comment">// overflow-conscious code</span><br>           <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<span class="hljs-comment">//oldCapacity=0</span><br>           <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">//newCapacity=0+0=0</span><br>           <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//0-10&lt;0 满足</span><br>               newCapacity = minCapacity;<span class="hljs-comment">//newCapacity=10</span><br>           <span class="hljs-comment">//private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;大概21亿-8</span><br>           <span class="hljs-comment">// 10-21亿-8  &gt;0 不满足则跳过下一句</span><br>           <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>               newCapacity = hugeCapacity(minCapacity);<br><br>           elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//进行扩容elementData=&#123;&#125;,newCapacity=10</span><br>       &#125;<br><br>       <span class="hljs-comment">//返回</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=麻生希</span><br>           ensureCapacityInternal(size + <span class="hljs-number">1</span>);<span class="hljs-comment">//已执行</span><br>           elementData[size++] = e;<span class="hljs-comment">//  elementData[0]=&quot;麻生希&quot; size=size+1=0+1=1</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br><br>       <span class="hljs-comment">//执行完add返回true</span><br>       <span class="hljs-comment">//此时的elementData=&#123;&quot;麻生希&quot;,null,null,null,null,null,null,null,null,null&#125; size=1 elementData容量=10</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用无参构造器构造ArrayList对象，则初始化一个空数组给容器。使用有参构造器指定容量构造对象，若大于0则new一个指定长度的Object数组给容器，否则开始赋值空数组给容器</span><br><span class="hljs-comment">//第一次add，进入先进行扩容，扩容长度为默认长度。</span><br><br><span class="hljs-number">1</span>、ArrayList的数据结构为Object的一维数组<br><span class="hljs-number">2</span>、ArrayList的默认长度为<span class="hljs-number">10</span><br><span class="hljs-number">3</span>、ArrayList的扩容机制为原来的 <span class="hljs-number">1.5</span> 倍<br><span class="hljs-number">4</span>、ArrayList的数组的最大长度为Integer最大值-<span class="hljs-number">8</span>，为什么要-<span class="hljs-number">8</span> 需要为数组的头部信息预留存储空间<br></code></pre></td></tr></table></figure><h4 id="3、Iterator"><a href="#3、Iterator" class="headerlink" title="3、Iterator"></a>3、Iterator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象方法</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>E <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//默认方法</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;remove&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">只有Collection的实现类能使用Iterator<br>不同的集合底层的实现的数据结构是不一样的<br>ArrayList -数组<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> implement Iterator<br>    遍历数组<br>    <br>LinkedList-双向链表<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> implement Iterator<br>    遍历双向链表<br>    <br>HashSet -hash数组<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> implement Iterator<br>    遍历haash数组<br><br>所以将Iterator设计为接口，在每个集合中的内部类实现进行重新抽象方法实现对应的操作。<br>对于默认方法remove，不重写，则调用remove时调用原生的remove方法，默认抛出异常。    <br>    <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCollection</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>  <span class="hljs-comment">//外部操作数，在添加和删除时对外部操作数modCount（记录用户添加和删除数据的次数）进行++</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">modCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br>------------------------------------------------------------<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br>&#123;<br><span class="hljs-comment">//数组容器</span><br>    <span class="hljs-keyword">transient</span> Object[] elementData; <br>    <span class="hljs-comment">//元素个数</span><br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">//add方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>     ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 判断是否扩容</span><br>     elementData[size++] = e;<span class="hljs-comment">//添加元素 size++</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//方法调用过程：add-》ensureCapacityInternal-》ensureExplicitCapacity</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        modCount++;<span class="hljs-comment">//更新外部操作数</span><br>         <br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>            grow(minCapacity);<br>    &#125;  <br>&#125;<br><br><span class="hljs-comment">//每次add时，modCount+1 element数组中存放数据 size+1</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前类的迭代器对象</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br>    &#125;<br><br><span class="hljs-comment">//成员内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>        <span class="hljs-type">int</span> cursor;       <span class="hljs-comment">// 游标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 记录当前遍历元素的下标</span><br>        <span class="hljs-comment">//将外部操作数 赋值给 内部操作数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<span class="hljs-comment">//modCount在AbstractList中</span><br><br>        Itr() &#123;&#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> cursor != size;<br>        &#125;<br><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>            checkForComodification();<span class="hljs-comment">//判断外部操作数 是否不等于 内部操作数，不等于报错</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>            <span class="hljs-keyword">if</span> (i &gt;= size)<span class="hljs-comment">//当cursor超出有效范围，则报错</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>            Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<span class="hljs-comment">//获取外部类的元素数组</span><br>            <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<span class="hljs-comment">//当cursor超出数组长度，则报错</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>            cursor = i + <span class="hljs-number">1</span>;<span class="hljs-comment">//更新游标</span><br>            <span class="hljs-keyword">return</span> (E) elementData[lastRet = i];<span class="hljs-comment">//返回当前下标对应的元素</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>            checkForComodification();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                ArrayList.<span class="hljs-built_in">this</span>.remove(lastRet);<br>                cursor = lastRet;<br>                lastRet = -<span class="hljs-number">1</span>;<br>                expectedModCount = modCount;<br>            &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachRemaining</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> E&gt; consumer)</span> &#123;<br>            Objects.requireNonNull(consumer);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> ArrayList.<span class="hljs-built_in">this</span>.size;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>            <span class="hljs-keyword">if</span> (i &gt;= size) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">final</span> Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<br>            <span class="hljs-keyword">if</span> (i &gt;= elementData.length) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;<br>                consumer.accept((E) elementData[i++]);<br>            &#125;<br>            <span class="hljs-comment">// update once at end of iteration to reduce heap write traffic</span><br>            cursor = i;<br>            lastRet = i - <span class="hljs-number">1</span>;<br>            checkForComodification();<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//判断外部操作数 是否不等于 内部操作数，不等于报错</span><br>            <span class="hljs-comment">//用于避免在遍历时，若添加或删除集合，导致集合长度发生改变，遍历可能出现数据遗漏问题，所以需要保障外部操作数和内部操作数一致</span><br>            <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>Iterator&lt;String&gt; it = list.iterator();<br><span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(element.equals(<span class="hljs-string">&quot;小红&quot;</span>))&#123;<br>        <span class="hljs-comment">//list.remove(element);//异常：ConcurrentModificationException，底层内部操作数和外部操作数不一致</span><br>        it.remove();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> (String element: list) &#123;<br>    System.out.println(element);<br>&#125;<br><span class="hljs-comment">//小绿</span><br><span class="hljs-comment">//小蓝</span><br><span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><p>注意：在使用迭代器进行遍历时，若要对list进行修改，则不能直接使用list进行修改（存在内部操作数和外部操作数不一致的情况，会进行报错），所以使用迭代器对象进行操作，因为迭代器在的remove方法，在删除后对内部操作数和外部操作数进行了同步。<br />内部操作数和外部操作数存在的意义为避免在遍历时，因为添加和删除集合元素，而改变集合长度，从而出现数据遗漏的问题。</p><p><a name="QkCZL"></a></p><h4 id="4、ListIterator"><a href="#4、ListIterator" class="headerlink" title="4、ListIterator"></a>4、ListIterator</h4><p>功能更丰富，可以在遍历时删除添加或替换元素、指定下标遍历数据、倒序遍历 (Iterator只能删除)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>ListIterator&lt;String&gt; it = list.listIterator();<br><span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(element.equals(<span class="hljs-string">&quot;小绿&quot;</span>))&#123;<br>        it.remove();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (String element: list) &#123;<br>    System.out.println(element);<br>&#125;<br><span class="hljs-comment">//小红</span><br><span class="hljs-comment">//小蓝</span><br><span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>ListIterator&lt;String&gt; it = list.listIterator();<br><span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(next.equals(<span class="hljs-string">&quot;小绿&quot;</span>))&#123;<br>        it.add(<span class="hljs-string">&quot;小黑&quot;</span>);<span class="hljs-comment">//直接使用list.add会报错</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (String element: list) &#123;<br>    System.out.println(element);<br>&#125;<br><span class="hljs-comment">//小红</span><br><span class="hljs-comment">//小绿</span><br><span class="hljs-comment">//小黑</span><br><span class="hljs-comment">//小蓝</span><br><span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>ListIterator&lt;String&gt; it = list.listIterator();<br><span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(element.equals(<span class="hljs-string">&quot;小红&quot;</span>))&#123;<br>        it.set(<span class="hljs-string">&quot;小紫&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> (String element: list) &#123;<br>    System.out.println(element);<br>&#125;<br><span class="hljs-comment">//小紫</span><br><span class="hljs-comment">//小绿</span><br><span class="hljs-comment">//小蓝</span><br><span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br> list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br> list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br> list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br> list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br> <br><span class="hljs-comment">//形参指定遍历的开始下标</span><br>ListIterator&lt;String&gt; it = list.listIterator(<span class="hljs-number">1</span>);<br> <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> it.next();<br>     System.out.println(element);<br> &#125;<br> <span class="hljs-comment">//小绿</span><br> <span class="hljs-comment">//小蓝</span><br> <span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br><span class="hljs-comment">//遍历开始下标在size上，即在最后一个元素下方</span><br>ListIterator&lt;String&gt; it = list.listIterator(list.size());<br><span class="hljs-keyword">while</span> (it.hasPrevious())&#123;<span class="hljs-comment">//判断之前是否有可迭代的元素</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> it.previous();<span class="hljs-comment">//获取上一个元素</span><br>    System.out.println(element);<br>&#125;<br><span class="hljs-comment">//小白</span><br><span class="hljs-comment">//小蓝</span><br><span class="hljs-comment">//小绿</span><br><span class="hljs-comment">//小红</span><br></code></pre></td></tr></table></figure><p><a name="iXdGE"></a></p><h4 id="5、foreach底层"><a href="#5、foreach底层" class="headerlink" title="5、foreach底层"></a>5、foreach底层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * foreach底层由iterator迭代器实现</span><br><span class="hljs-comment">   */</span><br><br>  ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  list.add(<span class="hljs-string">&quot;小红&quot;</span>);<br>  list.add(<span class="hljs-string">&quot;小绿&quot;</span>);<br>  list.add(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>  list.add(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>  String element;<br>  <span class="hljs-comment">//执行流程：(Iterator&lt;String&gt; it=list.iterator() -》 it.hasNext() -》 element=it.next(); -》 System.out.println(element)</span><br>  <span class="hljs-keyword">for</span>(Iterator&lt;String&gt; it=list.iterator();it.hasNext(); System.out.println(element))&#123;<br>      element=it.next();<br>  &#125;<br>  <span class="hljs-comment">//小红</span><br>  <span class="hljs-comment">//小绿</span><br>  <span class="hljs-comment">//小蓝</span><br>  <span class="hljs-comment">//小白</span><br></code></pre></td></tr></table></figure><p><a name="l6k5t"></a></p><h4 id="6、LinkedList"><a href="#6、LinkedList" class="headerlink" title="6、LinkedList"></a>6、LinkedList</h4><blockquote><ol><li><p>LinkedList</p></li><li><p>实现原理：采用双向链表结构实现</p></li><li><p>适合插入，删除操作，性能高</p></li></ol></blockquote><p>与ArrayList有大多相同的方法。<br />LinkedList独特的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java">   LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>   list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><br><br>   <span class="hljs-comment">//添加到开头</span><br>   list.addFirst(<span class="hljs-string">&quot;aaa1&quot;</span>);<span class="hljs-comment">//底层调用linkFirst()</span><br>   list.offerFirst(<span class="hljs-string">&quot;aaa2&quot;</span>);<span class="hljs-comment">//底层调用addFirst()</span><br>   list.push(<span class="hljs-string">&quot;aaa3&quot;</span>);<br>   <span class="hljs-comment">//aaa3</span><br>   <span class="hljs-comment">//aaa2</span><br>   <span class="hljs-comment">//aaa1</span><br>   <span class="hljs-comment">//aaa</span><br>   <span class="hljs-comment">//bbb</span><br><br>   <span class="hljs-comment">//添加到末尾</span><br>   list.addLast(<span class="hljs-string">&quot;zzz1&quot;</span>);<span class="hljs-comment">//底层调用linkLast()</span><br>   list.offer(<span class="hljs-string">&quot;zzz2&quot;</span>);<span class="hljs-comment">//底层调用add()</span><br>   list.offerLast(<span class="hljs-string">&quot;zzz3&quot;</span>);<span class="hljs-comment">//底层调用addLast()</span><br>   <span class="hljs-comment">//aaa</span><br>   <span class="hljs-comment">//bbb</span><br>   <span class="hljs-comment">//zzz1</span><br>   <span class="hljs-comment">//zzz2</span><br>   <span class="hljs-comment">//zzz3</span><br><br>   <span class="hljs-comment">//获取第一个元素</span><br>   System.out.println(<span class="hljs-string">&quot;获取第一个元素：+&quot;</span>+list.getFirst());<br>   System.out.println(<span class="hljs-string">&quot;获取第一个元素：+&quot;</span>+list.element());<span class="hljs-comment">//底层调用gerFirst</span><br>   System.out.println(<span class="hljs-string">&quot;获取第一个元素：+&quot;</span>+list.peek());<br>   System.out.println(<span class="hljs-string">&quot;获取第一个元素：+&quot;</span>+list.peekFirst());<br><br>   <span class="hljs-comment">//获取最后一个元素</span><br>   System.out.println(<span class="hljs-string">&quot;获取最后一个元素：&quot;</span>+list.getLast());<br>   System.out.println(<span class="hljs-string">&quot;获取最后一个元素：&quot;</span>+list.peekLast());<br><br>   <span class="hljs-comment">//删除第一个元素</span><br>   list.removeFirst();<br>   list.poll();<br>   list.pollFirst();<br><br>   <span class="hljs-comment">//删除最后一个元素</span><br>   list.removeLast();<br>   list.pollLast();<br><br><span class="hljs-comment">//删除集合中第一次出现的此元素</span><br>   list.removeFirstOccurrence(<span class="hljs-string">&quot;aaa&quot;</span>);<br>   <span class="hljs-comment">//删除集合中最后一次出现的此元素</span><br>   list.removeLastOccurrence(<span class="hljs-string">&quot;bbb&quot;</span>);<br><br>  <span class="hljs-comment">//正序遍历,并删除</span><br>   <span class="hljs-keyword">while</span> (!list.isEmpty())&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> list.pollFirst();<br>       System.out.println(element);<br>   &#125;<br><br>   <span class="hljs-comment">//逆序遍历并删除</span><br>   <span class="hljs-keyword">while</span> (!list.isEmpty())&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> list.pollLast();<br>       System.out.println(element);<br>   &#125;<br><br>   <span class="hljs-comment">//倒序遍历</span><br>   Iterator&lt;String&gt; it = list.descendingIterator();<br>   <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>       System.out.println(it.next());<br>   &#125;<br><br>   <span class="hljs-comment">//正序遍历</span><br>   ListIterator&lt;String&gt; it = list.listIterator();<br>   <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>       System.out.println(it.next());<br>   &#125;<br><br><br><br></code></pre></td></tr></table></figure><p><a name="MUn5K"></a></p><h4 id="7、LinkedList底层源码"><a href="#7、LinkedList底层源码" class="headerlink" title="7、LinkedList底层源码"></a>7、LinkedList底层源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>&lt;E&gt;<span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSequentialList</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable<br>&#123;<br>  <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br>  <span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br><br>  <span class="hljs-comment">//结点类</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<span class="hljs-comment">//数据域</span><br>    Node&lt;E&gt; next;<span class="hljs-comment">//指向上一个结点</span><br>    Node&lt;E&gt; prev;<span class="hljs-comment">//指向下一个结点</span><br><br>    <span class="hljs-comment">//初始化结点</span><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>      <span class="hljs-built_in">this</span>.item = element;<br>      <span class="hljs-built_in">this</span>.next = next;<br>      <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//第一次添加：list.add(&quot;lh&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;lh&quot;</span><br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;lh&quot;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<span class="hljs-comment">//last=null</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<span class="hljs-comment">//new Node&lt;&gt;(null, &quot;lh&quot;, null) -0x001</span><br>    last = newNode;<span class="hljs-comment">//last=0x001</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<span class="hljs-comment">//l==null 进入</span><br>      first = newNode;<span class="hljs-comment">//first=0x001</span><br>    <span class="hljs-keyword">else</span><br>      l.next = newNode;<br>    size++;<span class="hljs-comment">//size=0+1=1</span><br>    modCount++;<br>  &#125;<br><br>  <span class="hljs-comment">//第二次添加list.add(&quot;zk&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;zk&quot;</span><br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;kz&quot;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<span class="hljs-comment">//last=0x001</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<span class="hljs-comment">//new Node&lt;&gt;(0x001, &quot;kz&quot;, null) -0x002</span><br>    last = newNode;<span class="hljs-comment">//last=0x002</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>      first = newNode;<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//1 == 0x001</span><br>      l.next = newNode; <span class="hljs-comment">//0x001所在的结点的next指向0x002</span><br>    size++;<span class="hljs-comment">//size=1+1=2</span><br>    modCount++;<br>  &#125;<br>  <br><br>&#125;<br></code></pre></td></tr></table></figure><p>LinkedList数据结构是双向链表。<br />ArrayList vs LinkedList<br />相同点：在使用上没有较大的区别<br />数据结构的区别：ArrayList-一维数组，LinkedList-双向链表<br />效率的区别：<br />添加-ArrayList不扩容：ArrayList快<br />添加-ArrayList扩容：LinkedList快<br />删除：LinkedList快<br />查询：ArrayList快<br />修改：ArrayList快</p><p>模拟队列和栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br> list.add(<span class="hljs-string">&quot;lh&quot;</span>);<br> list.add(<span class="hljs-string">&quot;mxl&quot;</span>);<br> list.add(<span class="hljs-string">&quot;hzy&quot;</span>);<br><br> <span class="hljs-keyword">while</span> (!list.isEmpty())&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.removeFirst();<span class="hljs-comment">//先进先出</span><br>     System.out.println(s);<br> &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;lh&quot;</span>);<br>list.add(<span class="hljs-string">&quot;mxl&quot;</span>);<br>list.add(<span class="hljs-string">&quot;hzy&quot;</span>);<br><br><span class="hljs-keyword">while</span> (!list.isEmpty())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.removeLast();<span class="hljs-comment">//先进后出</span><br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="xS5Wx"></a></p><h4 id="7、Vector底层源码"><a href="#7、Vector底层源码" class="headerlink" title="7、Vector底层源码"></a>7、Vector底层源码</h4><blockquote><p>Vector</p><ol><li><p>实现原理：采用动态对象数组实现，默认构造方法创建大小为10的对象数组</p></li><li><p>扩充的算法：当增量为0时，扩充为原大小的2倍；当增量大于0时，就扩充为原大小+增量</p></li><li><p>不适合删除或插入操作</p></li><li><p>为了防止数组动态扩充次数过多，建议创建Vector时，给定初始容量</p></li><li><p>线程安全（synchronized），适合在多线程访问时使用，效率较低</p></li></ol></blockquote><h5 id="面试题：Vector与ArrayList的区别？ArrayList、Vector"><a href="#面试题：Vector与ArrayList的区别？ArrayList、Vector" class="headerlink" title="面试题：Vector与ArrayList的区别？ArrayList、Vector"></a>面试题：Vector与ArrayList的区别？ArrayList、Vector</h5><blockquote><p>ArrayList：线程不安全，扩充方法为原大小+0.5倍原大小</p><p>Vector：线程安全，扩充方法为当增量为0时，扩充为原大小的2倍，若增量大于0，扩充为原大小+增量</p></blockquote><p>不常使用，方法和List大致一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Vector继承自AbstractList</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCollection</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">modCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-comment">//********************************************</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;<br><br>    <span class="hljs-comment">//容器：一维数组</span><br>    <span class="hljs-keyword">protected</span> Object[] elementData;<br>    <span class="hljs-comment">//元素个数：长度</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> elementCount;<br>    <span class="hljs-comment">//容量增量    </span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> capacityIncrement;<br>    <span class="hljs-comment">//容量最大长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ARRAY_SIZE</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;  <br><br>    <span class="hljs-comment">//构造器初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">        Vector&lt;String&gt; vector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>        vector.add(<span class="hljs-string">&quot;lh&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;wh&quot;</span>);<br>        vector.add(<span class="hljs-string">&quot;xl&quot;</span>);<br><br><span class="hljs-comment">//**********************************</span><br>    <span class="hljs-comment">//new Vector&lt;&gt;()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>    &#125;<br><br><span class="hljs-comment">//最终的构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<span class="hljs-comment">//initialCapacity=10，capacityIncrement=0</span><br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);<br>                                               <br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<span class="hljs-comment">// this.elementData = new Object[10];</span><br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement;<span class="hljs-comment">//capacityIncrement=0</span><br>    &#125;<br><br><span class="hljs-comment">//经过无参构造器的初始化后可得elementData = new Object[10]，capacityIncrement=0</span><br><br><span class="hljs-comment">//vector.add(&quot;lh&quot;);</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;lh&quot;</span><br>        modCount++;<br>        ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<span class="hljs-comment">//elementCount=0</span><br>        elementData[elementCount++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=1</span><br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//1-10=-9&lt;0 不进入</span><br>            grow(minCapacity);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                         capacityIncrement : oldCapacity);<br>        <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>            newCapacity = hugeCapacity(minCapacity);<br>        elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;lh&quot;</span><br>      modCount++;<br>      ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<span class="hljs-comment">//elementCount=10</span><br>      elementData[elementCount++] = e;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=11</span><br>      <span class="hljs-comment">// overflow-conscious code</span><br>      <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//11-10=1&gt;0 进入</span><br>          grow(minCapacity);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=11</span><br>      <span class="hljs-comment">// overflow-conscious code</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<span class="hljs-comment">//oldCapacity=10</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                       capacityIncrement : oldCapacity);<span class="hljs-comment">//newCapacity=10+10=20</span><br>      <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//20-10=10&gt;0 不进入</span><br>          newCapacity = minCapacity;<br>      <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//20-MAX_ARRAY_SIZE&lt;0 不进入</span><br>          newCapacity = hugeCapacity(minCapacity);<br>      elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//elementData=&#123;&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;&#125;,newCapacity=20</span><br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Vector&lt;String&gt; v=new Vector&lt;&gt;(100,50);//(初始化容量，容量增量)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<span class="hljs-comment">//initialCapacity=100,capacityIncrement=50</span><br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//100&gt;0 不进入</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<span class="hljs-comment">//this.elementData = new Object[100];</span><br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement; <span class="hljs-comment">//this.capacityIncrement=50</span><br>    &#125;<br><br><br><span class="hljs-comment">//</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e=&quot;lh&quot;</span><br>        modCount++;<br>        ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<span class="hljs-comment">//elementCount=100</span><br>        elementData[elementCount++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=101</span><br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//101 - 100 &gt;0 进入</span><br>            grow(minCapacity);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//minCapacity=101</span><br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<span class="hljs-comment">//oldCapacity=100</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                         capacityIncrement : oldCapacity);<span class="hljs-comment">//newCapacity=100+50=150</span><br>        <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//150 -101 &gt;0 不进入</span><br>            newCapacity = minCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//150-MAX_ARRAY_SIZE&lt;0 不进入</span><br>            newCapacity = hugeCapacity(minCapacity);<br>        elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//elementData=&#123;&quot;1&quot;,...,&quot;100&quot;&#125;,newCapacity=150</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector的数据结构是Object类型的一维数组。<br>Vector的初始化容量为<span class="hljs-number">10</span>。<br>Vector扩容机制是，如果容量增量等于<span class="hljs-number">0</span>，新长度是原来数组的<span class="hljs-number">2</span>倍。如果容量增量大于<span class="hljs-number">0</span>，新长度是原来数组+容量增量。<br>Vector和ArrayList的底层逻辑基本一致，但是Vector的方法上了锁，所以是线程安全的。<br></code></pre></td></tr></table></figure><p><a name="VzXQX"></a></p><h4 id="8、Stack-堆栈"><a href="#8、Stack-堆栈" class="headerlink" title="8、Stack:堆栈"></a>8、Stack:堆栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Stack extends Vector&lt;E&gt;</span><br><span class="hljs-comment">     * 特点：先进后出（栈）</span><br><span class="hljs-comment">     */</span><br><br>    Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-comment">//添加元素到栈顶</span><br>    stack.push(<span class="hljs-string">&quot;小1&quot;</span>);<br>    stack.push(<span class="hljs-string">&quot;小2&quot;</span>);<br>    stack.push(<span class="hljs-string">&quot;小3&quot;</span>);<br>    stack.push(<span class="hljs-string">&quot;小4&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;查询元素距离栈定位置（从1开始）：&quot;</span>+stack.search(<span class="hljs-string">&quot;小3&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;获取栈顶元素：&quot;</span>+stack.peek());<br>    System.out.println(<span class="hljs-string">&quot;获取栈顶元素，并删除：&quot;</span>+stack.pop());<br><br><br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>        System.out.println(stack.pop());<br>    &#125;<br>    <span class="hljs-comment">//查询元素举例栈定位置（从1开始）：2</span><br>    <span class="hljs-comment">//获取栈定元素：小4</span><br>    <span class="hljs-comment">//获取栈定元素，并删除：小4</span><br>    <span class="hljs-comment">//小3</span><br>    <span class="hljs-comment">//小2</span><br>    <span class="hljs-comment">//小1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">使用Stack完成<br>    将元素压入栈中<br>    获取某元素距离栈顶的距离<br>    获取栈顶元素<br>    将栈顶元素弹出<br>    弹出所有的元素<br></code></pre></td></tr></table></figure><h4 id="9-Queue-队列-Deque-双端队列"><a href="#9-Queue-队列-Deque-双端队列" class="headerlink" title="9.Queue(队列)-Deque(双端队列)"></a>9.Queue(队列)-Deque(双端队列)</h4><blockquote><p>队列(Queue)是一种特殊的线性表，是一种先进先出（FIFO)的数据结构。它只允许在表<br>的前端(front)进行删除操作，而在表的后端(rear)进行插入操作。进行插入操作的<br>端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。<br>Linked List是Queue:接口的实现类<br>boolean add(Ee):将指定的元素插入此队列（如果立即可行且不会违反容量限制），在成<br>功时返回true,如果当前没有可用的空间，则抛出lllegalState Exception<br>E element():获取，但是不移除此队列的头。<br>boolean offer(Ee):将指定的元素插入此队列（如果立即可行且不会违反容量限制），当<br>使用有容量限制的队列时，此方法通常要优于dd(E),后者可能无法插入元素，而只是<br>抛出一个异常。<br>E peek()：获取但不移除此队列的头；如果此队列为空，则返回null。<br>Epol)：获取并移除此队列的头，如果此队列为空，则返回nul。<br>E remove():获取并移除此队列的头.</p></blockquote><blockquote><p>Deque:一个线性collection,支持在两端插入和移除元素。<br>此接口既支持有容量限制的双端队列，也支持没有固定大小限制的双端队列。<br>接口定义在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。</p></blockquote><p><a name="bOMN8"></a></p><h3 id="（三）Set"><a href="#（三）Set" class="headerlink" title="（三）Set"></a>（三）Set</h3><blockquote><p>如果要排序，选择TreeSet</p><p>如果不要排序，也不用保证顺序，选择HashSet</p><p>如果不要排序，要保证顺序，选择LinkedHashSet</p></blockquote><h4 id="1、HashSet"><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h4><blockquote><p>HashSet</p><ol><li><p>实现原理：基于哈希表（HashMap）实现</p></li><li><p>不允许重复，可以有一个NULL元素</p></li><li><p>不保证顺序恒久不变</p></li><li><p>添加元素时把元素作为HashMap的存储，HashMap的value使用一个固定的Object对象补充</p></li><li><p>排除重复元素是通过equals来检查对象是否相同</p></li><li><p>判断两个对象是否相同，先判断两个对象的hashCode是否相同（如果两个对象的hashCode相同，不一定是同一个对象，如果不同，那就一定不是同一个对象），如果不同，则两个对象不是同一个对象，如果相同，还要进行equals判断，equals相同则是同一个对象，不同则不是同一个对象。</p></li><li><p>自定义对象要认为属性值都相同时为同一对象，有这种需求是，那么我们要重写对象所在类的hashCode()和equals()方法</p></li></ol><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>​无序（不保证顺序恒久不变）且不可重复（可以有一个null元素）</p><h4 id="hashCode深入分析："><a href="#hashCode深入分析：" class="headerlink" title="hashCode深入分析："></a>hashCode深入分析：</h4><p>hashcode()方法，在object类中定义如下：<br>public native int hashCode();<br>hashCode是本地方法，它的实现是根据本地机器相关，当然我们可以在自己写的类中覆盖hashcode()方法，比如String、Integer、Double.。。。。等等这些类都是覆盖hashcode()方法的。<br><strong>在java的集合中，判断两个对象是否相等的规则是：</strong></p><blockquote><p>(1)判断两个对象的hashCode是否相等<br>如果不相等，认为两个对象也不相等，结束<br>如果相等，转入2<br>(2)判断两个对象用equalsi运算是否相等<br>如果不相等，认为两个对象也不相等<br>如果相等，认为两个对象相等<br>(equals()是判断两个对象是否相等的关键)</p></blockquote><blockquote><p>​若自定义一个Cat类（并未重写hashCode和equals方法），在HashSet中存入4个Cat对象，其中有两个对象内容相同，此时4个对象都会存入</p></blockquote><blockquote><p>那么该如何实现只存入内容不同的对象呢？</p></blockquote><blockquote><p>​需要在Cat类中重写hashCode和equals方法</p></blockquote><h5 id="小结：-2"><a href="#小结：-2" class="headerlink" title="小结："></a>小结：</h5><blockquote><ol><li>哈希表的存储结构：数组+链表，数组里的每个元素以链表的形式存储</li><li>如何把对象存储到哈希表中，先计算对象的hashCode值，再对数组的长度求余数，来决定对象要存储在数组中的哪个位置</li><li>解决hashSet中的重复值，使用的方式是：参考第6点</li></ol></blockquote><ul><li>无序：添加顺序与取出顺序不一致</li><li>注意：无序!&#x3D;随机</li></ul><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/bb23fd9f5b715e3969b2a05d81d4555e--f854--image-20221226182422096.png" alt="image-20221226182422096"></p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/d7df3c4e2bb39c6cbb75998e1482f2d2--5768--image-20221228204250589.png" alt="image-20221228204250589"></p><ul><li>若相同hash值相同则建立单项链表</li></ul><p>存储位置顺序：c.hashCode()%16</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *HashSet</span><br><span class="hljs-comment"> * 特点：无序+去重</span><br><span class="hljs-comment"> * 理解无序：存入顺序和取出顺序不一致，</span><br><span class="hljs-comment"> * 存入顺序： 1、获取元素的hash值</span><br><span class="hljs-comment"> *           2、利用hash值计算出数组的下标</span><br><span class="hljs-comment"> *            3、判断下标上是否有元素（</span><br><span class="hljs-comment"> *                 没有，则直接添加；</span><br><span class="hljs-comment"> *                 有，则判断两个元素是否相同（hash &amp;&amp; == || equals）</span><br><span class="hljs-comment"> *                         相同-则去重，不相同-添加到该下标的位置（JKD1.7头插法、JDK1.8尾插法））</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> */</span><br><br>HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>set.add(<span class="hljs-string">&quot;小1&quot;</span>);<br>set.add(<span class="hljs-string">&quot;小2&quot;</span>);<br>set.add(<span class="hljs-string">&quot;小3&quot;</span>);<br>set.add(<span class="hljs-string">&quot;小4&quot;</span>);<br>Iterator&lt;String&gt; iterator = set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    System.out.println(iterator.next());<br>&#125;<br><span class="hljs-comment">//小2</span><br><span class="hljs-comment">//小1</span><br><span class="hljs-comment">//小4</span><br><span class="hljs-comment">//小3</span><br></code></pre></td></tr></table></figure><p><a name="cZnNM"></a></p><h4 id="2、HashSet底层源码"><a href="#2、HashSet底层源码" class="headerlink" title="2、HashSet底层源码"></a>2、HashSet底层源码</h4><p>HashSet的底层为HashMap，存入的值存在HashMap的key中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>set.add(<span class="hljs-string">&quot;lh&quot;</span>);<br>set.add(<span class="hljs-string">&quot;zmk&quot;</span>);<br>set.add(<span class="hljs-string">&quot;ctg&quot;</span>);<br>set.add(<span class="hljs-string">&quot;yjb&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSet</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>&#123;<br>  <span class="hljs-comment">//虚拟值，用来填充HashMap的value的</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">PRESENT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>  <span class="hljs-comment">//无参构造器;从这可见HashSet的底层为HashMap</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  &#125;<br><br>  <span class="hljs-comment">//add方法，HashSet将要保存的值存在HashMap的key中，value中使用一个虚拟值进行填充。</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="fFnlK"></a></p><h4 id="3、TreeSet"><a href="#3、TreeSet" class="headerlink" title="3、TreeSet"></a>3、TreeSet</h4><blockquote><h5 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h5><p>​有序的，基于TreeMap（二叉树数据结构），对象需要比较大小，通过对象比较器（Comparator）来实现，对象比较器还可以用来去除重复元素，如果自定义的数据类没有实现比较器接口，将无法添加到TreeSet集合中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 特点：自然排序（TreeSet根据不同的元素类型选择不同的排序规则）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br>TreeSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;String&gt;();<br><br>set.add(<span class="hljs-string">&quot;1&quot;</span>);<br>set.add(<span class="hljs-string">&quot;2&quot;</span>);<br>set.add(<span class="hljs-string">&quot;4&quot;</span>);<br>set.add(<span class="hljs-string">&quot;5&quot;</span>);<br>set.add(<span class="hljs-string">&quot;3&quot;</span>);<br><br><br>System.out.println(set);<br><span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><strong>内置比较器</strong><br />自定义类排序若没有实现Comparable则使用TreeSet存储数据时，会报错转换异常（因为TreeSet是默认按照类的内置比较器的排序规则进行排序的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;Student&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;gkz&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xl&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lg&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;006&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;009&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;010&quot;</span>));<br><br>System.out.println(set);<br><span class="hljs-comment">//报错：Exception in thread &quot;main&quot; java.lang.ClassCastException: TreeSetTest.Student cannot be cast to java.lang.Comparable</span><br></code></pre></td></tr></table></figure><p>排序规则代码实际在类中，而不在TreeSet中。若写在TreeSet中，则这个类过于累赘。<br />Comparable-接口-内置比较器<br />int compareTo()<br />排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span><br>    comparaTo ()排序规则<br>Integer <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span><br>    comparaTo ()排序规则<br>Double <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span><br>    comparaTo ()排序规则<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">comparaTo</span> <span class="hljs-params">()</span><br>大 正数 <br>等 <span class="hljs-number">0</span>   <br>小 负数<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Comparable&lt;和当前类要比较的类型&gt; 例如这里的Student类型要和Student类型比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br><span class="hljs-comment">//...</span><br>    <br><span class="hljs-comment">//实现compareTo</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在TreeSet中 当前的this表示为要加入tree的对象、o指在tree中的对象</span><br><span class="hljs-comment"> *return: 正数表示加入tree右边，负数表示加入tree左边，0表示相对 不加入tree</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age-o.age;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;Student&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;gkz&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xl&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lg&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;006&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;009&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;010&quot;</span>));<br><br>System.out.println(set);<br><span class="hljs-comment">//[Student [name=lh, sex=男, age=15, classId=2203, id=001],</span><br><span class="hljs-comment">// Student [name=lg, sex=男, age=16, classId=2203, id=006],</span><br><span class="hljs-comment">// Student [name=li, sex=男, age=17, classId=2203, id=009],</span><br><span class="hljs-comment">// Student [name=gkz, sex=男, age=18, classId=2203, id=002]]</span><br></code></pre></td></tr></table></figure><p>原理：二叉树：小于Tree节点的放左子树，大于节点的放右边，和节点相同的不放如树中。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1670938625154-74e87415-0223-4433-abb8-d9355d7c8a40.png#averageHue=%23fbfbfb&clientId=ued1b59ae-315c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=511&id=ua4fdfb4a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=586&originWidth=1188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50657&status=done&style=none&taskId=u6f486c46-0e34-4f98-a427-ba6e8203365&title=&width=1036.7999640447456" alt="image.png"></p><p>外置比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 外置比较器 Comparator</span><br><span class="hljs-comment">       * 作用：在不改变内置比较器的规则上，在外部指定比较规则，</span><br><span class="hljs-comment">       * 优先级：外置比较器&gt;内置比较器  即使用外置比较器就不会使用内置比较器</span><br><span class="hljs-comment">       */</span>  <br><br>  <span class="hljs-comment">//TreeSet()构造器中指定外置比较器的实现类，这里使用实现匿名子类</span><br>TreeSet&lt;Student&gt; set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;()&#123;<br>          <span class="hljs-comment">//排序规则：判断两个学生是否相同，不同就按照名字长度排序，名字长度一致就按照年龄排序。</span><br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>              <span class="hljs-keyword">if</span>(o1.equals(o2))&#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>              &#125;<br>              <span class="hljs-type">int</span> <span class="hljs-variable">length1</span> <span class="hljs-operator">=</span> o1.getName().length();<br>              <span class="hljs-type">int</span> length2= o2.getName().length();<br>              <span class="hljs-keyword">if</span> (length1 != length2)&#123;<br>                  <span class="hljs-keyword">return</span> length1-length2;<br>              &#125;<br>              <span class="hljs-type">int</span> <span class="hljs-variable">age1</span> <span class="hljs-operator">=</span> o1.getAge();<br>              <span class="hljs-type">int</span> <span class="hljs-variable">age2</span> <span class="hljs-operator">=</span> o2.getAge();<br>              <span class="hljs-keyword">if</span>(age1 != age2)&#123;<br>                  <span class="hljs-keyword">return</span> age1-age2;<br>              &#125;<br>              <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>          &#125;<br>      &#125;);<br><br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>));<br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;gkz&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>));<br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xl&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>));<br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lgs&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;006&quot;</span>));<br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;li&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;009&quot;</span>));<br>      set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;2203&quot;</span>, <span class="hljs-string">&quot;010&quot;</span>));<br><br><br>      <span class="hljs-keyword">for</span> (Student student: set)&#123;<br>          System.out.println(student);<br>      &#125;<br>      <span class="hljs-comment">//Student [name=lh, sex=男, age=15, classId=2203, id=001]</span><br>      <span class="hljs-comment">//Student [name=zs, sex=男, age=15, classId=2203, id=010]</span><br>      <span class="hljs-comment">//Student [name=li, sex=男, age=17, classId=2203, id=009]</span><br>      <span class="hljs-comment">//Student [name=xl, sex=男, age=18, classId=2203, id=003]</span><br>      <span class="hljs-comment">//Student [name=lgs, sex=男, age=16, classId=2203, id=006]</span><br>      <span class="hljs-comment">//Student [name=gkz, sex=男, age=18, classId=2203, id=002]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回值恒为1时，添加顺序和存入顺序一致</span><br>        TreeSet&lt;Student&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br><br><br>        <span class="hljs-keyword">for</span> (Student student : map) &#123;<br>            System.out.println(student);<br>        &#125;<br>        <span class="hljs-comment">//Student [name=李博, sex=男, age=17, classId=2213, id=001]</span><br>        <span class="hljs-comment">//Student [name=马小龙, sex=男, age=24, classId=2213, id=002]</span><br>        <span class="hljs-comment">//Student [name=何周钰, sex=女, age=18, classId=2213, id=003]</span><br>        <span class="hljs-comment">//Student [name=何周钰, sex=女, age=18, classId=2213, id=003]</span><br><br><span class="hljs-comment">//返回值恒为0时，只添加一个</span><br>       TreeSet&lt;Student&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;);<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br>        map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br><br><br>        <span class="hljs-keyword">for</span> (Student student : map) &#123;<br>            System.out.println(student);<br>        &#125;<br>        <span class="hljs-comment">//Student [name=李博, sex=男, age=17, classId=2213, id=001]</span><br><br><br></code></pre></td></tr></table></figure><p>总结：<br />HashSet：无序+去重 、没有涉及下标的方法。<br />LinkedHashSet:继承HashSet，有序+去重；方法和HashSet一致；因为底层使用了双向链表，遍历链表的开头，所以有序。<br />TreeSet：自然排序</p><p><a name="aZU6k"></a></p><h4 id="4、TreeSet的底层源码"><a href="#4、TreeSet的底层源码" class="headerlink" title="4、TreeSet的底层源码"></a>4、TreeSet的底层源码</h4><p>TreeSet的底层由TreeMap实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;Student&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br>map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>));<br>map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>));<br>map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br>map.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br><br><br><span class="hljs-keyword">for</span> (Student student : map) &#123;<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSet</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>&#123;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> NavigableMap&lt;E,Object&gt; m;<br><br>    <span class="hljs-comment">//无参构造器，调用有参构造器并 传入TreeMap对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;E,Object&gt;());<br>    &#125;<br>    <span class="hljs-comment">//有参构造器，传入TreeMap对象</span><br>    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;<br>        <span class="hljs-built_in">this</span>.m = m;<br>    &#125;<br>    <span class="hljs-comment">//有参构造器，传入外置比较器，并将外置比较器，作为TreeMap的构造器参数，将TreeMap对象传入TreeSet的有参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(comparator));<br>    &#125;<br><br>    <span class="hljs-comment">//add方法，将e作为TreeMap的key，value使用一个虚拟值填充，比较器的选择见 TreeMap的put方法中。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> m.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="WB4W0"></a></p><h3 id="（四）Map"><a href="#（四）Map" class="headerlink" title="（四）Map"></a>（四）Map</h3><blockquote><ol><li>键值对存储一组对象</li><li>Key不能重复（唯一），Value可以重复</li><li>具体的实现类：HashMap  TreeMap  Hashtable  LinkedHashMap</li></ol></blockquote><h4 id="1、HashMap"><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h4><h5 id="HashMap的实现原理："><a href="#HashMap的实现原理：" class="headerlink" title="HashMap的实现原理："></a>HashMap的实现原理：</h5><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-number">1.</span> 基于哈希表（数组+链表（红黑树）） <span class="hljs-number">1.</span>8JDK<br>* <span class="hljs-number">2.</span> 默认加载因子 <span class="hljs-number">0.75</span>，默认数组大小是 <span class="hljs-number">16</span><br>* <span class="hljs-number">3.</span> 把对象存储到哈希表中，如何存储？<br>* 把Key对象通过hash()方法计算hash值，然后用这个hash值对数组长度取余数（默认<span class="hljs-number">16</span>），来决定该Key对象在数组中存储的位置，<br>* 当这个位置有多个对象时，以链表结构存储，JDK <span class="hljs-number">1.8</span>后，当链表长度大于<span class="hljs-number">8</span>时，链表将转换为红黑树结构存储。<br>* 这样的目的，是为了取值更快，存储的数据量越大，性能的表现越明显<br>* 扩容原理：当数组的容量超过<span class="hljs-number">75</span>%，那么表示该数组需要扩充，如何扩充？<br>* <span class="hljs-number">4.</span> 扩充的算法：当前数组容量&lt;&lt;<span class="hljs-number">1</span>（相当于是乘<span class="hljs-number">2</span>），扩大<span class="hljs-number">1</span>倍，<br>* 扩充次数过多，会影响性能，每次扩充表示哈希表重新散列（重新计算每个对象的存储位置），我们在开发中尽量要减少扩充次数带来的性能问题。<br>* <span class="hljs-number">5.</span> 线程不安全，适合在单线程中使用<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//特点：key唯一，无序</span><br>HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>      <span class="hljs-comment">//添加元素</span><br>      map.put(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">23</span>);<br>      map.put(<span class="hljs-string">&quot;椎名空&quot;</span>,<span class="hljs-number">21</span>);<br>      map.put(<span class="hljs-string">&quot;水菜丽&quot;</span>,<span class="hljs-number">26</span>);<br>      map.put(<span class="hljs-string">&quot;朝桐光&quot;</span>,<span class="hljs-number">25</span>);<br>      map.put(<span class="hljs-string">&quot;北岛玲&quot;</span>,<span class="hljs-number">28</span>);<br><br>      <span class="hljs-comment">//修改</span><br>      map.put(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">16</span>);<br><br>      <span class="hljs-comment">//根据key获取value</span><br>      System.out.println(map.get(<span class="hljs-string">&quot;麻生希&quot;</span>));<br>      <span class="hljs-comment">//根据key获取value,并设置默认值，没有则返回默认值</span><br>      System.out.println(map.getOrDefault(<span class="hljs-string">&quot;北岛玲1&quot;</span>,<span class="hljs-number">888</span>));<br><br>      <span class="hljs-comment">//将另一个map中的数据添加到当前map中</span><br>      HashMap&lt;String, Integer&gt; newMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      newMap.put(<span class="hljs-string">&quot;zk&quot;</span>,<span class="hljs-number">16</span>);<br>      newMap.put(<span class="hljs-string">&quot;ll&quot;</span>,<span class="hljs-number">17</span>);<br>      map.putAll(newMap);<br><br>      <span class="hljs-comment">//添加元素（如果key存在就返回value，如果key不存在就添加）</span><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> map.putIfAbsent(<span class="hljs-string">&quot;朝桐光&quot;</span>, <span class="hljs-number">15</span>);<br>      System.out.println(integer);<br><br><br>      <span class="hljs-comment">//根据key替换元素</span><br>      map.replace(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">//根据key+value替换元素</span><br>      map.replace(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>);<br><br>      <span class="hljs-comment">//根据key删除</span><br>      map.remove(<span class="hljs-string">&quot;麻生希&quot;</span>);<br>      <span class="hljs-comment">//根据key+value删除</span><br>      map.remove(<span class="hljs-string">&quot;朝桐光&quot;</span>,<span class="hljs-number">25</span>);<br><br>      <span class="hljs-comment">//获取长度</span><br>      System.out.println(map.size());<br><br>      <span class="hljs-comment">//获取集合中所有的value</span><br>      Collection&lt;Integer&gt; values = map.values();<br><br>      <span class="hljs-comment">//清空</span><br>      map.clear();<br><br>      <span class="hljs-comment">//遍历 --entrySet</span><br>      <span class="hljs-comment">//获取Mao中所有的映射关系对象（存放key和value），将映射关系对象存放再Set集合中，通过遍历set集合依次获取映射对象</span><br>      Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String,Integer&gt; entry: entries) &#123;<br>          System.out.println(entry.getKey()+<span class="hljs-string">&quot;--&quot;</span>+entry.getValue());<br>      &#125;<br><br>      <span class="hljs-comment">//遍历</span><br>      <span class="hljs-comment">//获取map中所有的key，存放在Set集合中，遍历集合依次取出key，再根据key依次取出对应的value</span><br>      Set&lt;String&gt; keySet = map.keySet();<br>      <span class="hljs-keyword">for</span> (String key :keySet ) &#123;<br>          <span class="hljs-type">Integer</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>          System.out.println(key+<span class="hljs-string">&quot;--&quot;</span>+value);<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br><br>map.put(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">23</span>);<br>map.put(<span class="hljs-string">&quot;椎名空&quot;</span>,<span class="hljs-number">21</span>);<br>map.put(<span class="hljs-string">&quot;水菜丽&quot;</span>,<span class="hljs-number">26</span>);<br>map.put(<span class="hljs-string">&quot;朝桐光&quot;</span>,<span class="hljs-number">25</span>);<br>map.put(<span class="hljs-string">&quot;北岛玲&quot;</span>,<span class="hljs-number">28</span>);<br><br><span class="hljs-comment">//将map的所有映射关系都存在set中</span><br>Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();<br><span class="hljs-comment">//再将set转换为ArrayList集合</span><br>ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(entries);<br><span class="hljs-comment">//因为ArrayList有sort方法可以进行排序</span><br>list.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(o1.getValue(),o2.getValue());<br>        <span class="hljs-comment">//比较value值。</span><br>        <span class="hljs-comment">// 升序Integer.compare(o1.getValue(),o2.getValue())</span><br>        <span class="hljs-comment">// 降序Integer.compare(o2.getValue(),o1.getValue()) 或 -Integer.compare(o1.getValue(),o2.getValue())</span><br>    &#125;<br>&#125;);<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : list) &#123;<br>    System.out.println(entry.getKey()+<span class="hljs-string">&quot;--&quot;</span>+entry.getValue());<br>&#125;<br><span class="hljs-comment">//椎名空--21</span><br><span class="hljs-comment">//麻生希--23</span><br><span class="hljs-comment">//朝桐光--25</span><br><span class="hljs-comment">//水菜丽--26</span><br><span class="hljs-comment">//北岛玲--28</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//添加</span><br><br>    <span class="hljs-comment">//修改</span><br><br>    <span class="hljs-comment">//获取value</span><br><br>    <span class="hljs-comment">//将另一个map添加到map中</span><br><br>    <span class="hljs-comment">//添加元素，不存在添加，存在返回value</span><br><br>    <span class="hljs-comment">//根据key替换 根据有key+value 进行替换</span><br><br>    <span class="hljs-comment">//根据key删除 根据key+value 删除</span><br><br>    <span class="hljs-comment">//获取长度</span><br><br>    <span class="hljs-comment">//获取集合中所有的value</span><br><br>    <span class="hljs-comment">//遍历 通过entrySet</span><br><br>    <span class="hljs-comment">//遍历 通过keySet</span><br><br>    <span class="hljs-comment">//清空</span><br><br><span class="hljs-comment">//对Map的Value进行排序</span><br> HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br><br> map.put(<span class="hljs-string">&quot;麻生希&quot;</span>,<span class="hljs-number">23</span>);<br> map.put(<span class="hljs-string">&quot;椎名空&quot;</span>,<span class="hljs-number">21</span>);<br> map.put(<span class="hljs-string">&quot;水菜丽&quot;</span>,<span class="hljs-number">26</span>);<br> map.put(<span class="hljs-string">&quot;朝桐光&quot;</span>,<span class="hljs-number">25</span>);<br> map.put(<span class="hljs-string">&quot;北岛玲&quot;</span>,<span class="hljs-number">28</span>);<br><br><br></code></pre></td></tr></table></figure><h5 id="HashMap底层源码"><a href="#HashMap底层源码" class="headerlink" title="HashMap底层源码"></a>HashMap底层源码</h5><h5 id="HashMap添加元素原理："><a href="#HashMap添加元素原理：" class="headerlink" title="HashMap添加元素原理："></a>HashMap添加元素原理：</h5><h5 id="存在一个结点类："><a href="#存在一个结点类：" class="headerlink" title="存在一个结点类："></a>存在一个结点类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单向链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt;&#123;<br>K key;<span class="hljs-comment">//键</span><br>    V value;<span class="hljs-comment">//值</span><br>    <span class="hljs-type">int</span> hash;<span class="hljs-comment">//key的hash值</span><br>    Entry&lt;K,V&gt; next;<span class="hljs-comment">//指向下一个结点的地址</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student类重写hashCode方法</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>&#125;<br><br><br>HashMap&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>),<span class="hljs-string">&quot;品茗&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>),<span class="hljs-string">&quot;焚香&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;赏月&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;赏月&quot;</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;打游戏&quot;</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;写代码&quot;</span>);<br><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : map.entrySet()) &#123;<br>    System.out.println(entry.getKey()+<span class="hljs-string">&quot;--&quot;</span>+entry.getValue());<br>&#125;<br><span class="hljs-comment">//null--写代码</span><br><span class="hljs-comment">//Student [name=李博, sex=男, age=17, classId=2213, id=001]--品茗</span><br><span class="hljs-comment">//Student [name=马小龙, sex=男, age=24, classId=2213, id=002]--焚香</span><br><span class="hljs-comment">//Student [name=何周钰, sex=女, age=18, classId=2213, id=003]--赏月</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671022206761-1de2cd6f-3492-420e-820a-51870fdcfc32.png#averageHue=%23fafafa&clientId=u0a1c7bc6-3757-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=588&id=u348d535d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=674&originWidth=1484&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87419&status=done&style=none&taskId=u7736c4be-76b4-4b3f-9ea0-b821ec7248d&title=&width=1295.12722781347" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671019998021-b8c54155-3d5a-4906-a8ca-832a26b88f6c.png#averageHue=%23f5f4f4&clientId=u0a1c7bc6-3757-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=441&id=u0c760bf3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=505&originWidth=1228&originalType=binary&ratio=1&rotation=0&showTitle=false&size=257578&status=done&style=none&taskId=ud8b895f1-975e-4cb5-988b-fc7b2de3fb1&title=&width=1071.7090537432218" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671020183134-57ec4507-2a44-4ad2-a239-994f8bee7c6d.png#averageHue=%23f9f8f8&clientId=u0a1c7bc6-3757-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=307&id=ue637f4c7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=352&originWidth=1236&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69631&status=done&style=none&taskId=u07776f2a-98a4-48ff-86eb-d4605b0414a&title=&width=1078.690871682917" alt="image.png"><br><a name="zha7j"></a></p><h4 id="2、LinedHashMap"><a href="#2、LinedHashMap" class="headerlink" title="2、LinedHashMap"></a>2、LinedHashMap</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;LinkedHashMap是HashMap的子类，由于HashMap不能保证顺序的恒久不变，此类使用一个双重链表来维护元素添加的顺序。<br></code></pre></td></tr></table></figure></blockquote><p>继承于HashMap<br />特点：key唯一+有序（存入顺序和存放顺序）（在HashMap的基础上添加了双向链表）<br />常用方法和HashMap一致</p><p><a name="hDNfw"></a></p><h4 id="3、Hashtable"><a href="#3、Hashtable" class="headerlink" title="3、Hashtable"></a>3、Hashtable</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;JDK <span class="hljs-number">1.0</span> 开始<br>&gt;* 基于哈希表实现（数组+链表）<br>&gt;* 默认数组大小为 <span class="hljs-number">11</span>，加载因子为 <span class="hljs-number">0.75</span><br>&gt;* 扩充方式：原数组大小&lt;&lt;<span class="hljs-number">1</span>（乘以<span class="hljs-number">2</span>）+<span class="hljs-number">1</span><br>&gt;* 线程安全的，用在多线程访问时<br></code></pre></td></tr></table></figure></blockquote><p>特点：key唯一+无序+线程安全（方法加锁）<br />常用方法和HashMap一致<br><a name="DxZqU"></a></p><h4 id="4、ConcurrentHashMap"><a href="#4、ConcurrentHashMap" class="headerlink" title="4、ConcurrentHashMap"></a>4、ConcurrentHashMap</h4><p>特点：key唯一+无序+线程安全（局部加锁（在方法里加锁））<br />常用方法和HashMap一致<br><a name="ncKxW"></a></p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap:存储键值对，key唯一，无序，线程不安全<br>LinkedHashMap:存储键值对，key唯一，有序，线程不安全<br>Hashtable:存储键值对，key唯一，无序，线程安全（方法上加锁,效率低，已弃用）<br>ConcurrentHashMap:存储键值对，key唯一，无序，线程安全（局部加锁+CAS--高并发，效率高)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap:ok<br>LinkedHashMap:ok<br>Hashtable:no<br>ConcurrentHashMap:no<br></code></pre></td></tr></table></figure><p><a name="GOhjq"></a></p><h4 id="5、TreeMap"><a href="#5、TreeMap" class="headerlink" title="5、TreeMap"></a>5、TreeMap</h4><p><a name="Qnnku"></a></p><h4 id="（1）TreeMap"><a href="#（1）TreeMap" class="headerlink" title="（1）TreeMap"></a>（1）TreeMap</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;基于二叉树的红黑树（一种平衡二叉树）实现<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 知识点：理解TreeMap的自然排序</span><br><span class="hljs-comment">    * 注意：TreeMap只针对Key做排序</span><br><span class="hljs-comment">    * 扩展：TreeSet底层由TreeMap实现，TreeSet存储数据是存储在TreeMapkey的位置</span><br><span class="hljs-comment">    * 理解：</span><br><span class="hljs-comment">    * TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;();</span><br><span class="hljs-comment">    * set.add(&quot;abc&quot;);</span><br><span class="hljs-comment">    * public class TreeSet&lt;E&gt;&#123;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * private TreeMap&lt;E,Object&gt; map = new TreeMap&lt;&gt;();</span><br><span class="hljs-comment">    * private static final Object obj = new Object();</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * public boolean add(E e)&#123;</span><br><span class="hljs-comment">    * map.put(e,obj);</span><br><span class="hljs-comment">    * return true;</span><br><span class="hljs-comment">    * &#125;</span><br><span class="hljs-comment">    * &#125;</span><br><span class="hljs-comment">    */</span><br><br>   TreeMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br><br>   map.put(<span class="hljs-string">&quot;hyq&quot;</span>,<span class="hljs-number">25</span>);<br>   map.put(<span class="hljs-string">&quot;cwj&quot;</span>,<span class="hljs-number">28</span>);<br>   map.put(<span class="hljs-string">&quot;fhc&quot;</span>,<span class="hljs-number">19</span>);<br>   map.put(<span class="hljs-string">&quot;hzy&quot;</span>,<span class="hljs-number">16</span>);<br><br>   System.out.println(map);<br>   <span class="hljs-comment">//&#123;cwj=28, fhc=19, hyq=25, hzy=16&#125;</span><br>   <span class="hljs-comment">//注意：TreeMap只针对Key做排序</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">      TreeMap&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br><br>      map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;麻生希&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>),<span class="hljs-string">&quot;美食&quot;</span>);<br>      map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;椎名空&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>),<span class="hljs-string">&quot;写代码&quot;</span>);<br>      map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;水菜丽&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;拍电影&quot;</span>);<br>      map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;朝桐光&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>),<span class="hljs-string">&quot;焚香&quot;</span>);<br>      map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;樱井步&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;005&quot;</span>),<span class="hljs-string">&quot;听雨&quot;</span>);<br><br>      Set&lt;Map.Entry&lt;Student, String&gt;&gt; entries = map.entrySet();<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : entries) &#123;<br>          System.out.println(entry.getKey()+<span class="hljs-string">&quot;--&quot;</span>+entry.getValue());<br>      &#125;<br>      <span class="hljs-comment">//排序 去重</span><br>      <span class="hljs-comment">//Student [name=朝桐光, sex=女, age=19, classId=2213, id=004]--焚香</span><br>      <span class="hljs-comment">//Student [name=麻生希, sex=女, age=21, classId=2213, id=001]--拍电影</span><br>      <span class="hljs-comment">//Student [name=椎名空, sex=女, age=23, classId=2213, id=002]--写代码</span><br>      <span class="hljs-comment">//Student [name=樱井步, sex=女, age=25, classId=2213, id=005]--听雨</span><br><br>Student  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;<br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age-o.age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeMap&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">if</span>(o1 == o2)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">length1</span> <span class="hljs-operator">=</span> o1.getName().length();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">length2</span> <span class="hljs-operator">=</span> o2.getName().length();<br>                <span class="hljs-keyword">if</span>(length1 != length2)&#123;<br>                        <span class="hljs-keyword">return</span> length1-length2;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">age1</span> <span class="hljs-operator">=</span> o1.getAge();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">age2</span> <span class="hljs-operator">=</span> o2.getAge();<br><br>                <span class="hljs-keyword">if</span>(age1 != age2)&#123;<br>                        <span class="hljs-keyword">return</span> age1-age2;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>&#125;);<br><br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;麻生希&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>),<span class="hljs-string">&quot;美食&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;椎名空&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>),<span class="hljs-string">&quot;写代码&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;水菜丽&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;拍电影&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;朝桐光&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>),<span class="hljs-string">&quot;焚香&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;樱井步&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;005&quot;</span>),<span class="hljs-string">&quot;听雨&quot;</span>);<br><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; e : map.entrySet()) &#123;<br>        System.out.println(e.getKey()+<span class="hljs-string">&quot;--&quot;</span>+e.getValue());<br>&#125;<br><span class="hljs-comment">//Student [name=朝桐光, sex=女, age=19, classId=2213, id=004]--焚香</span><br><span class="hljs-comment">//Student [name=麻生希, sex=女, age=21, classId=2213, id=001]--美食</span><br><span class="hljs-comment">//Student [name=水菜丽, sex=女, age=21, classId=2213, id=003]--拍电影</span><br><span class="hljs-comment">//Student [name=椎名空, sex=女, age=23, classId=2213, id=002]--写代码</span><br><span class="hljs-comment">//Student [name=樱井步, sex=女, age=25, classId=2213, id=005]--听雨</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TreeMap的特点</span><br><span class="hljs-comment">//使用内置比较器，按照年龄进行排序</span><br>   <span class="hljs-comment">//使用外置比较器，先按照名字长度进行比较，在按照年龄进行比较</span><br>    TreeMap&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;()<br><br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;麻生希11&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>),<span class="hljs-string">&quot;美食&quot;</span>);<br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;椎名空&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>),<span class="hljs-string">&quot;写代码&quot;</span>);<br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;水菜丽1&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;拍电影&quot;</span>);<br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;朝桐光1&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>),<span class="hljs-string">&quot;焚香&quot;</span>);<br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;樱井步&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;005&quot;</span>),<span class="hljs-string">&quot;听雨&quot;</span>);<br></code></pre></td></tr></table></figure><p><a name="OGzAM"></a></p><h4 id="（2）TreeMap底层源码"><a href="#（2）TreeMap底层源码" class="headerlink" title="（2）TreeMap底层源码"></a>（2）TreeMap底层源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeMap&lt;Student, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李博&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>),<span class="hljs-string">&quot;品茗&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;马小龙&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>),<span class="hljs-string">&quot;焚香&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;赏月&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;何周钰&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;2213&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>),<span class="hljs-string">&quot;赏月&quot;</span>);<br><br><br><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : map.entrySet()) &#123;<br>    System.out.println(entry.getKey()+<span class="hljs-string">&quot;--&quot;</span>+entry.getValue());<br>&#125;<br><span class="hljs-comment">//Student [name=李博, sex=男, age=17, classId=2213, id=001]--品茗</span><br><span class="hljs-comment">//Student [name=何周钰, sex=女, age=18, classId=2213, id=003]--赏月</span><br><span class="hljs-comment">//Student [name=马小龙, sex=男, age=24, classId=2213, id=002]--焚香</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NavigableMap</span>&lt;K,V&gt;, Cloneable, java.io.Serializable<br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator;<span class="hljs-comment">//外置比较器</span><br><br><span class="hljs-comment">//无参构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">()</span> &#123;<br>comparator = <span class="hljs-literal">null</span>;<br>&#125; <br><span class="hljs-comment">//有参构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator)</span> &#123;<br><span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br><br><span class="hljs-comment">//这里为put的伪代码，底层更复杂</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key,v value)</span>&#123;<br><span class="hljs-comment">//判断是否有外置比较器</span><br><span class="hljs-keyword">if</span> (comparator!=<span class="hljs-literal">null</span>)&#123;<br><span class="hljs-comment">//有就使用外置比较器的排序规则,new TreeMap&lt;&gt;(new Comparator()&#123;...&#125;)</span><br>comparator.compare();<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//没有,就使用内置比较器的排序规则// new TreeMap&lt;&gt;();</span><br>key.compareTo();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>       Entry&lt;K,V&gt; t = root;<span class="hljs-comment">//</span><br>       <span class="hljs-comment">//第一次进入判断</span><br>       <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>           compare(key, key); <span class="hljs-comment">//1、检查对象是否为null，2、检查是否有内置/外置比较器</span><br>           root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, <span class="hljs-literal">null</span>);<br>           size = <span class="hljs-number">1</span>;<br>           modCount++;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-type">int</span> cmp;<span class="hljs-comment">//比较结果</span><br>       Entry&lt;K,V&gt; parent;<span class="hljs-comment">//父节点</span><br>       <span class="hljs-comment">// split comparator and comparable paths</span><br>       <br>       Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cpr = comparator;<br>       <span class="hljs-keyword">if</span> (cpr != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//外置比较器</span><br>           <span class="hljs-keyword">do</span> &#123;<br>               parent = t;<br>               cmp = cpr.compare(key, t.key);<br>               <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                   t = t.left;<br>               <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                   t = t.right;<br>               <span class="hljs-keyword">else</span><br>                   <span class="hljs-keyword">return</span> t.setValue(value);<br>           &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>       &#125;<br>       <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//内置比较器</span><br>           <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>           <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               Comparable&lt;? <span class="hljs-built_in">super</span> K&gt; k = (Comparable&lt;? <span class="hljs-built_in">super</span> K&gt;) key;<br>           <span class="hljs-keyword">do</span> &#123;<br>               parent = t;<br>               cmp = k.compareTo(t.key);<br>               <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                   t = t.left;<br>               <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                   t = t.right;<br>               <span class="hljs-keyword">else</span><br>                   <span class="hljs-keyword">return</span> t.setValue(value);<br>           &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>       &#125;<br>       Entry&lt;K,V&gt; e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, parent);<span class="hljs-comment">//</span><br>       <span class="hljs-comment">//记录左右子结点</span><br>       <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>           parent.left = e;<br>       <span class="hljs-keyword">else</span><br>           parent.right = e;<br><br>       <span class="hljs-comment">//红黑树的制衡</span><br>       fixAfterInsertion(e);<br>       size++;<br>       modCount++;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object k1, Object k2)</span> &#123;<br>       <span class="hljs-keyword">return</span> comparator==<span class="hljs-literal">null</span> ? ((Comparable&lt;? <span class="hljs-built_in">super</span> K&gt;)k1).compareTo((K)k2) : comparator.compare((K)k1, (K)k2);<br>       <span class="hljs-comment">//</span><br>       <span class="hljs-comment">//(Comparable&lt;? super K&gt;)k1 检查k1对象的类是否实现了Comparable</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>内置比较器：比较结果大于&gt;0的找右边的树、比较结果小于0的找左边的树，<strong>比较结果等于0的，将原来的value替换为新的value</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射关系类/节点类</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt;<span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt;&#123;<br>  K key;--键<br>  V Va1ue;--值<br>  Entry&lt;K,V&gt; left;--左边节点地址<br>  Entry&lt;K,V&gt; right;---右边节点地址<br>  Entry&lt;K,V&gt; parent;---父节点地址<br>  <span class="hljs-type">boolean</span> color=BLACK;---红黑树<br>  Entry(K key,V value,Entry&lt;K,V&gt; parent)&#123;<br>  <span class="hljs-built_in">this</span>.key=key;<br>  <span class="hljs-built_in">this</span>.value=value;<br>  <span class="hljs-built_in">this</span>.parent=parent;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="pQgXl"></a></p><h4 id="6、Conllections"><a href="#6、Conllections" class="headerlink" title="6、Conllections"></a>6、Conllections</h4><blockquote><p>Collections类<br>Collections工具类提供了大量针对Collection&#x2F;Map的操作，总体可分为四类，都为静态(static)方法：<br>1.排序操作（主要针对List接口相关）<br>reverse(List list):反转指定ist集合中元素的顺序<br>shuffle(List list):对List中的元素进行随机排序（洗牌）<br>sort(List list):对List里的元素根据自然升序排序<br>sort(List list,Comparator c):自定义比较器进行排序<br>swap(List list,inti,int j):将指定List集合中处元素和j出元素进行交换<br>rotate(List list,int distance):将所有元素向右移位指定长度，如果distance等于size那么结果不变</p></blockquote><blockquote><p>2.查找和替换（主要针对Collection接口相关）<br>binarySearch(List list,,Object key):使用二分搜索法，以获得指定对象在ist中的索引，前提是集合已经排序<br>max(Collection coll):返回最大元素<br>max(Collection coll,Comparator comp:根据自定义比较器，返回最大元素<br>min(Collection coll):返回最小元素<br>min(Collectioncoll,,Comparator comp):根据自定义比较器，返回最小元素<br>fil(List list,Object obj):使用指定对象填充<br>frequency(Collection Objecto):返回指定集合中指定对象出现的次数<br>replaceAll(Listlist,Object old,Object new):替换</p></blockquote><blockquote><p>3.同步控利<br>Collections工具类中提供了多个synchronizedxxx方法，该方法返回指定集合对象对应的同步对象，从而解决多线程<br>并发访问集合时线程的安全问题。HashSet、Arraylist、HashMap都是线程不安全的，如果需要考虑同步，则<br>使用这些方法。这些方法主要有：synchronizedSet、synchronizedSortedSet、synchronizedList、<br>synchronizedMap、synchronizedSortedMap。<br><strong>特别需要指出的是，在使用迭代方法遍历集合时需要手工同步返回的集合。</strong></p></blockquote><blockquote><p>4.设置不可变集合<br>Collections有三类方法可返回一个不可变集合：<br>emptyXxx():返回一个空的不可变的集合对象<br>singletonXxx():返回一个只包含指定对象的，不可变的集合对象。<br>unmodifiableXxx():返回指定集合对象的不可变视图<br>5.其它<br>disjoint(Collection<?>c1,Collection<?>c2)-如果两个指定collection中没有相同的元素，则返回true。<br>addAll(Collection&lt;?super T&gt;c,Ta)-一种方便的方式，将所有指定元素添加到指定collection中。<br>Comparators<T>reverseOrder(Comparators<T>cmp)-返回一个比较器，它强行反转指定比较器的顺序。如果指定比较器为null,则此方法等同于reverseOrder()（换句话说，它返回一个比较器，该比较器将强行反转实现Comparable接口那些对象collection.上的自然顺序)。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//批量添加</span><br>Collections.addAll(list,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">674</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//排序 -- 按照元素类型自己的排序规则</span><br>Collections.sort(list);<br>System.out.println(list);<span class="hljs-comment">//[1, 1, 2, 3, 3, 5, 674]</span><br><br><span class="hljs-comment">//排序 -- 按照自定义排序规则</span><br>Collections.sort(list,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> -Integer.compare(o1,o2);<span class="hljs-comment">//升序：Integer.compare(o1,o2) 降序：-Integer.compare(o1,o2)</span><br>    &#125;<br>&#125;);<br>System.out.println(list);<span class="hljs-comment">//[674, 5, 3, 3, 2, 1, 1]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给集合一次添加多个元素</span><br><br><span class="hljs-comment">//排序-按照内置比较器排序</span><br><br><span class="hljs-comment">//排序-按照外置比较器进行排序</span><br><br></code></pre></td></tr></table></figure><h3 id="Iterator设计模式"><a href="#Iterator设计模式" class="headerlink" title="Iterator设计模式"></a>Iterator设计模式</h3><blockquote><p>提供一个方法按顺序遍历一个集合内的元素，而又不需要暴露该对象的内部表示。</p><p>应用场景<br>1、访问一个聚合的对象，而不需要暴露对象的内部表示<br>2、支持对聚合对象的多种遍历<br>3、对遍历不同的对象，<strong>提供统一的接口</strong>。</p><p>迭代器模式的角色构成<br>(1)迭代器角色(Iterator):定义遍历元素所需要的方法，一般来说会有这么三个方法：取得下一个元素的方法next(),判断是否遍历结束的方法hasNext(),移出当前对象的方法remove(),<br>(2)具体迭代器角色(Concrete Iterator)：实现迭代器接口中定义的方法，完成集合的迭代。<br>(3)容器角色(Aggregate):一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等<br>(4)具体容器角色(ConcreteAggregate）：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList,List接口的链表实现LinkedList,Set接口的哈希列表的实现HashSet等。</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        A&lt;String&gt; a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>&lt;&gt;();<br>        a.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>&#123;<br>        System.out.println(t);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">E - element - 元素<br>T - type - 类型<br>K - key - 键<br>V - value - 值    <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;?&gt;表示泛型可以是任何类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;?&gt; method()&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *&lt; ? extends A&gt;表示泛型必须是A的子类或者是A类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt; ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&gt; method1()&#123;<br>        ArrayList&lt;B&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *&lt; ? super A&gt;表示泛型必须是A的父类或者是A类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt; ? <span class="hljs-built_in">super</span> A&gt; method1()&#123;<br>        ArrayList&lt;B&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="GiUQU"></a></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><a name="UIc0N"></a></p><h3 id="（一）异常的分类"><a href="#（一）异常的分类" class="headerlink" title="（一）异常的分类"></a>（一）异常的分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Throwable<br>    Error -错误 例如：StackOverflowError-栈内存溢出的错误、OutOfMemoryError -内存溢出的错误<br>    Exception -异常<br>        RuntimeException/运行时异常（非受检性异常） 编译器不会要求你强制处理的异常（不会提示你），由于变成原因操作的异常<br>            例如：ArithmeticException-算数异常、ClassCastException-类型转换异常<br><br>        一般性异常（受检性异常）：编译器会要求你强制处理的异常（提示你必须处理），由外界因素造成的异常。<br>        例如：ClassNotFoundException-类未找到异常<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">错误<span class="hljs-comment">(Error)</span>：JVM系统内部错误或资源耗尽等严重情况-属于JVM需要负担的责任这一类异常事件无法恢复或不可能捕获，将导致应用程序中断。<br>异常<span class="hljs-comment">(Exception)</span>:其它因编程错误或偶然的外在因素导致的一般性问题。这类异常得到恰当的处理时，程序有机会恢复至正常运行状况。<br></code></pre></td></tr></table></figure><p><a name="FEykH"></a></p><h3 id="（二）异常处理机制"><a href="#（二）异常处理机制" class="headerlink" title="（二）异常处理机制"></a>（二）异常处理机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、Java程序在执行过程中如果出现异常，会自动生成一个异常类对象，该异常对象将动提交给VM,这个过程称为抛出(<span class="hljs-keyword">throw</span>)异常。<br><span class="hljs-number">2</span>、当JVM接收到异常对象时，会寻找能处理这一异常的代码并把当前异常对象交给其处理，这一过程称为捕获<span class="hljs-keyword">catch</span>)异常和处理异常。<br><span class="hljs-number">3</span>、如果JVM找不到可以捕获异常的代码，则运行时系统将终止，相应的Java程序也将退出。<br></code></pre></td></tr></table></figure><p><a name="eJc11"></a></p><h4 id="1、try…catch"><a href="#1、try…catch" class="headerlink" title="1、try…catch"></a>1、try…catch</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671084394948-2190940f-5f4a-4c12-817c-dc258cea3fb1.png#averageHue=%23fefefe&clientId=u2cda2993-b050-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=407&id=u1d57ea41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=466&originWidth=1267&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205301&status=done&style=none&taskId=u40658a62-4bec-436f-b4ea-8e21da755b8&title=&width=1105.7454161992362" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个类的全路径：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> scanner.next();<br><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//try中代码尽量少一点，提高效率，</span><br>    System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>    Class&lt;?&gt; aClass = Class.forName(path);<span class="hljs-comment">//该方法会抛出一个异常 forName(String className) throws ClassNotFoundException</span><br>    System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br><br>&#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<span class="hljs-comment">//捕获异常</span><br>    <span class="hljs-comment">//注意：实际项目中要按照具体的业务去处理异常</span><br>    System.out.println(<span class="hljs-string">&quot;已捕获ClassNotFoundException&quot;</span>);<br>&#125;<span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//finally可写可不写</span><br>    System.out.println(<span class="hljs-string">&quot;不管是否发生异常，都会调用的代码块&quot;</span>);<br>    scanner.close();<span class="hljs-comment">//像关闭资源的操作不能放在try中，因为如果try中某行代码发生异常，后面的代码都不会被执行</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;end&quot;</span>);<br><br><span class="hljs-comment">//无异常</span><br><span class="hljs-comment">//请输入一个类的全路径：</span><br><span class="hljs-comment">//java.lang.String</span><br><span class="hljs-comment">//---</span><br><span class="hljs-comment">//---</span><br><span class="hljs-comment">//不管是否发生异常，都会调用的代码块</span><br><span class="hljs-comment">//end</span><br><br><span class="hljs-comment">//出现异常</span><br><span class="hljs-comment">//请输入一个类的全路径：</span><br><span class="hljs-comment">//java.lang.S</span><br><span class="hljs-comment">//---</span><br><span class="hljs-comment">//已捕获ClassNotFoundException</span><br><span class="hljs-comment">//不管是否发生异常，都会调用的代码块</span><br><span class="hljs-comment">//end</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意：先捕获异常的范围 不能大于 后捕获异常的范围。</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>       System.out.println(<span class="hljs-string">&quot;请输入一个类的全路径：&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> scanner.next();<br><br>       System.out.println(<span class="hljs-string">&quot;请输入两个int值&quot;</span>);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>       <span class="hljs-keyword">try</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>           Class&lt;?&gt; aClass = Class.forName(path);<br><br>           System.out.println(a/b);<span class="hljs-comment">//当b=0时会抛出异常</span><br>           System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br><br>       &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<span class="hljs-comment">//捕获异常</span><br>           <span class="hljs-comment">//注意：实际项目中要按照具体的业务去处理异常</span><br>           System.out.println(<span class="hljs-string">&quot;已捕获ClassNotFoundException&quot;</span>);<br>       &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>           System.out.println(<span class="hljs-string">&quot;已捕获ArithmeticException&quot;</span>);<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//finally可写可不写</span><br>           System.out.println(<span class="hljs-string">&quot;不管是否发生异常，都会调用的代码块&quot;</span>);<br>           scanner.close();<br>       &#125;<br>       System.out.println(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个类的全路径：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> scanner.next();<br><br>System.out.println(<span class="hljs-string">&quot;请输入两个int值&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br><span class="hljs-keyword">try</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>    Class&lt;?&gt; aClass = Class.forName(path);<br><br>    System.out.println(a/b);<span class="hljs-comment">//当b=0时会抛出异常</span><br>    System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br><br>&#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException |ArithmeticException e)&#123;<span class="hljs-comment">//捕获异常</span><br>    <span class="hljs-comment">//注意：实际项目中要按照具体的业务去处理异常</span><br>    System.out.println(<span class="hljs-string">&quot;已捕获异常&quot;</span>);<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不管是否发生异常，都会调用的代码块&quot;</span>);<br>    scanner.close();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure><p><a name="nBn79"></a></p><h4 id="2、throws"><a href="#2、throws" class="headerlink" title="2、throws"></a>2、throws</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * throws 含义：表示方法抛出异常</span><br><span class="hljs-comment"> * 语法结构public void method() throws 异常类型&#123;&#125;</span><br><span class="hljs-comment"> * 理解：该方法抛出异常，需要在调用方去处理异常</span><br><span class="hljs-comment"> * 最后抛到main方法，而main方法由JVM调用，但JVM并不会进行处理。所以建议在main方法或之前就进行处理。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">Test02</span> <span class="hljs-variable">test02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test02</span>();<br>    <span class="hljs-keyword">try</span>&#123;<br>        test02.method01();<br>    &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>        System.out.println(<span class="hljs-string">&quot;捕获ClassNotFoundException&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">method01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> scanner.next();<br><br>    <span class="hljs-comment">//public static Class&lt;?&gt; forName(String className) throws ClassNotFoundException</span><br>    Class&lt;?&gt; aClass = Class.forName(path);<br>    System.out.println(aClass);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="bDvjq"></a></p><h4 id="3、throw"><a href="#3、throw" class="headerlink" title="3、throw"></a>3、throw</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * throw</span><br><span class="hljs-comment"> * 含义：表示手动抛出异常</span><br><span class="hljs-comment"> * 语法结构：throw new 异常类();</span><br><span class="hljs-comment"> * 理解：throw是和自定义异常一起使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>();<br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span> (MyException e)&#123;<br>    System.out.println(e.toString());<br>    b=<span class="hljs-number">1</span>;<br>&#125;<br>System.out.println(a/b);<br><span class="hljs-comment">//10</span><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//除数不能为0</span><br><span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;除数不能为0&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="HCqyt"></a></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">设置线程的优先级、线程的优先级的作用、给线程命名、线程的休眠（需求：编写一个抽取学员回答问题的程序，要求倒数三秒后输出被抽中的学员）<br>线程的礼让（怎么理解礼让、需求：创建两个线程B、C 分别各打印 <span class="hljs-number">1</span> ~ <span class="hljs-number">100</span> 的数字，其中B线程，每打印一次，就礼让一次）(<span class="hljs-keyword">yield</span>)<br>线程的合并（怎么理解合并、需求：主线程和子线程各打印<span class="hljs-number">200</span>次，当制鞋厂打印到<span class="hljs-number">10</span>之后，让子线程合并到主线程。）(join)<br>守护线程（什么是守护线程，怎么设置守护线程）<br>线程的中断<br></code></pre></td></tr></table></figure><p>进程之间（微信、qq），独享内存和系统资源。<br />同一个进程里的多个线程（ui展示、实时聊天）：共享内存和系统资源的，一个进程中只能有一个主线程。<br />只有main方法的程序，不是一个单线程，因为后台还存在垃圾回收器</p><p>run方法可以直接调用，但是直接调用run方法并不产生新线程</p><p>Thread.sleep()方法会抛出已检查异常java.lang.InterruptedException ，必须要处理。</p><h3 id="（一）线程类"><a href="#（一）线程类" class="headerlink" title="（一）线程类"></a>（一）线程类</h3><h4 id="1、创建线程类"><a href="#1、创建线程类" class="headerlink" title="1、创建线程类"></a>1、创建线程类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程类</span><br><span class="hljs-comment"> * 1、创建类，继承Thread</span><br><span class="hljs-comment"> * 2、重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程类的run方法被调用了...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注意：运行该类,JVM会创建一个主线程，在主线程中调用main()，所以说main方法是在主线程中被调用的。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建线程</span><br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    <span class="hljs-comment">//启动线程（该线程会去抢CPU资源，抢到了才会调用run方法）</span><br>    myThread.start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、创建任务类（推荐）"><a href="#2、创建任务类（推荐）" class="headerlink" title="2、创建任务类（推荐）"></a>2、创建任务类（推荐）</h4><h5 id="无返回值的任务类"><a href="#无返回值的任务类" class="headerlink" title="无返回值的任务类"></a>无返回值的任务类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务类</span><br><span class="hljs-comment"> * 1、创建类,实现Runnable接口</span><br><span class="hljs-comment"> * 2、重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用任务类的run方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-comment">//创建任务类对象</span><br>    <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>    <span class="hljs-comment">//创建线程对象</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br><br>    <span class="hljs-comment">//启动线程</span><br>    thread.start();<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="有返回值的任务类"><a href="#有返回值的任务类" class="headerlink" title="有返回值的任务类"></a>有返回值的任务类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;over&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        <span class="hljs-type">MyCallback</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallback</span>();<br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br>        t3.start();<br>        System.out.println(ft.get());<span class="hljs-comment">//可以获取返回值</span><br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="Runnable和Callable的区别"><a href="#Runnable和Callable的区别" class="headerlink" title="Runnable和Callable的区别"></a>Runnable和Callable的区别</h5><blockquote><ol><li><p>Callable规定（重写）的方法是call()，Runnable规定（重写）的方法是run()。</p></li><li><p>Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。</p></li><li><p>call方法可以抛出异常，run方法不可以。</p></li><li><p>运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p></li></ol></blockquote><h5 id="线程类和任务类的区别"><a href="#线程类和任务类的区别" class="headerlink" title="线程类和任务类的区别"></a>线程类和任务类的区别</h5><blockquote><p>线程类创建的多个线程对象，操作多个线程类对象；而任务类创建多个线程对象，操作一个任务类对象</p></blockquote><h4 id="3、感受多线程之间争抢资源的场景"><a href="#3、感受多线程之间争抢资源的场景" class="headerlink" title="3、感受多线程之间争抢资源的场景"></a>3、感受多线程之间争抢资源的场景</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 需求：编写一个多线程的应用程序，主线程打印1-100之间的数字</span><br><span class="hljs-comment"> * 子线程打印200-300之间的数字，观察其输出的结果</span><br><span class="hljs-comment"> * 体会多线程互相争抢资源的场景</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    myThread.start();<span class="hljs-comment">//非现场阻塞的方法（启动了子线程后，子线程会和主线程相互争抢资源，谁抢到了，代码就向下执行）</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span>+i);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>; i &lt;=<span class="hljs-number">300</span> ; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程：&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">* 需求：编写一个多线程的应用程序，主线程打印 <span class="hljs-number">1</span>-<span class="hljs-number">100</span> 之间的数字<br>* 子线程打印 <span class="hljs-number">200</span>-<span class="hljs-number">300</span> 之间的数字，观察其输出的结果<br>* 体会多线程互相争抢资源的场景<br></code></pre></td></tr></table></figure><p><a name="tUbh3"></a></p><h4 id="4、线程的优先级"><a href="#4、线程的优先级" class="headerlink" title="4、线程的优先级"></a>4、线程的优先级</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 优先级别 1-10， 数字越大，优先级别越高</span><br><span class="hljs-comment"> * 优先级高可以提高该线程抢点CPU时间片的概率大</span><br><span class="hljs-comment"> * 优先级别只能“影响”执行结果，不能决定执行结果（即不会先执行完级别高的线程，再执行级别低的线程）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br><br>a.setPriority(Thread.MIN_PRIORITY);<span class="hljs-comment">//1</span><br>b.setPriority(Thread.NORM_PRIORITY);<span class="hljs-comment">//5</span><br>c.setPriority(Thread.MAX_PRIORITY);<span class="hljs-comment">//10</span><br>a.start();<br>b.start();<br>c.start();<br></code></pre></td></tr></table></figure><p><a name="riaO4"></a></p><h4 id="5、线程的命名"><a href="#5、线程的命名" class="headerlink" title="5、线程的命名"></a>5、线程的命名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Thread有一个属性 name 通过Thread的有参构造器给name赋值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<span class="hljs-comment">//交给Thread赋值this.name = name;</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br>            <span class="hljs-comment">//获取当前线程对象</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-comment">//获取当前线程名字</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> thread.getName();<br>            System.out.println(<span class="hljs-string">&quot;子线程（&quot;</span>+name+<span class="hljs-string">&quot;）:&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="HTyyB"></a></p><h4 id="6、线程的休眠"><a href="#6、线程的休眠" class="headerlink" title="6、线程的休眠"></a>6、线程的休眠</h4><blockquote><p>目的是让出CPU执行的时间片，让其他工作的线程可以执行，但不会释放对象锁.</p></blockquote><blockquote><p>线程不会丢失任何显示器的所有权</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的休眠</span><br><span class="hljs-comment"> * Thread.sleep(毫秒) Thread的静态方法，写在哪个线程，哪个线程就进行休眠</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 需求：编写一个抽取学员回答问题的程序，要求倒数三秒后输出被抽中的学员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>String[] names=&#123;<span class="hljs-string">&quot;gyl&quot;</span>,<span class="hljs-string">&quot;lzh&quot;</span>,<span class="hljs-string">&quot;lb&quot;</span>,<span class="hljs-string">&quot;mx;&quot;</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> random.nextInt(names.length);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; i &gt;=<span class="hljs-number">1</span> ; i--) &#123;<br>    System.out.println(<span class="hljs-string">&quot;倒计时：&quot;</span>+i);<br>    Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠1秒</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;抽取到的学员为&quot;</span>+names[index]);<br></code></pre></td></tr></table></figure><p><a name="AD7D8"></a></p><h4 id="7、线程的礼让"><a href="#7、线程的礼让" class="headerlink" title="7、线程的礼让"></a>7、线程的礼让</h4><blockquote><p>yield作用是暂停当前正在执行的线程对象（放弃当前cpu资源），并执行其他线程。yield是<strong>让当前运行线程回到可运行状态</strong>，以允许具有相同优先级的其他线程获得运行机会</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的礼让</span><br><span class="hljs-comment"> * Thread.yield() 让当前线程退出cpu资源，只让一次</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 需求：创建两个线程B、C 分别各打印1-100的数字，其中B线程，每打印一次，就礼让一次</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br><br>b.start();<br>c.start();<br><span class="hljs-comment">//子线程B:75</span><br><span class="hljs-comment">//子线程B:76</span><br><span class="hljs-comment">//子线程C:4</span><br><span class="hljs-comment">//子线程B:77</span><br><span class="hljs-comment">//子线程C:5</span><br><span class="hljs-comment">//子线程B:78</span><br><span class="hljs-comment">//子线程B:79</span><br><span class="hljs-comment">//子线程B:80</span><br><span class="hljs-comment">//子线程B:81</span><br><span class="hljs-comment">//为什么B进行礼让后会继续执行能？因为B线程在下一次中有抢到了CPU资源</span><br></code></pre></td></tr></table></figure><p><a name="BCZwn"></a></p><h4 id="8、线程的合并"><a href="#8、线程的合并" class="headerlink" title="8、线程的合并"></a>8、线程的合并</h4><blockquote><p>join();等待这个线程的死亡</p><p>调用此方法的行为方式与调用完全相同</p><p>join(0)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : join方法</span><br><span class="hljs-comment"> * join方法：</span><br><span class="hljs-comment"> * 加入线程，让调用的线程先执行指定时间或执行完毕</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/7 16:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable2</span> <span class="hljs-variable">mr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable2</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr2);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    t.join();<span class="hljs-comment">//让t线程执行完毕（让t线程先完成，再去执行main）</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的合并</span><br><span class="hljs-comment"> * 要合并的线程.join()</span><br><span class="hljs-comment"> * 理解：将子线程的代码添加的调用join()方法处。</span><br><span class="hljs-comment"> * 需求：主线程和子线程各打印200次，当制鞋厂打印到10之后，让子线程合并到主线程。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>b.start();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span>+i);<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">10</span>)&#123;<br>        b.join();<span class="hljs-comment">//让b线程加入到当前线程（理解将b.run剩余代码都添加到此处执行，先执行完b线程的代码才会执行主线程剩余的代码）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="o8NxW"></a></p><h4 id="9、线程的中断"><a href="#9、线程的中断" class="headerlink" title="9、线程的中断"></a>9、线程的中断</h4><blockquote><p>interrupt():中断这个线程</p><p>除非当前线程中断自身，这是始终允许的</p><p>使用这个线程中断标记方法向线程中添加【中断标记】，只有被含有中断异常方法检测到这个标记就会终止方法的执行效果【sleep明显和join不明显】，<strong>直接在线程调用这个方法是无用的，</strong>只是添加标记不会停止线程，配合API中所一共一个方法来使用【interrupted】,作用检查线程中是否存在中断标记，如果存在着返回true,不存在则返回false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 中断线程</span><br><span class="hljs-comment"> * （1）使用interrupt方法来中断线程，设置一个中断状态（标记）</span><br><span class="hljs-comment"> * （2）自定义标记的方式（推荐使用）</span><br><span class="hljs-comment"> * 想要中断线程，使用自定义标记的方式实现或许比interrupt方法更加实用和优雅</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/7 16:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        MyRunnable3 mr3 = new MyRunnable3();</span><br><span class="hljs-comment">//        Thread t = new Thread(mr3);</span><br><span class="hljs-comment">//        t.start();</span><br><br>        <span class="hljs-type">MyRunnable4</span> <span class="hljs-variable">mr4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable4</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr4);<br>        t2.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-comment">//                t.interrupt();//中断线程，只是做了一个中断标记</span><br>                mr4.flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<span class="hljs-comment">//测试中断状态，此方法会把中断状态清除</span><br>                <span class="hljs-comment">//在此进行内容处理</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<span class="hljs-comment">//抛出异常后终止状态会被清空，因此需要重新标记</span><br>                Thread.currentThread().interrupt();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//定义一个自定义标记</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable4</span><span class="hljs-params">()</span> &#123;<br>        flag = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; --- &quot;</span> + i++);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br><br>        <span class="hljs-comment">//获取当前线程状态 false表示没有被销毁 true表示被销毁</span><br>        <span class="hljs-keyword">while</span> (!Thread.currentThread().isInterrupted())&#123;<span class="hljs-comment">//没有被销毁就一直输出，而且每次都要去获取，若在之前使用变量来接收则该变量的值是不会变得，因为已经执行过了</span><br>            System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;222&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;333&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>myThread.start();<br><br>Thread.sleep(<span class="hljs-number">30</span>);<br><br>myThread.interrupt();<span class="hljs-comment">//将该线程中断</span><br></code></pre></td></tr></table></figure><p><a name="fohnk"></a></p><h4 id="10、守护线程"><a href="#10、守护线程" class="headerlink" title="10、守护线程"></a>10、守护线程</h4><blockquote><p>线程分为守护线程和用户线程</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/f8136026402a52d9ba0fa70a2605f3fc--e0b4--image-20230107175822452.png" alt="image-20230107175822452"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 守护线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/7 17:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable5</span> <span class="hljs-variable">mr5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr5);<br>        <span class="hljs-comment">//线程可以分为守护线程和用户线程，当线程中没有用户线程时，JVM会退出</span><br>        t.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//把线程设置为守护线程</span><br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<br>                Thread.<span class="hljs-keyword">yield</span>();<span class="hljs-comment">//让出本次CPU执行时间片</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 守护线程</span><br><span class="hljs-comment"> * 含义：又叫后台线程，默默守护着前台线程，当所有的前台线程消亡后，守护线程会自动消亡</span><br><span class="hljs-comment"> * 垃圾回收器就是守护线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    myThread.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//将线程设置为当前线程的守护线程</span><br>    myThread.start();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">5</span> ; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span>+i);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 父类中的方法没有向上抛异常，子类重写时也就不能向上抛异常，必须进行捕获处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;守护线程正在默默守护着前台线程...&quot;</span>);<br>            <span class="hljs-keyword">try</span>&#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="viUvK"></a></p><h4 id="11、线程获取共享数据"><a href="#11、线程获取共享数据" class="headerlink" title="11、线程获取共享数据"></a>11、线程获取共享数据</h4><h5 id="（1）共享单个数据"><a href="#（1）共享单个数据" class="headerlink" title="（1）共享单个数据"></a>（1）共享单个数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainThread</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程中局部变量的共享 --共享单个数据</span><br><span class="hljs-comment">     * 思路： 在线程类中设置一个静态ConcurrentHashMap成员变量，泛型为Thread和你需要存储的数据类型，</span><br><span class="hljs-comment"> * 在线程中将当天线程作为Key和存入数据作为value进行保存</span><br><span class="hljs-comment"> * 在其他地方就可以通过当前线程对象来取出保存的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//共享容器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Thread,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//线程1</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br>                <span class="hljs-comment">//将数据存入共享容器</span><br>                map.put(Thread.currentThread(),i);<br><br>                A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;线程1&quot;</span>).start();<br><br>        <span class="hljs-comment">//线程2</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<br>                <span class="hljs-comment">//将数据存入共享容器</span><br>                map.put(Thread.currentThread(),i);<br><br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;线程2&quot;</span>).start();<br><br>    &#125;<br>    <br>&#125;<br><span class="hljs-comment">//线程2--20</span><br><span class="hljs-comment">//线程1--10</span><br><span class="hljs-comment">//线程2--20</span><br><span class="hljs-comment">//线程1--10</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取共享容器</span><br>        ConcurrentHashMap&lt;Thread, Integer&gt; map = MainThread.map;<br>        <span class="hljs-comment">//获取当前线程对应的共享值</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        System.out.println(thread.getName()+<span class="hljs-string">&quot;--&quot;</span>+map.get(thread));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（2）共享多个数据（使用数据包）"><a href="#（2）共享多个数据（使用数据包）" class="headerlink" title="（2）共享多个数据（使用数据包）"></a>（2）共享多个数据（使用数据包）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据包类,可以存放多个不同类型的数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br><br>    <span class="hljs-comment">//要存储的多个数据以及数据类型</span><br>    <span class="hljs-keyword">private</span>  String str;<br>    <span class="hljs-keyword">private</span>  Integer it;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(String str, Integer it)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>        <span class="hljs-built_in">this</span>.it = it;<br>    &#125;<br>    <span class="hljs-comment">//setget toString</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-comment">//静态成员，使能在其他地方通过类名.成员来获取存储数据的map</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Thread, Data&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> it=<span class="hljs-number">10</span>;<br>                String str=<span class="hljs-string">&quot;张三&quot;</span>;<br><br>                <span class="hljs-comment">//将要保存的多个数据封装到数据包内</span><br>                <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(str, it);<br>                <span class="hljs-comment">//保存</span><br>                map.put(Thread.currentThread(),data);<br><br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> it=<span class="hljs-number">100</span>;<br>                String str=<span class="hljs-string">&quot;Tom&quot;</span>;<br>                <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(str, it);<br>                map.put(Thread.currentThread(),data);<br><br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取map</span><br>        ConcurrentHashMap&lt;Thread, Data&gt; map = Test01.map;<br>        <span class="hljs-comment">//获取当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> map.get(t);<br>        System.out.println(t.getName()+<span class="hljs-string">&quot;中的A类对象获取到数据：&quot;</span>+data);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread-<span class="hljs-number">0</span>中的A类对象获取到数据：Data&#123;str=<span class="hljs-string">&#x27;张三&#x27;</span>, it=<span class="hljs-number">10</span>&#125;<br>Thread-<span class="hljs-number">0</span>中的B类对象获取到数据：Data&#123;str=<span class="hljs-string">&#x27;张三&#x27;</span>, it=<span class="hljs-number">10</span>&#125;<br>Thread-<span class="hljs-number">1</span>中的A类对象获取到数据：Data&#123;str=<span class="hljs-string">&#x27;Tom&#x27;</span>, it=<span class="hljs-number">100</span>&#125;<br>Thread-<span class="hljs-number">1</span>中的B类对象获取到数据：Data&#123;str=<span class="hljs-string">&#x27;Tom&#x27;</span>, it=<span class="hljs-number">100</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="（3）java提供的共享数据（java自带的共享容器）"><a href="#（3）java提供的共享数据（java自带的共享容器）" class="headerlink" title="（3）java提供的共享数据（java自带的共享容器）"></a>（3）java提供的共享数据（java自带的共享容器）</h5><blockquote><p>底层封装了一个线程安全的map</p><p>ThreadLocalMap中</p><p>​Key-ThreadLocal对象（Key是定死了的）</p><p>​Value-要共享的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-comment">//静态ThreadLocal 泛型为数据包类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Data&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Data&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> it=<span class="hljs-number">10</span>;<br>                String str=<span class="hljs-string">&quot;张三&quot;</span>;<br><br>                <span class="hljs-comment">//将要保存的多个数据封装到数据包内</span><br>                <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(str, it);<br>                <span class="hljs-comment">//保存</span><br>                local.set(data);<span class="hljs-comment">//set底层自动获取当前线程</span><br><br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> it=<span class="hljs-number">100</span>;<br>                String str=<span class="hljs-string">&quot;Tom&quot;</span>;<br>                <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(str, it);<br>                local.set(data);<br><br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>                <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                a.println();<br>                b.println();<br>            &#125;<br>        &#125;).start();<br><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取local</span><br>        ThreadLocal&lt;Data&gt; local = Test01.local;<br><br>        <span class="hljs-comment">//获取当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> local.get();<span class="hljs-comment">//无序在指定当前线程，get方法底层自动获取</span><br>        System.out.println(t.getName()+<span class="hljs-string">&quot;中的A类对象获取到数据：&quot;</span>+data);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改Data代码 让它只能new一次对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据包类,可以存放多个不同类型的数据</span><br><span class="hljs-comment">//让数据包只能new一个对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br><br>    <span class="hljs-comment">//要存储的多个数据以及数据类型</span><br>    <span class="hljs-keyword">private</span>  String str;<br>    <span class="hljs-keyword">private</span>  Integer it;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Data</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(String str, Integer it)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>        <span class="hljs-built_in">this</span>.it = it;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Data <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-comment">//获取共享容器</span><br>        ThreadLocal&lt;Data&gt; local = Test01.local;<span class="hljs-comment">//获取local</span><br><br>        <span class="hljs-comment">//判断共享容器中是否有数据包对象</span><br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> local.get();<span class="hljs-comment">//获取当前线程数据</span><br>        <span class="hljs-keyword">if</span>( data==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//没有则创建为新的</span><br>            data= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(str, i);<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//有则覆盖为新的</span><br>            data.setStr(str);<br>            data.setIt(data.it);<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Data&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">Data</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Data.getInstance(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-number">10</span>);<br>                local.set(d1);<br><br>                <span class="hljs-type">AAA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AAA</span>();<br>                <span class="hljs-type">BBB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBB</span>();<br>                a.println();<br>                b.println();<br><br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">Data</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Data.getInstance(<span class="hljs-string">&quot;yyy&quot;</span>, <span class="hljs-number">20</span>);<br>                local.set(d1);<br><br>                <span class="hljs-type">AAA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AAA</span>();<br>                <span class="hljs-type">BBB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBB</span>();<br>                a.println();<br>                b.println();<br><br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程2&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AAA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取共享容器</span><br><br>        <span class="hljs-comment">//获取当前线程对应的共享值</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        System.out.println(thread.getName() + <span class="hljs-string">&quot;--&quot;</span> + Test02.local.get());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取共享容器</span><br><br>        <span class="hljs-comment">//获取当前线程对应的共享值</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        System.out.println(thread.getName() + <span class="hljs-string">&quot;--&quot;</span> + Test02.local.get());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12、线程的生命周期"><a href="#12、线程的生命周期" class="headerlink" title="12、线程的生命周期"></a>12、线程的生命周期</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671162517816-bf094c08-43f7-4392-a7ff-fa630ff4bf5e.png#averageHue=%23f9f8f8&clientId=u46bf56f3-8a61-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=450&id=ud15665bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=516&originWidth=1093&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206142&status=done&style=none&taskId=ucf47b6a5-80d4-4bbb-8125-dd3a5a907f4&title=&width=953.8908760108644" alt="image.png"><br><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-01/a30f6500f4ab4d54162de7ad7230285a--8993--image-20230201165635560.png" alt="image-20230201165635560"></p><p>创建线程-&gt;调用start()方法，线程进入就绪状态-&gt;根据CPU调度决定是否要执行这个线程-&gt;跟本程序中的其他线程去竞争,抢到时间片-&gt;运行Runnable里的run方法，此时处于运行(Running)状态(如果此时调用yield()方法，则会让出这次执行给其他线程，重新进入就绪状态，重新竞争时间片),直至run()方法执行完毕或异常退出-&gt;如果在运行阶段被调用到join()执行其他线程，或者调用sleep()进入阻塞状态，这个状态下等待join()中断完成或sleep()结束或I&#x2F;O完成，则重新进入就绪状态；如果在运行状态调用wait()放法，则进行等待，进入阻塞状态，如果在该阻塞状态调用notify()或notifyAll()或interrupt(),就进入锁定状态，重新被唤醒,直至同步锁被释放，重新进入就绪状态。</p><h4 id="13、"><a href="#13、" class="headerlink" title="13、"></a>13、</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">int</span>[] is= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">200000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; is.length; i++) &#123;<br>            is[i]=i+<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(is,<span class="hljs-number">0</span>,<span class="hljs-number">5000</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(is,<span class="hljs-number">5000</span>,<span class="hljs-number">10000</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(is,<span class="hljs-number">10000</span>,<span class="hljs-number">15000</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">thread4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(is, <span class="hljs-number">15000</span>, <span class="hljs-number">20000</span>);<br><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>        thread4.start();<br><br>        <span class="hljs-comment">//方式一：</span><br>        <span class="hljs-comment">//阻塞，等待所有子线程都执行完</span><br>        <span class="hljs-keyword">while</span> (thread1.isFlag() || thread2.isFlag() || thread3.isFlag() || thread4.isFlag())&#123;&#125;<br><br>        <span class="hljs-comment">//方式二：</span><br><span class="hljs-comment">//        Thread.sleep(1000);</span><br><br>        System.out.println(thread1.getSum()+thread2.getSum()+thread3.getSum()+thread4.getSum());<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] is;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> startIndex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> endIndex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>; <span class="hljs-comment">//记录当前线程是否在运动中</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(<span class="hljs-type">int</span>[] is,<span class="hljs-type">int</span> startIndex,<span class="hljs-type">int</span> endIndex)</span>&#123;<br>        <span class="hljs-built_in">this</span>.is=is;<br>        <span class="hljs-built_in">this</span>.startIndex=startIndex;<br>        <span class="hljs-built_in">this</span>.endIndex=endIndex;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt;endIndex ; i++) &#123;<br>            sum+=is[i];<br>        &#125;<br>        flag=<span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFlag</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="I8Mtx"></a></p><h3 id="（二）线程安全"><a href="#（二）线程安全" class="headerlink" title="（二）线程安全"></a>（二）线程安全</h3><blockquote><p>所谓重入锁，指的是以线程为单位，当一个线程获取对象锁之后，这个线程可以再次获取本对象上的锁，而其他的线程是不可以的。</p></blockquote><blockquote><p>对于 Java 中的锁而言，一把锁也有可能同时占有多个标准，符合多种分类，比如 ReentrantLock 既是可中断锁，又是可重入锁</p></blockquote><h4 id="锁的七大分类"><a href="#锁的七大分类" class="headerlink" title="锁的七大分类"></a>锁的七大分类</h4><blockquote><ul><li>偏向锁&#x2F;轻量级锁&#x2F;重量级锁</li><li>可重入锁&#x2F;非可重入锁</li><li>共享锁&#x2F;独占锁</li><li>公平锁&#x2F;非公平锁</li><li><a href="https://so.csdn.net/so/search?q=%E6%82%B2%E8%A7%82%E9%94%81&spm=1001.2101.3001.7020">悲观锁</a>&#x2F;乐观锁</li><li>自旋锁&#x2F;非自旋锁</li><li>可中断锁&#x2F;不可中断锁</li></ul></blockquote><h5 id="偏向锁-x2F-轻量级锁-x2F-重量级锁"><a href="#偏向锁-x2F-轻量级锁-x2F-重量级锁" class="headerlink" title="偏向锁&#x2F;轻量级锁&#x2F;重量级锁"></a>偏向锁&#x2F;轻量级锁&#x2F;重量级锁</h5><blockquote><p>偏向锁&#x2F;轻量级锁&#x2F;重量级锁，这三种锁<strong>特指 synchronized 锁的状态</strong>，通过在对象头中的 <strong>mark word</strong> 来表明锁的状态</p></blockquote><h6 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h6><blockquote><p>如果自始至终，对于<strong>这把锁都不存在竞争</strong>，那么其实就没必要上锁，只需要打个标记就行了，这就是偏向锁的思想。一个对象被初始化后，还没有任何线程来获取它的锁时，那么它就是可偏向的，当有第一个线程来访问它并尝试获取锁的时候，它就将这个线程记录下来，以后如果尝试获取锁的线程正是偏向锁的拥有者，就<strong>可以直接获得锁，开销很小，性能最好</strong></p></blockquote><h6 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h6><blockquote><p>JVM 开发者发现在很多情况下，<strong>synchronized</strong> 中的代码是被多个线程交替执行的，而不是同时执行的，也就是说并不存在实际的竞争，或者是只有短时间的锁竞争，用 <strong>CAS</strong> 就可以解决，这种情况下，用完全互斥的重量级锁是没必要的。<strong>轻量级锁是指当锁原来是偏向锁的时候，被另一个线程访问，说明存在竞争，那么偏向锁就会升级为轻量级锁，线程会通过自旋的形式尝试获取锁，而不会陷入阻塞</strong></p></blockquote><h6 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h6><blockquote><p>重量级锁是<strong>互斥锁</strong>，它是利用操作系统的同步机制实现的，所以<strong>开销相对比较大</strong>。当多个线程直接有实际竞争，且锁竞争时间长的时候，轻量级锁不能满足需求，锁就会膨胀为重量级锁。<strong>重量级锁会让其他申请却拿不到锁的线程进入阻塞状态</strong></p></blockquote><blockquote><p> <strong>锁升级路径：无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong></p></blockquote><h6 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h6><blockquote><p><strong>偏向锁性能最好，可以避免执行CAS操作。而轻量级锁利用自旋和CAS避免了重量级锁带来的线程阻塞和唤醒，性能中等。重量级锁则会把获取不到锁的线程阻塞，性能最差</strong></p></blockquote><h5 id="可重入锁-x2F-非可重入锁"><a href="#可重入锁-x2F-非可重入锁" class="headerlink" title="可重入锁&#x2F;非可重入锁"></a>可重入锁&#x2F;非可重入锁</h5><blockquote><p>可重入锁指的是线程当前已经持有这把锁了，<strong>能在不释放这把锁的情况下，再次获取这把锁</strong>。同理，不可重入锁指的是虽然线程当前持有了这把锁，但是如果想再次获取这把锁，也必须要先释放锁后才能再次尝试获取</p><p>对于可重入锁而言，最典型的就是 ReentrantLock 了，正如它的名字一样，reentrant 的意思就是可重入，它也是 Lock 接口最主要的一个实现类</p></blockquote><h5 id="共享锁-x2F-独占锁"><a href="#共享锁-x2F-独占锁" class="headerlink" title="共享锁&#x2F;独占锁"></a>共享锁&#x2F;独占锁</h5><blockquote><p>共享锁指的是我们同一把做可以被多个线程同时获得，而独占锁指的就是，这把锁只能同时被一个线程获得。我们的<strong>读写锁，就最好地全是了共享锁和独占锁的理念</strong>。读写锁中的读锁，是共享锁，而写锁是独占锁。读锁可以被同时读，可以同时被多个线程持有，而写锁最多只能同时被一个线程持有</p></blockquote><h5 id="公平锁-x2F-非公平锁"><a href="#公平锁-x2F-非公平锁" class="headerlink" title="公平锁&#x2F;非公平锁"></a>公平锁&#x2F;非公平锁</h5><blockquote><p>公平锁的公平的含义在于<strong>如果线程现在拿不到这把锁，那么线程就都会进入等待，开始排队</strong>，在等待队列里等待时间长的线程会优先拿到这把锁，有先来先得的意思。而非公平锁就不那么“完美”了，它会在一定情况下，<strong>忽略掉已经在排队的线程，发生插队现象</strong></p></blockquote><h5 id="悲观锁-x2F-乐观锁"><a href="#悲观锁-x2F-乐观锁" class="headerlink" title="悲观锁&#x2F;乐观锁"></a>悲观锁&#x2F;乐观锁</h5><blockquote><p>悲观锁的概念是在获取资源之前，必须先拿到锁，以便达到“<strong>独占</strong>”的状态，当前线程在操作资源的时候，其他线程由于不能拿到锁，所以其他线程不能来影响我。而乐观锁恰恰相反，它并不要求在获取资源前拿到锁，也不会锁住资源；相反，乐观锁利用 <strong>CAS 理念，在不独占资源的情况下，完成了对资源的修改</strong></p></blockquote><h5 id="自旋锁-x2F-非自旋锁"><a href="#自旋锁-x2F-非自旋锁" class="headerlink" title="自旋锁&#x2F;非自旋锁"></a>自旋锁&#x2F;非自旋锁</h5><blockquote><p>自旋锁的理念是如果线程现在拿不到锁，并<strong>不直接陷入阻塞或者释放 CPU 资源</strong>，而是<strong>开始利用循环，不停地尝试获取锁</strong>，这个循环过程被形象地比喻为“<strong>自旋</strong>”，就像是线程在“<strong>自我旋转</strong>”。相反，非自旋锁的理念就是没有自旋的过程，如果拿不到锁就直接放弃，或者进行其他的处理逻辑，例如去排队、陷入阻塞等</p></blockquote><h5 id="可中断锁-x2F-不可中断锁"><a href="#可中断锁-x2F-不可中断锁" class="headerlink" title="可中断锁&#x2F;不可中断锁"></a>可中断锁&#x2F;不可中断锁</h5><blockquote><p>在 Java 中，synchronized 关键字修饰的锁代表的是不可中断锁，一旦线程申请了锁，就没有回头路了，只能等到拿到锁以后才能进行其他的逻辑处理。而我们的 ReentrantLock 是一种典型的可中断锁，例如使用 lockInterruptibly 方法在获取锁的过程中，突然不想获取了，那么也可以在中断之后去做其他的事情，不需要一直傻等到获取到锁才离开</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-04/3bb315df05edbbaa5fc48a90c1d8adeb--f0fb--image-20230204142935101.png" alt="image-20230204142935101"></p><h4 id="卖票实例"><a href="#卖票实例" class="headerlink" title="卖票实例"></a>卖票实例</h4><blockquote><p>什么叫做线程安全？</p><p>多线程去操作同一资源时，不加锁会导致脏数据的出现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 1、多线程共享数据时，会发生线程不安全的情况</span><br><span class="hljs-comment"> * 2、多线程共享数据必须使用同步</span><br><span class="hljs-comment"> * 3、实现同步的三种方法：</span><br><span class="hljs-comment"> * （1）使用同步代码块</span><br><span class="hljs-comment"> * （2）使用同步方法</span><br><span class="hljs-comment"> * （3）使用Lock(更灵活的代码控制)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 多线程共享数据，会有安全问题，使用同步可以解决安全问题，但同时会牺牲性能，所以同步的代码块要尽量保持简短，把不随数据变化的相关代码移除同步块，不要阻塞</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3、同步准则</span><br><span class="hljs-comment"> * 当编写synchronized块时，有几个简单的准测可以遵循，这些准测在避免死锁和性能危险的风险方面大有帮助：</span><br><span class="hljs-comment"> * (1)使代码块保持简短。把不随线程变化的预处理和后处理移出synchronized块。</span><br><span class="hljs-comment"> * (2)不要阻塞。InputStream.read()。</span><br><span class="hljs-comment"> * (3)在持有锁的时候，不要对其它对象调用同步方法。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 线程同步是确保多线程共享数据的安全性，同时也会牺牲性能，同步过多还可能产生死锁，因此务必按需求使用同步</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/7 21:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">案例：通过多线程完成三个售票台售卖<span class="hljs-number">1000</span>张票。<br><span class="hljs-number">1</span>、线程类进行解决：<br>出现问题：<br>（<span class="hljs-number">1</span>）每个线程都卖出<span class="hljs-number">1000</span>张票，一共卖出了<span class="hljs-number">3000</span>张票。<br>解决：将票的总数和当前票数的范围设置为静态，这样三个线程就能共享票的总数和当前票数。<br>（<span class="hljs-number">2</span>）少卖重卖问题：<br>解决：给线程中进行票数迭代和输出代码进行加锁<br>（<span class="hljs-number">3</span>）临界值问题：t2、t3都在第<span class="hljs-number">999</span>张票进入循环中等待解锁。<br>解决方案：在锁中再一次判断是否超出票的范围。<br><br><span class="hljs-number">2</span>、任务类进行解决：<br>出现问题<br>（<span class="hljs-number">1</span>）每个线程都卖出<span class="hljs-number">1000</span>张，一共卖出了<span class="hljs-number">3000</span>张票。<br>解决：将票的总数和当前票数设为线程的成员变量，不要加<span class="hljs-keyword">static</span>属性，因为多个线程共享一个任务类对象，而添加<span class="hljs-keyword">static</span>后，多个任务类对象会共享票<br>（<span class="hljs-number">2</span>）少卖重卖问题：<br>解决：给线程中进行票数迭代和输出代码进行加锁<br>（<span class="hljs-number">3</span>）临界值问题：t2、t3都在第<span class="hljs-number">999</span>张票进入循环中等待解锁。<br>解决方案：在锁中再一次判断是否超出票的范围。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">线程安全-加锁<br>注意：<br>要想多个线程异步（互斥），就必须使用同一把锁。<br>锁-锁对象，任何的引用数据类型的对象都可以视作为锁对象<br><br>线程<span class="hljs-number">1</span>抢到cpu资源，上锁，第一个资源时间片用完（但线程<span class="hljs-number">1</span>还没执行完），退出cpu。<br>线程<span class="hljs-number">2</span>抢到cpu资源，发现上了锁，退出cpu。<br>线程<span class="hljs-number">3</span>抢到cpu资源，发现上了锁，退出cpu。<br>线程<span class="hljs-number">1</span>抢到cpu资源，将剩余程序执行完，解锁，退出cpu。<br></code></pre></td></tr></table></figure><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//售票</span><br><span class="hljs-comment">//    private Object obj = new Object();//同步锁对象</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//            同步代码块</span><br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    ticket--;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">&quot;您购买的票剩余：&quot;</span> + ticket + <span class="hljs-string">&quot;张&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//售票</span><br><span class="hljs-comment">//    private Object obj = new Object();//同步锁对象</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//            同步代码块</span><br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    ticket--;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">&quot;您购买的票剩余：&quot;</span> + ticket + <span class="hljs-string">&quot;张&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(锁对象)&#123;<span class="hljs-comment">//自动上锁，要求互斥的线程的锁对象是同一个</span><br>...要互斥住的代码<br>&#125;<span class="hljs-comment">//自动解锁</span><br></code></pre></td></tr></table></figure><p>1、使用线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<span class="hljs-comment">//票的总数 使用static来让线程共享</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">//当前卖的票数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SellTicket01</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket)&#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;abc&quot;</span>)&#123;<span class="hljs-comment">//自动上锁 //要进行互斥的锁对象必须为同一个对象</span><br>                <span class="hljs-keyword">if</span> (curTicket &lt; allTicket)&#123;<br>                    curTicket++;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在销售第&quot;</span>+curTicket+<span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>)&#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;票已售罄&quot;</span>);<br>                &#125;<br>            &#125;<span class="hljs-comment">//自动解锁</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、使用任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<span class="hljs-comment">//总票数</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//当前买的票数</span><br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket) &#123;<br>            method();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (curTicket &lt; allTicket) &#123;<br>            curTicket++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + curTicket + <span class="hljs-string">&quot;张票&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;票已售完&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>推荐使用同步<strong>成员</strong>方法，因为若需要进行两个任务同时售出1000张票，分别开启三个线程和四个线程，那么如果使用同步静态方法则会因为锁对象为 该类.class对象 导致两个任务会的线程都会抢资源（互斥），总共售出1000张票，而同步成员方法则因为锁对象为 this ,使第二个任务的线程不会产生互斥抢同一资源</p></blockquote><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同步方法:同步的对象是当前对象（this）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>        ticket--;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;您购买的票剩余：&quot;</span> + ticket + <span class="hljs-string">&quot;张&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//成员方法  锁对象this</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//自动上锁</span><br>    <br>&#125;<span class="hljs-comment">//自动解锁</span><br><br><span class="hljs-comment">//静态方法 锁对象 该类的class对象（在整个程序中都是唯一的），任务类不能使用静态方法，不能将类class对象作为锁对象，这会使不同任务之间的线程进行互斥。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SellTicket02</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket)&#123;<br>            method();<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (curTicket &lt; allTicket)&#123;<br>            curTicket++;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在销售第&quot;</span>+curTicket+<span class="hljs-string">&quot;张票&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>)&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;票已售罄&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket)&#123;<br>            method();<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (curTicket &lt; allTicket)&#123;<br>            curTicket++;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在销售第&quot;</span>+curTicket+<span class="hljs-string">&quot;张票&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>)&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;票已售罄&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SellTicket02</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket02</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;售票台1&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;售票台2&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;售票台3&quot;</span>);<br>thread1.start();<br>thread2.start();<br>thread3.start();<br></code></pre></td></tr></table></figure><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><blockquote><p>需要保证当前this的唯一性</p></blockquote><blockquote><p>以为Lock是一个显示锁对象，所有不能调用Object类中提供wait、notify、notifyAll方法进行线程通信，所以系统就提供了一个和Lock锁一起使用线程通信接口Condititon.</p></blockquote><table><thead><tr><th align="center">通信方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">await()</td><td align="center">线程等待释放锁资源和CPU时间片</td></tr><tr><td align="center">signal()</td><td align="center">唤醒等待池中某一个线程对象【随机唤醒】</td></tr><tr><td align="center">signalAll()</td><td align="center">唤醒等待池中所有线程对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//锁对象</span><br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>lock.lock(); <span class="hljs-comment">//手动上锁</span><br>...要互斥住的代码...<br>lock.unlock();  <span class="hljs-comment">//手动解锁</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//互斥锁</span><br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//Lock实现同步</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<span class="hljs-comment">//锁</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>                ticket--;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;您购买的票剩余：&quot;</span> + ticket + <span class="hljs-string">&quot;张&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<span class="hljs-comment">//释放锁</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>要互斥的线程需要使用同一个Lock对象，因此需要设置为静态 private static Lock lock &#x3D; new ReentranyyLock();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<span class="hljs-comment">//票的总数 使用static来让线程共享</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">//当前卖的票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(); <span class="hljs-comment">//Lock锁 static</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SellTicket03</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket)&#123;<br><br>            lock.lock();<br>            <span class="hljs-keyword">if</span> (curTicket &lt; allTicket)&#123;<br>                curTicket++;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在销售第&quot;</span>+curTicket+<span class="hljs-string">&quot;张票&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;票已售罄&quot;</span>);<br>            &#125;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">allTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<span class="hljs-comment">//票的总数 使用static来让线程共享</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">curTicket</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">//当前卖的票数</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(); <span class="hljs-comment">//Lock锁</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (curTicket &lt; allTicket)&#123;<br><br>            lock.lock();<br>            <span class="hljs-keyword">if</span> (curTicket &lt; allTicket)&#123;<br>                curTicket++;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在销售第&quot;</span>+curTicket+<span class="hljs-string">&quot;张票&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curTicket == <span class="hljs-number">1000</span>)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;票已售罄&quot;</span>);<br>            &#125;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="qIJOJ"></a></p><h3 id="（三）死锁"><a href="#（三）死锁" class="headerlink" title="（三）死锁"></a>（三）死锁</h3><p>过多的同步有可能出现死锁，死锁的操作是在程序运行的时候才有可能出现</p><blockquote><p><strong>在一个同步方法中调用了另一个对象的同步方法，可能产生死锁</strong></p></blockquote><blockquote><p>多线程中要进行资源的共享，就需要同步，但同步过多，就可能造成死锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要避免死锁的出现，避免锁嵌套</span><br><br><span class="hljs-comment">//输出： 哲学家1吃饭饭啦</span><br><span class="hljs-comment">//哲学家2吃饭饭啦</span><br><span class="hljs-comment">//原因： 哲学家1抢到了Kuaizi.a和kuaizi.b，之后释放资源，哲学家2再抢到a、b筷子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (Kuaizi.a)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    <span class="hljs-keyword">synchronized</span> (Kuaizi.b)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;哲学家1吃饭饭啦&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (Kuaizi.b)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    <span class="hljs-keyword">synchronized</span> (Kuaizi.a)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;哲学家2吃饭饭啦&quot;</span>);<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Kuaizi</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Q3BVQ"></a></p><h3 id="（四）生产者消费者模型"><a href="#（四）生产者消费者模型" class="headerlink" title="（四）生产者消费者模型"></a>（四）生产者消费者模型</h3><blockquote><p>两个线程协同工作，先生产，再消费</p></blockquote><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><blockquote><p>sleep与wait的区别？</p><p>sleep:让线程进入休眠状态，让出CPU的时间片，不释放对象监视器的所有权（对象锁）</p><p>wait:让线程进入等待状态，让出CPU的时间片，并释放对象监视器的所有权（对象锁），等待其他线程通过notify方法来唤醒</p></blockquote><p>多个线程去操作同一个资源，并且多个线程的功能都是一样的，就用买票的案例去套。<br />多个线程去操作同一个资源，并且多个线程的功能是不一样的，就用生产者消费者或者仓储模型去套。</p><p>意识:多个线程去操作同一个资源时，必须加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * * 知识点：生产者消费者模型</span><br><span class="hljs-comment"> *  * 分析：</span><br><span class="hljs-comment"> *  * 产品类-Phone：brand、price</span><br><span class="hljs-comment"> *  * 生产者线程：不断的调用产品类对象的set</span><br><span class="hljs-comment"> *  * 消费者线程：不断的调用产品类对象的get</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 最终目的：生成一个消费一个</span><br><span class="hljs-comment"> * 步骤一：让生产者和消费者操作同一个资源</span><br><span class="hljs-comment"> * 步骤二：在两个产品之间俩会切换 目的：放大步骤一的问题</span><br><span class="hljs-comment"> *          出现问题：</span><br><span class="hljs-comment"> *                  华为--1999</span><br><span class="hljs-comment"> *                  小米--3999 -生产者线程还没设置完产品类的属性，就被消费者抢到了资源</span><br><span class="hljs-comment"> *                          解决方法：加锁</span><br><span class="hljs-comment"> *                  null--0.0 --》消费者线程最开始抢到资源。</span><br><span class="hljs-comment"> * 步骤三：生成一个消费一个</span><br><span class="hljs-comment"> *      思路：1、在产品类中添加一个属性：boolean store 库存</span><br><span class="hljs-comment"> *      2、在生产者中，如果有库存，就不能生成。</span><br><span class="hljs-comment"> *      3、在消费者中，如果没库存，就不能消费。</span><br><span class="hljs-comment"> *      4、使用wait() 和notify() 等待和唤醒</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 多消费者多生产者</span><br><span class="hljs-comment"> * 问题：存在情况所有线程都处于阻塞状态</span><br><span class="hljs-comment"> *   解决： notifyAll()</span><br><span class="hljs-comment"> * 问题：出现生产多个资源</span><br><span class="hljs-comment"> *   解决： if()&#123;</span><br><span class="hljs-comment"> *       phone.wait()//唤醒后向下执行</span><br><span class="hljs-comment"> *   &#125;</span><br><span class="hljs-comment"> *   换为 while()&#123;</span><br><span class="hljs-comment"> *       phone.wait()//唤醒后先判断、判断正确才继续下行执行，否则在此wait</span><br><span class="hljs-comment"> *   &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><p><a name="Z7bO2"></a></p><h4 id="1、一个生产者和一个消费者"><a href="#1、一个生产者和一个消费者" class="headerlink" title="1、一个生产者和一个消费者"></a>1、一个生产者和一个消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> store;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> store;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStore</span><span class="hljs-params">(<span class="hljs-type">boolean</span> store)</span> &#123;<br>        <span class="hljs-built_in">this</span>.store = store;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">(String brand, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Phone&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;brand=&#x27;&quot;</span> + brand + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBrand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrand</span><span class="hljs-params">(String brand)</span> &#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Phone phone;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-keyword">synchronized</span> (phone)&#123;<br>               <span class="hljs-keyword">if</span> (!phone.isStore())&#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       <span class="hljs-comment">//等待：</span><br>                       <span class="hljs-comment">//1、让当前线程进入等待状态</span><br>                       <span class="hljs-comment">//2、释放锁资源</span><br>                       <span class="hljs-comment">//3、将等待的线程记录到对象监视器</span><br>                       phone.wait();<br>                   &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                       e.printStackTrace();<br>                   &#125;<br>               &#125;<br><br>               System.out.println(phone.getBrand()+<span class="hljs-string">&quot;--&quot;</span>+phone.getPrice());<br>               phone.setStore(<span class="hljs-literal">false</span>);<br>               <span class="hljs-comment">//唤醒：唤醒对象监视器记录的随机的一个线程</span><br>               phone.notify();<span class="hljs-comment">//phone作为对象监视器</span><br>           &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Phone phone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone=phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (phone)&#123;<br>                <span class="hljs-keyword">if</span>(phone.isStore())&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//wait</span><br>                        <span class="hljs-comment">//1、阻塞当前线程</span><br>                        <span class="hljs-comment">//2、解锁当前对象锁</span><br>                        <span class="hljs-comment">//3、将当前阻塞线程记录到对象锁中。</span><br>                        phone.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    phone.setBrand(<span class="hljs-string">&quot;华为&quot;</span>);<br>                    phone.setPrice(<span class="hljs-number">3999</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    phone.setBrand(<span class="hljs-string">&quot;小米&quot;</span>);<br>                    phone.setPrice(<span class="hljs-number">1999</span>);<br>                &#125;<br>                flag = !flag;<br><br>                phone.setStore(<span class="hljs-literal">true</span>);<br>                phone.notify();<br>                <span class="hljs-comment">//随机唤醒某一阻塞线程</span><br><br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(phone);<br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(phone);<br><br>        producer.start();<br>        consumer.start();<br><br><span class="hljs-comment">//三个前台线程：生产者线程、消费者线程、主线程</span><br><span class="hljs-comment">//守护线程：垃圾回收器</span><br></code></pre></td></tr></table></figure><p><a name="YUtw1"></a></p><h4 id="2、多消费者和多生产者"><a href="#2、多消费者和多生产者" class="headerlink" title="2、多消费者和多生产者"></a>2、多消费者和多生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Phone phone;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-keyword">synchronized</span> (phone)&#123;<br>               <span class="hljs-keyword">while</span> (!phone.isStore())&#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       phone.wait();<br>                   &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                       e.printStackTrace();<br>                   &#125;<br>               &#125;<br><br>               System.out.println(phone.getBrand()+<span class="hljs-string">&quot;--&quot;</span>+phone.getPrice());<br>               phone.setStore(<span class="hljs-literal">false</span>);<br>               phone.notifyAll();<br>           &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Phone phone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone=phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (phone)&#123;<br>                <span class="hljs-keyword">while</span> (phone.isStore())&#123;<span class="hljs-comment">//线程1、线程2循环判断是否有库存</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//wait</span><br>                        <span class="hljs-comment">//1、阻塞当前线程</span><br>                        <span class="hljs-comment">//2、解锁当前对象锁</span><br>                        <span class="hljs-comment">//3、将当前阻塞线程记录到对象锁中。</span><br>                        phone.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    phone.setBrand(<span class="hljs-string">&quot;华为&quot;</span>);<br>                    phone.setPrice(<span class="hljs-number">3999</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    phone.setBrand(<span class="hljs-string">&quot;小米&quot;</span>);<br>                    phone.setPrice(<span class="hljs-number">1999</span>);<br>                &#125;<br>                flag = !flag;<br><br>                phone.setStore(<span class="hljs-literal">true</span>);<br>                phone.notifyAll();<br>                <span class="hljs-comment">//唤醒所有阻塞线程</span><br><br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><br><span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(phone);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(phone);<br><span class="hljs-type">Producer</span> <span class="hljs-variable">producer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(phone);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(phone);<br><br>producer.start();<br>producer1.start();<br>consumer.start();<br>consumer1.start();<br></code></pre></td></tr></table></figure><p><a name="GexCd"></a></p><h3 id="（五）仓储模型"><a href="#（五）仓储模型" class="headerlink" title="（五）仓储模型"></a>（五）仓储模型</h3><blockquote><p>生产者消费者模型加锁加到代码里</p><p>仓储模型加锁加在仓库里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 知识点：仓储模型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 需求：模拟卖蛋糕的场景（先生产的蛋糕先卖出 -- 队列）</span><br><span class="hljs-comment"> * 分析：</span><br><span class="hljs-comment"> * 仓库类</span><br><span class="hljs-comment"> * 蛋糕类</span><br><span class="hljs-comment"> * 生产者不断的创建蛋糕对象存入仓库中</span><br><span class="hljs-comment"> * 消费者不断的从仓库中消费蛋糕</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> 多个生产者多个消费者可能出现的问题：</span><br><span class="hljs-comment">       超生产</span><br><span class="hljs-comment">       解决：将if判断改为while，是每个线程在重新唤醒后再次判断。notify()改为notifAll()</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       经验：锁对象可以作为对象监视器使用</span><br></code></pre></td></tr></table></figure><p><a name="To7lk"></a></p><h4 id="1、一个生产者一个消费者的情况"><a href="#1、一个生产者一个消费者的情况" class="headerlink" title="1、一个生产者一个消费者的情况"></a>1、一个生产者一个消费者的情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cake</span> &#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> String dateTime;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">curCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//当前蛋糕库存</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<span class="hljs-comment">//最大库存</span><br>    <span class="hljs-keyword">private</span>  LinkedList&lt;Cake&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//容器</span><br><br>    <span class="hljs-comment">//入库</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Cake cake)</span>  &#123;<span class="hljs-comment">//synchronized锁的对象是this</span><br><br>        <span class="hljs-keyword">if</span>(curCapacity &gt;= maxCapacity)&#123;<span class="hljs-comment">//当蛋糕容量 大于等于 最大容量时 ，进行等待，等待蛋糕被消耗。</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//this作为监视器</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        curCapacity++;<br>        list.add(cake);<br>        System.out.println(<span class="hljs-string">&quot;入库，当前的蛋糕数量为： &quot;</span>+ curCapacity);<br><br>        notify();<span class="hljs-comment">//唤醒</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Cake <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(curCapacity &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//this作为监视器</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        curCapacity--;<br>        <span class="hljs-type">Cake</span> <span class="hljs-variable">cake</span> <span class="hljs-operator">=</span> list.removeFirst();<br>        System.out.println(<span class="hljs-string">&quot;出库，当前的蛋糕数量为：&quot;</span>+curCapacity+<span class="hljs-string">&quot;--&quot;</span>+cake);<br>        notify();<br><br>        <span class="hljs-keyword">return</span> cake;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> Store store;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Store store)</span> &#123;<br>        <span class="hljs-built_in">this</span>.store = store;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            store.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Store</span> <span class="hljs-variable">store</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Store</span>();<br><span class="hljs-type">Producer</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(store);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(store);<br><br>p.start();<br>c.start();<br></code></pre></td></tr></table></figure><p><a name="ItAOk"></a></p><h4 id="2、多个生产者多个消费者的情况"><a href="#2、多个生产者多个消费者的情况" class="headerlink" title="2、多个生产者多个消费者的情况"></a>2、多个生产者多个消费者的情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">curCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//当前蛋糕库存</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<span class="hljs-comment">//最大库存</span><br>    <span class="hljs-keyword">private</span>  LinkedList&lt;Cake&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//容器</span><br><br>    <span class="hljs-comment">//入库</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Cake cake)</span>  &#123;<span class="hljs-comment">//synchronized锁的对象是this</span><br><br>        <span class="hljs-keyword">while</span>(curCapacity &gt;= maxCapacity)&#123;<span class="hljs-comment">//使用while让唤醒的线程重新判断</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//this作为监视器</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        curCapacity++;<br>        list.add(cake);<br>        System.out.println(<span class="hljs-string">&quot;入库，当前的蛋糕数量为： &quot;</span>+ curCapacity);<br><br>        notifyAll();<span class="hljs-comment">//唤醒所有</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Cake <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(curCapacity &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//this作为监视器</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        curCapacity--;<br>        <span class="hljs-type">Cake</span> <span class="hljs-variable">cake</span> <span class="hljs-operator">=</span> list.removeFirst();<br>        System.out.println(<span class="hljs-string">&quot;出库，当前的蛋糕数量为：&quot;</span>+curCapacity+<span class="hljs-string">&quot;--&quot;</span>+cake);<br>        notifyAll();<br><br>        <span class="hljs-keyword">return</span> cake;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Store</span> <span class="hljs-variable">store</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Store</span>();<br><span class="hljs-type">Producer</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(store);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(store);<br><span class="hljs-type">Producer</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(store);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(store);<br><br>p.start();<br>p1.start();<br>c.start();<br>c1.start();<br></code></pre></td></tr></table></figure><p><a name="PFOWY"></a></p><h3 id="（六）线程池"><a href="#（六）线程池" class="headerlink" title="（六）线程池"></a>（六）线程池</h3><blockquote><p>线程池是预先创建线程的一种技术。线程池在还没有任务到来之前，创建一定数量的线程，放入空闲队列中，然后对这些资源进行复用。减少频繁的创建和销毁对象。I<br>jdk1.5版本以上提供了现成的线程池。<br>Java里面线程池的顶级接口是Executor,是一个执行线程的工具。<br>线程池接口是ExecutorService.</p></blockquote><blockquote><p>java.util.concurrent包（并发包）：并发编程中很常用的实用工具类<br>Executor接口：<br>执行已提交的Runnable任务的对象。<br>ExecutorService接口：<br>Executor提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成Future的方法。<br>Executors类：<br>此包中所定义的Executor、ExecutorService等的工厂和实用方法。</p></blockquote><blockquote><p>使用线程池最直接的好处就是：线程可以重复利用、减少创建和销毁线程所带来的系统资源的开销，提升性能（节省线程创建的时间开销，使程序响应更快）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">使用线程池的原因：<br><span class="hljs-number">1</span>、线程池缩短或优化创建线程和销毁线程的时间-提高项目的运行效率<br><span class="hljs-number">2</span>、提高线程的复用率<br><span class="hljs-number">3</span>、控制整个项目中的线程个数<br></code></pre></td></tr></table></figure><p><a name="gmEym"></a></p><h4 id="1、JAVA自带线程池的创建"><a href="#1、JAVA自带线程池的创建" class="headerlink" title="1、JAVA自带线程池的创建"></a>1、JAVA自带线程池的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : JDK1.5线程池</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/10 17:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程池（4种）</span><br>        <span class="hljs-comment">//1.创建一个单线程的线程池</span><br><span class="hljs-comment">//        ExecutorService es = Executors.newSingleThreadExecutor();</span><br>        <span class="hljs-comment">//2.创建固定大小的线程池，先完成的线程会继续完成队列为完成的任务</span><br><span class="hljs-comment">//        ExecutorService es = Executors.newFixedThreadPool(2);</span><br>        <span class="hljs-comment">//3.创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，</span><br>        <span class="hljs-comment">//那么就会回收部分空闲(60秒不执行任务)的线程，当任务数增加时，</span><br>        <span class="hljs-comment">//此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，</span><br>        <span class="hljs-comment">//线程池大小完全依赖于操作系统（或者说JVM)能够创建的最大线程大小。</span><br><span class="hljs-comment">//        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="hljs-comment">//        es.execute(new MyRunnable7());</span><br><span class="hljs-comment">//        es.execute(new MyRunnable7());</span><br><br>        <span class="hljs-comment">//4.创建一个无限制</span><br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br><br>        es.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable7</span>(), <span class="hljs-number">3000</span>, TimeUnit.MILLISECONDS);<br><br>        es.shutdown();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable7</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="xvfYk"></a></p><h4 id="2、线程池的7大参数"><a href="#2、线程池的7大参数" class="headerlink" title="2、线程池的7大参数"></a>2、线程池的7大参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">最核心线程数 - <span class="hljs-number">5</span><span class="hljs-number">20</span>-<span class="hljs-number">5</span>       =<span class="hljs-number">15</span><br>最大线程数 - <span class="hljs-number">20</span>最大线程数-核心线程数=普通线程数<br>闲置时间 - 秒回收普通线程，核心线程不会被回收<br>时间单位 - <span class="hljs-number">60</span><br>任务队列 - 有界队列（<span class="hljs-number">50</span>）队列并不会执行，任务是阻塞状态<br>线程工厂初始化线程（创建、取名...）<br>拒绝策略<br><br>线程池的底层调用步骤：<br><span class="hljs-number">1</span>、核心线程<br><span class="hljs-number">2</span>、任务队列<br><span class="hljs-number">3</span>、普通线程<br><span class="hljs-number">4</span>、拒绝策略<br></code></pre></td></tr></table></figure><blockquote><p>核心线程和普通线程的区别？</p><p>叫法上有区别，本质意义上都是线程</p><p>调用顺序上有区别</p></blockquote><h4 id="3、任务队列"><a href="#3、任务队列" class="headerlink" title="3、任务队列"></a>3、任务队列</h4><p>无界队列：无界任务队列放不满，到不了第三步，除非内存报表<br />同步队列：任务队列为0，核心线程满了，就直接走普通线程<br />有界队列：<br />优先队列：特殊的无界队列，可以设置任务优先级，优先级高的在队列前面（内置比较器优先级大的返回-1，优先级小的返回1）</p><table><thead><tr><th>队列名称</th><th>详解</th></tr></thead><tbody><tr><td>LinkedBlockingQueue<br />无界任务队列</td><td>使用无界任务队列，线程池的任务队列可以无限制的添加新的任务，而线程池创建的最大线程数量就是corePoolSize设置的数量，也就是说在这种情况下maximumPoolSize这个参数是无效的，哪怕你的任务队列中缓存了很多未执行的任务，当线程池的线程数达到corePoolSize后，就不会再增加了；若后续有新的任务加入，则直接进入队列等待，当使用这种任务队列模式时，一定要注意你任务提交与处理之间的协调与控制，不然会出现队列中的任务由于无法及时处理导致一直增长，直到最后资源耗尽的问题</td></tr><tr><td>SynchronousQueue<br />同步任务队列 <br />直接提交任务队列</td><td>使用直接提交任务队列，队列没有容量，每执行一个插入操作就会阻塞，需要再执行一个删除操作才会被唤醒，反之每一个删除操作也都要等待对应的插入操作。任务队列为SynchronousQueue,创建的线程数大于maximumPoolSize时，直接执行了拒绝策略抛出异常。<br />使用SynchronousQueue队列，提交的任务不会被保存，总是会马上提交执行。如果用于执行任务的线程数量小于maximumPoolSize,则尝试创建新的线程，如果达到maximumPoolSize设置的最大值，则根据你设置的handler执行拒绝策略。因此这种方式你提交的任务不会被缓存起来，而是会被马上执行，在这种情况下，你需要对你程序的并发量有个准确的评估，才能设置合适的maximumPoolSize数量，否则很容易就会执行拒绝策略</td></tr><tr><td>ArrayBlockingQueue<br />有界任务队列</td><td>使用有界任务队列，若有新的任务需要执行时，线程池会创建新的线程，直到创建的线程数量达到corePoolSize时，则会将新的任务加入到等待队列中。若等待队列已满，即超过ArrayBlockingQueue初始化的容量，则继续创建线程，直到线程数量达到maximumPoolSize设置的最大线程数量，若大于maximumPoolSize,则执行拒绝策略。在这种情况下，线程数量的上限与有界任务队列的状态有直接关系，如果有界队列初始容量较大或者没有达到超负荷的状态，线程数将一直维持在corePoolSize以下，反之当任务队列已满时，则会以maximumPoolSize为最大线程数上限。</td></tr><tr><td>PriorityBlockingQueue<br />优先任务队列</td><td>使用优先任务队列，它其实是一个特殊的无界队列，它其中无论添加了多少个任务，线程池创建的线程数也不会超过corePoolSizel的数量，只不过其他队列一般是按照先进先出的规则处理任务，而PriorityBlockingQueue队列<strong>可以自定义规则根据任务的优先级顺序先后执行。</strong></td></tr></tbody></table><p><a name="BJsoE"></a></p><h4 id="4、拒绝策略"><a href="#4、拒绝策略" class="headerlink" title="4、拒绝策略"></a>4、拒绝策略</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671452748151-b33242ab-cc4f-4d42-8b3f-ab52aed5074f.png#averageHue=%23e1dcd4&clientId=u183380a7-06e7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=449&id=u2c7d132f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=514&originWidth=982&originalType=binary&ratio=1&rotation=0&showTitle=false&size=416089&status=done&style=none&taskId=uce69f280-06e3-4f04-8189-86887731928&title=&width=857.0181520975927" alt="image.png"></p><h4 id="5、自定义线程池"><a href="#5、自定义线程池" class="headerlink" title="5、自定义线程池"></a>5、自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 自定义线程池</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>         <span class="hljs-number">5</span>,<span class="hljs-comment">//核心线程</span><br>         <span class="hljs-number">20</span>,<span class="hljs-comment">//最大线程数</span><br>         <span class="hljs-number">60</span>,<span class="hljs-comment">//闲置时间</span><br>         TimeUnit.SECONDS,<span class="hljs-comment">//闲置时间单位</span><br>         <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">50</span>),<span class="hljs-comment">//有界队列，长度50</span><br>         <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<span class="hljs-comment">//自定义线程工厂</span><br>             <span class="hljs-type">int</span> <span class="hljs-variable">threadNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                 <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;线程&quot;</span> + threadNum);<br>                 threadNum++;<br>                 <span class="hljs-keyword">return</span> thread;<br>             &#125;<br>         &#125;,<br>         <span class="hljs-keyword">new</span> <span class="hljs-title class_">RejectedExecutionHandler</span>() &#123;<span class="hljs-comment">//自定义拒绝策略</span><br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;<br>                 System.out.println(r + <span class="hljs-string">&quot;被拒绝了~~&quot;</span>);<br>             &#125;<br>         &#125;<br> );<br><br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br><br>     <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(i);<br>     pool.execute(task);<span class="hljs-comment">//提交给线程池</span><br> &#125;<br><br> <span class="hljs-comment">//关闭线程池</span><br> pool.shutdown();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;任务&quot;</span>+num);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Task&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;num=&quot;</span> + num +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Yh9P4"></a></p><h4 id="6、有返回值的任务类"><a href="#6、有返回值的任务类" class="headerlink" title="6、有返回值的任务类"></a>6、有返回值的任务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] is;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> startIndex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> endIndex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(<span class="hljs-type">int</span>[] is, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> endIndex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.is = is;<br>        <span class="hljs-built_in">this</span>.startIndex = startIndex;<br>        <span class="hljs-built_in">this</span>.endIndex = endIndex;<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt;endIndex ; i++) &#123;<br>                sum+=is[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] is =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">20000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; is.length; i++) &#123;<br>    is[i]=i+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//创建线程池</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10</span>));<br><br><br><span class="hljs-comment">//创建任务</span><br><span class="hljs-type">Task</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(is, <span class="hljs-number">0</span>, <span class="hljs-number">5000</span>);<br><span class="hljs-type">Task</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(is, <span class="hljs-number">5000</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-type">Task</span> <span class="hljs-variable">task3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(is, <span class="hljs-number">10000</span>, <span class="hljs-number">15000</span>);<br><span class="hljs-type">Task</span> <span class="hljs-variable">task4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(is, <span class="hljs-number">15000</span>, <span class="hljs-number">20000</span>);<br><br><span class="hljs-comment">//将任务添加到线程池</span><br>Future&lt;Integer&gt; f1 = pool.submit(task1);<br>Future&lt;Integer&gt; f2 = pool.submit(task2);<br>Future&lt;Integer&gt; f3 = pool.submit(task3);<br>Future&lt;Integer&gt; f4 = pool.submit(task4);<br><br><span class="hljs-type">int</span> result=f1.get()+f2.get()+f3.get()+f4.get();<br>System.out.println(result);<br><br>pool.shutdown();<br></code></pre></td></tr></table></figure><h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><blockquote><p><strong>创建线程的三种方式？</strong></p><p>第一种：通过继承Thread；</p><p>第二种：通过实现Runnable接口；</p><p>第三种：通过实现Callable接口</p><p><strong>区别：</strong></p><ol><li>第一种是通过继承的方式，另外两种是通过实现接口的方式；</li><li>第二种和第三种的区别在于：实现Callable接口的方式重写了call()方法，call()方法可以抛异常，可以在线程执行结束后获取结果，而通过实现Runnable接口的方式重写了run()方法，run()方法不能抛异常，不能返回结果；</li><li>运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</li><li>开发过程中，我们一般会选择通过实现接口的方式创建线程，原因有下面两点：<ol><li>实现的方式没有类的单继承性的局限性；</li><li>实现的方式更适合来处理多个线程的有共享数据的情况</li></ol></li></ol><p><strong>联系：</strong></p><p>都需要重写方法，将线程要执行的逻辑声明在重写的方法中</p></blockquote><blockquote><p><strong>Synchronized 和 lock 区别?</strong></p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-02/7135f3fb838bb84f0507388b3909e293--fb5f--image-20230202151822741.png" alt="image-20230202151822741"></p><p>Synchronized编码更简单，锁机制由JVM维护，在竞争不激烈的情况下性能更好。Lock功能更强大更灵活，竞争激烈时性能较好。</p><ol><li>性能不一样：资源竞争激励的情况下，lock性能会比synchronize好，竞争不激烈的情况下，synchronize比lock性能好，synchronize会根据锁的竞争情况，从偏向锁–&gt;轻量级锁–&gt;重量级锁升级，而且编程更简单。</li><li>锁机制不一样：synchronize是在JVM层面实现的，系统会监控锁的释放与否。lock是JDK代码实现的，需要手动释放，在finally块中释放。可以采用非阻塞的方式获取锁。</li><li>Synchronized的编程更简洁，lock的功能更多更灵活，缺点是一定要在finally里面 unlock()资源才行。</li><li>用法不一样：synchronize可以用在代码块上，方法上。lock只能写在代码里，不能直接修改方法。</li></ol></blockquote><blockquote><p>静态放法中只能调用静态属性（不能调用成员属性），因为如果调用成员变量需要this.成员变量，而静态方法调用是类型.，那类名去调用.this并不能知道this是谁</p></blockquote><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/eb020ad032d9c6abdb5dff2029a8d2ff--b73f--image-20230106174753228.png" alt="image-20230106174753228"></p><h3 id="IO流概述"><a href="#IO流概述" class="headerlink" title="IO流概述"></a>IO流概述</h3><p>IO流：输入输出流(Input&#x2F;Output)<br>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流<br><strong>流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。</strong></p><h5 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a><strong>IO流的分类</strong></h5><p>根据处理数据类型的不同分为：字符流和字节流<br>根据数据流向不同分为：输入流和输出流</p><h3 id="（一）File类"><a href="#（一）File类" class="headerlink" title="（一）File类"></a>（一）File类</h3><h4 id="1、File的基本使用"><a href="#1、File的基本使用" class="headerlink" title="1、File的基本使用"></a>1、File的基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  File -- 文件类</span><br><span class="hljs-comment"> *  File 是文件和目录路径名的抽象表示</span><br><span class="hljs-comment"> *  File类鸟事文件按或文件夹，不能对文件里的数据进行操作</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\lh\\Desktop\\lhjava\\hhy.txt&quot;</span>);<span class="hljs-comment">//在java中是一个\\表示一个\</span><br>System.out.println(<span class="hljs-string">&quot;获取文件名：&quot;</span>+ file.getName());<br>System.out.println(<span class="hljs-string">&quot;获取绝对路径：&quot;</span>+ file.getAbsolutePath());<br>System.out.println(<span class="hljs-string">&quot;是否可读&quot;</span>+ file.canRead());<br>System.out.println(<span class="hljs-string">&quot;是否可写&quot;</span>+ file.canWrite());<br>System.out.println(<span class="hljs-string">&quot;是否可隐藏&quot;</span>+ file.isHidden());<br>System.out.println(<span class="hljs-string">&quot;获取文件大小（字节）&quot;</span>+ file.length());<span class="hljs-comment">//一个数字和一个英文表示一个字节、一个汉字表示两个字节</span><br><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH：mm：ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> sdf.format(file.lastModified());<br>System.out.println(<span class="hljs-string">&quot;获取文件最后修改时间&quot;</span>+ last);<br><br>System.out.println(<span class="hljs-string">&quot;获取父路径的字符串表示：&quot;</span>+ file.getParent());<br><br><span class="hljs-comment">//获取父路径对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> file.getParentFile();<br>System.out.println(<span class="hljs-string">&quot;父路径的字符串表示：&quot;</span>+parentFile.getAbsolutePath());<br><br>System.out.println(<span class="hljs-string">&quot;判断file对象是否是文件：&quot;</span>+ file.isFile());<br>System.out.println(<span class="hljs-string">&quot;判断parentFile对象是否是文件夹&quot;</span>+ parentFile.isDirectory());<br><br><span class="hljs-comment">//获取文件名：hhy.txt</span><br><span class="hljs-comment">//获取绝对路径：C:\Users\lh\Desktop\lhjava\hhy.txt</span><br><span class="hljs-comment">//是否可读true</span><br><span class="hljs-comment">//是否可写true</span><br><span class="hljs-comment">//是否可隐藏false</span><br><span class="hljs-comment">//获取文件大小（字节）15</span><br><span class="hljs-comment">//获取文件最后修改时间2022年12月20日 10：05：37</span><br><span class="hljs-comment">//获取父路径的字符串表示：C:\Users\lh\Desktop\lhjava</span><br><span class="hljs-comment">//父路径的字符串表示：C:\Users\lh\Desktop\lhjava</span><br><span class="hljs-comment">//判断file对象是否是文件：true</span><br><span class="hljs-comment">//判断parentFile对象是否是文件夹true</span><br></code></pre></td></tr></table></figure><p><a name="EI5cV"></a></p><h4 id="2、绝对路径和相对路径"><a href="#2、绝对路径和相对路径" class="headerlink" title="2、绝对路径和相对路径"></a>2、绝对路径和相对路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绝对路径和相对路径</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//绝对路径：指目录下的绝对位置，通常是从盘符开始的路径</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\lh\\Desktop\\hhy.txt&quot;</span>);<br>System.out.println(file.getAbsolutePath());<br><br><span class="hljs-comment">//相对路径：相对于当前项目的路径</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br>System.out.println(file1.getAbsolutePath());<br><br><span class="hljs-comment">//C:\Users\lh\Desktop\hhy.txt</span><br><span class="hljs-comment">//C:\Users\lh\Desktop\lhjava\hhy.txt</span><br></code></pre></td></tr></table></figure><p><a name="Hlw8z"></a></p><h4 id="3、创建目录和文件"><a href="#3、创建目录和文件" class="headerlink" title="3、创建目录和文件"></a>3、创建目录和文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file01\\hello.txt&quot;</span>);<br><br><span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> file.getParentFile();<br><span class="hljs-keyword">if</span>(!parentFile.exists())&#123;<span class="hljs-comment">//如果父目录不存在，则创建</span><br>    parentFile.mkdir();<span class="hljs-comment">//若父路径为多级目录file01\\file02\\file03 则使用mkdirs()创建多级目录</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(!file.exists())&#123;<span class="hljs-comment">//如果文件不存在，则创建</span><br>    file.createNewFile();<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="F95Yw"></a></p><h4 id="4、文件数组"><a href="#4、文件数组" class="headerlink" title="4、文件数组"></a>4、文件数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">      <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\lh\\Documents\\a文档&quot;</span>);<br><br><span class="hljs-comment">//文件名数组</span><br>      String[] list = file.list();<span class="hljs-comment">//将文件内所有文件名都放入数组中</span><br>      <span class="hljs-keyword">for</span> (String s : list) &#123;<br>          System.out.println(s);<br>      &#125;<br><br><span class="hljs-comment">//文件数组</span><br>      File[] files = file.listFiles();<br>      <span class="hljs-keyword">for</span> (File f : files) &#123;<br>          System.out.println(f.getName() + <span class="hljs-string">&quot;--&quot;</span> + f.getAbsolutePath());<br>      &#125;<br><br>      <span class="hljs-comment">//只显示xlsx结尾的文件</span><br>      <span class="hljs-comment">//方式1</span><br>      <span class="hljs-keyword">for</span> (File f : files) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> f.getName();<br>          <span class="hljs-keyword">if</span> ( f.isFile() &amp;&amp; name.endsWith(<span class="hljs-string">&quot;.xlsx&quot;</span>)) &#123;<br>              System.out.println( name+ <span class="hljs-string">&quot;--&quot;</span> + f.getAbsolutePath());<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-comment">//方式2</span><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 将满足过滤器条件的添加进File[]中</span><br><span class="hljs-comment">       */</span><br>      File[] files1=file.listFiles(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilenameFilter</span>() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File dir, String name)</span> &#123;<span class="hljs-comment">//返回false，表示不显示</span><br>              <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, name);<br>              <span class="hljs-keyword">if</span> (f.isFile() &amp;&amp; f.getName().endsWith(<span class="hljs-string">&quot;.xlsx&quot;</span>))&#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>              &#125;<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>          &#125;<br>      &#125;);<br><br>      <span class="hljs-keyword">for</span> (File file1 : files1) &#123;<br>          System.out.println(file1.getName()+<span class="hljs-string">&quot;--&quot;</span>+ file1.getAbsolutePath());<br>      &#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-查找文件"><a href="#5-查找文件" class="headerlink" title="5.查找文件"></a>5.查找文件</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileDemo2</span> &#123;<br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>findFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL&quot;</span> ), <span class="hljs-string">&quot;.md&quot;</span>);<br>&#125;<br><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findFile</span><span class="hljs-params">(File target,String ext)</span>&#123;<br><span class="hljs-keyword">if</span> (target==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (target.isDirectory())&#123;<br>File[] files = target.listFiles();<br><span class="hljs-keyword">if</span> (files!=<span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">for</span> (File f : files) &#123;<br>    findFile(f,ext);<span class="hljs-comment">//递归调用</span><br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> target.getName().toLowerCase();<br><span class="hljs-keyword">if</span> (name.endsWith(ext))&#123;<br> System.out.println(target.getAbsolutePath());<br>&#125;<br>&#125;<br>&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><p><a name="LvgM3"></a></p><h3 id="（二）字节流"><a href="#（二）字节流" class="headerlink" title="（二）字节流"></a>（二）字节流</h3><blockquote><p>2、字节输出流<br>OutputStream类定义<br>public abstract class OutputStream extends Object implements Closeable,Flushable<br>此抽象类是表示输出字节流的所有类的超类。输出流接受输出字节并将这些字节发送到InputStream类某个接收器<br>要向文件中输出，使用FileOutputStream类<br>3、字节输入流<br>定义：<br>public abstract class InputStream extends Object implements Closeable<br>此抽象类是表示字节输入流的所有类的超类。<br>FileInputStream从文件系统中的某个文件中获得输入字节。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671517327895-3186edd9-dde8-481a-8c28-eaf807f16773.png#averageHue=%23d3d0cb&clientId=u3a63760e-2b00-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=463&id=u9403c716&margin=%5Bobject%20Object%5D&name=image.png&originHeight=530&originWidth=1276&originalType=binary&ratio=1&rotation=0&showTitle=false&size=510629&status=done&style=none&taskId=uf044c235-be7c-428a-8a58-c1389752b35&title=&width=1113.5999613813933" alt="image.png"><br><a name="KzFoY"></a></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">package</span> org.example;<br><br>&gt;<span class="hljs-keyword">import</span> java.io.*;<br><br>&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : 字节输入输出流</span><br><span class="hljs-comment">&gt;* 输入流：超类InputStream,对文件的输入流使用子类FileInputStream</span><br><span class="hljs-comment">&gt;* 输出流：超类OutputStream,对文件的输出流使用子类FileOutputStream</span><br><span class="hljs-comment">&gt;*</span><br><span class="hljs-comment">&gt;* 输入输出字节流操作原理。 每次 只会操作一个字节，（从文件中读取或写入）</span><br><span class="hljs-comment">&gt;* 字节操作流，默认每次执行写入操作，会直接把数据写入文件</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Date</span> : 2023/1/3 17:35</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteStreamDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&gt;<span class="hljs-comment">//        out();</span><br>    in();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 0.确定目标文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>);<br>    <span class="hljs-comment">// 1.构建一个文件输入流对象</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// 2.从该文件中读内容</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">int</span> len=-<span class="hljs-number">1</span>;<span class="hljs-comment">//表示每次读取的字节长度</span><br>        <span class="hljs-comment">// 把数据读取到数组中，并返回读取的字节数，当不等于-1时，表示读取到数据，等于-1表示文件已经读完</span><br>        <span class="hljs-keyword">while</span> ((len = in.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//根据读到的字节数组，再转换为字符串内容，添加到StringBuilder中</span><br>            buf.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>&gt;<span class="hljs-comment">//                System.out.println(new String(bytes, 0, len));</span><br>        &#125;<br>        <span class="hljs-comment">//打印内容</span><br>        System.out.println(buf);<br>        <span class="hljs-comment">//关闭输入流</span><br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 0.确定目标文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>);<br>    <span class="hljs-comment">// 1.构建文件输出流对象</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>);<span class="hljs-comment">//append为true表示追加内容</span><br>        <span class="hljs-comment">// 2.输出的内容是</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小河流水哗啦啦\r\n&quot;</span>;<span class="hljs-comment">//  \r\n表示换行</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>);<span class="hljs-comment">//获取换行符</span><br>        <span class="hljs-comment">// 3.把内容写入文件</span><br>        out.write(info.getBytes());<br>        <span class="hljs-comment">// 4.关闭流</span><br>        out.close();<br>        System.out.println(<span class="hljs-string">&quot;write success&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br>&gt;&#125;<br><br></code></pre></td></tr></table></figure></blockquote><h4 id="1、FileOutputStream"><a href="#1、FileOutputStream" class="headerlink" title="1、FileOutputStream"></a>1、FileOutputStream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//1、创建流对象</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br><br>        <span class="hljs-comment">//2、写入数据</span><br><span class="hljs-comment">//        fos.write(97);//写入ASCII</span><br><span class="hljs-comment">//        fos.write(&quot;abcder123&quot;.getBytes());//写入byte数组</span><br>        fos.write(<span class="hljs-string">&quot;helloni&quot;</span>.getBytes());<span class="hljs-comment">//写入byte数组，偏移量，长度</span><br><br>        <span class="hljs-comment">//3、关闭资源</span><br>        fos.close();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//1、创建流对象</span><br>    fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<span class="hljs-comment">//默认覆盖写入数据，new FileOutputStream(&quot;hhy.txt&quot;,true) 为末尾添加写入数据</span><br><br>    <span class="hljs-comment">//2、写入资源</span><br>    fos.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//3、关闭资源</span><br>    <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//避免空指针异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：在输出时，当文件不存在会自动创建文件。</p><p><a name="RB67i"></a></p><h4 id="2、FileInputStream"><a href="#2、FileInputStream" class="headerlink" title="2、FileInputStream"></a>2、FileInputStream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建流对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br><br><span class="hljs-comment">//2、读取数据 + 循环读取</span><br><span class="hljs-comment">//read() 一次读取一个字节，如果读取到文件末尾就返回-1</span><br><span class="hljs-type">int</span> read;<br><span class="hljs-keyword">while</span> ( (read = fis.read()) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.println((<span class="hljs-type">char</span>)read);<br>&#125;<br><br><span class="hljs-comment">//3、关闭资源</span><br>fis.close();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//1、创建流对象</span><br>    fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br><br>    <span class="hljs-comment">//2、读取数据 + 循环的读取 +数组</span><br>    <span class="hljs-comment">//fis.read(bs) 1.读取bs数组长度的数据 2.将数据存入到数组中 3.返回有效长度</span><br>    <span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ( (len = fis.read(bs)) != -<span class="hljs-number">1</span> )&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bs,<span class="hljs-number">0</span>,len));<br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e)&#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> ( fis != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//3、关闭资源</span><br>            fis.close();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> 注意：输入时，输入的文件不存在则会报错。</p><p><a name="pd3rK"></a></p><h4 id="3、拷贝文件"><a href="#3、拷贝文件" class="headerlink" title="3、拷贝文件"></a>3、拷贝文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>);<br><br><span class="hljs-type">int</span> read;<br><span class="hljs-keyword">while</span> ( (read = fis.read()) != -<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//一个字节一个字节读写</span><br>    fos.write(read);<br>&#125;<br>fis.close();<br>fos.close();<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>);<br><br><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> Len;<br><span class="hljs-keyword">while</span> ( (Len = fis.read(bs)) != -<span class="hljs-number">1</span>)&#123;<br>    fos.write(bs,<span class="hljs-number">0</span>,Len);<span class="hljs-comment">//指定写入的数组长度，若将整个数组全写（数组为填满），则会将null值也都写入</span><br>&#125;<br>fis.close();<br>fos.close();<br></code></pre></td></tr></table></figure><h4 id="4、BufferedInputStream和BufferedOutputStream（字节缓冲流）"><a href="#4、BufferedInputStream和BufferedOutputStream（字节缓冲流）" class="headerlink" title="4、BufferedInputStream和BufferedOutputStream（字节缓冲流）"></a>4、BufferedInputStream和BufferedOutputStream（字节缓冲流）</h4><blockquote><p>BufferedInputStream：为另一个输入流添加一些功能，在创建BufferedInputStream时，会创建一个大小为8KB（8192Byte）的内部缓冲区数组，用于缓冲数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用BufferedInputStream和BufferedOutputStream拷贝文件</span><br><span class="hljs-comment"> * BufferedInputStream底层有一个缓存区，当缓存区满了才将数据提交到文件中</span><br><span class="hljs-comment"> * BufferedInputStream(OutputStream os)</span><br><span class="hljs-comment"> * 考虑效率的时候使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>), <span class="hljs-number">2048</span>);<br><span class="hljs-comment">//缓冲区默认大小8192</span><br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>), <span class="hljs-number">2048</span>);<br><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ( (len = bis.read(bs)) !=-<span class="hljs-number">1</span> )&#123;<br>    bos.write(bs,<span class="hljs-number">0</span>,len);<br>&#125;<br><br>bis.close();;<br>bos.close();<br><br></code></pre></td></tr></table></figure><blockquote><p>BufferedOutputStream：通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">package</span> org.example;<br><br>&gt;<span class="hljs-keyword">import</span> java.io.*;<br><br>&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment">&gt;* 缓存的目的：</span><br><span class="hljs-comment">&gt;* 解决在写入文件操作时，频繁的操作文件所带来的性能降低的问题</span><br><span class="hljs-comment">&gt;* BufferOutputStream 内部默认的缓存大小是8KB，每次写入时存储到缓存中的byte数组中，当数组存满时，会把数组中的数据写入文件，并且缓存下标归零</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Date</span> : 2023/1/3 23:08</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferStreamDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&gt;<span class="hljs-comment">//        byteWriter();</span><br>    byteReader();<br>&#125;<br><br><span class="hljs-comment">//写法1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteReader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">//构造一个字节缓冲流（默认8KB=8192Byte）</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(in);<br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len));<br><br>            bis.close();<span class="hljs-comment">//会自动关闭字符流</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//写法2</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteReader2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file))) &#123;<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteWriter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>        <span class="hljs-comment">//构造一个字节缓冲流（默认8KB=8192Byte）</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(out);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小河还是流水哗啦啦&quot;</span>;<br>        bos.write(info.getBytes());<br><br>        bos.close();<br>        <span class="hljs-comment">/*bos.close()方法JDK1.7的新语法try语句块会自动关闭字节流,并刷新</span><br><span class="hljs-comment">        * public void close() throws IOException &#123;</span><br><span class="hljs-comment">            try (OutputStream ostream = out) &#123;</span><br><span class="hljs-comment">                flush();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        * */</span><br>&gt;<span class="hljs-comment">//            out.close();</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><p>字节流应用场景：文字、图片、视频<br><a name="YD5Gv"></a></p><h3 id="（三）字符流（自带缓存）"><a href="#（三）字符流（自带缓存）" class="headerlink" title="（三）字符流（自带缓存）"></a>（三）字符流（自带缓存）</h3><p>字符流的底层实现仍是字节流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Reader 字符输入流的基类（抽象类）<br>    InputStreamReader 字符输入转换流； 若系统给你字节流，你要操作文本文件，则通过此类可以将字节流转换为字符流<br>    FileReader 文件字符输入流；<br>    BufferedReader 带缓冲区的字符输入流； 缓冲区大小 <span class="hljs-number">8192</span>字符 ；操作文本文件，考虑效率时使用该类<br></code></pre></td></tr></table></figure><blockquote><p>Writer – 默认缓存大小为1024<br>写入字符流的抽象类。子类必须实现的方法仅有write(char[],int,int)、flush()和close()。但是，多数子类将重写此处定义的一些方法，以提供更高的效率和&#x2F;或其他功能。<br>与OutputStream一样，对文件的操作使用：FileWriter类完成。</p></blockquote><blockquote><p>Reader<br>用于读取字符流的抽象类。子类必须实现的方法只有read(char[],int,int)和close()。但是，多数子类将重写此处定义的一些方法，以提供更高的效率和&#x2F;或其他功能。<br>使用FileReader类进行实例化操作。</p></blockquote><h4 id="1-FileWriter和FileReader"><a href="#1-FileWriter和FileReader" class="headerlink" title="1.FileWriter和FileReader"></a>1.FileWriter和FileReader</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">package</span> org.example;<br><br>&gt;<span class="hljs-keyword">import</span> sun.security.util.Length;<br><br>&gt;<span class="hljs-keyword">import</span> java.io.*;<br><br>&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment">&gt;* 字符流</span><br><span class="hljs-comment">&gt;* 字符输出流：Writer,对文件的操作使用子类：FileWriter</span><br><span class="hljs-comment">&gt;* 字符输入流：Reader,对文件的操作使用子类：FileReader</span><br><span class="hljs-comment">&gt;* 每次操作单位是一个字符</span><br><span class="hljs-comment">&gt;* 文件字符操作流会自带缓存，默认大小为1024字节，在缓存满后，或手动刷新缓存，或关闭流时会把数据写入文件</span><br><span class="hljs-comment">&gt;*</span><br><span class="hljs-comment">&gt;* 如何选择使用字节流还是字符流：</span><br><span class="hljs-comment">&gt;* 一般操作非文本文件时，使用字节流，操作文本文件时，建议使用字符流</span><br><span class="hljs-comment">&gt;*</span><br><span class="hljs-comment">&gt;* 字符流的内部实现还是字节流</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Date</span> : 2023/1/3 17:51</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharStreamDemo</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>);<br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>    <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">while</span> ((len=in.read(chars))!= -<span class="hljs-number">1</span>)&#123;<br>        buf.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars,<span class="hljs-number">0</span>,len));<br>    &#125;<br>    in.close();<br>    System.out.println(buf);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>);<br>    <span class="hljs-type">Writer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file,<span class="hljs-literal">true</span>);<br>    out.write(<span class="hljs-string">&quot;村姑到我家\r\n&quot;</span>);<br>    out.close();<br>    System.out.println(<span class="hljs-string">&quot;writer success&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>&gt;<span class="hljs-comment">//        out();</span><br>    in();<br>&#125;<br>&gt;&#125;<br><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-BufferedReader和BufferedWriter（字符缓冲流）"><a href="#2-BufferedReader和BufferedWriter（字符缓冲流）" class="headerlink" title="2.BufferedReader和BufferedWriter（字符缓冲流）"></a>2.BufferedReader和BufferedWriter（字符缓冲流）</h4><blockquote><p>BufferedReader：从字符输入流中读取文本，缓冲备个字符，从而实现字符、数组和行的高效读取。<br>BufferedWriter：将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 缓存的目的：</span><br><span class="hljs-comment"> * 解决在写入文件操作时，频繁的操作文件所带来的性能降低的问题</span><br><span class="hljs-comment"> * BufferOutputStream 内部默认的缓存大小是8K，每次写入时存储到缓存中的byte数组中，当数组存满时，会把数组中的数据写入文件，并且缓存下标归零</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 字符流</span><br><span class="hljs-comment"> * 1.加入字符缓冲流，增强读取功能（readLine）</span><br><span class="hljs-comment"> * 2.更高效的读取数据</span><br><span class="hljs-comment"> * FileReader:内部使用InputStreamReader(sun.nio.cs.StreamDecoder)，解码过程，byte-&gt;char,默认缓存大小时8K</span><br><span class="hljs-comment"> * BufferedReader:默认缓存大小是8K，但是可以手动指定缓存大小，把数据直接读取到缓存中，再从缓存中取，减少每次的转换过程，效率更高，因此即使FileReader里已经有了缓存，我们依然使用BufferedReader</span><br><span class="hljs-comment"> * BufferedWriter:同上</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/3 23:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferStreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        byteWriter();</span><br><span class="hljs-comment">//        byteReader();</span><br><span class="hljs-comment">//        charReader();</span><br>        charWriter();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Writer</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>            <span class="hljs-comment">//为字符流提供缓冲，以达到高效读取的目的</span><br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(writer);<br>            bw.write(<span class="hljs-string">&quot;小河流水哗啦啦，寡妇到我家&quot;</span>);<br>            bw.flush();<br>            bw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>            <span class="hljs-comment">//为字符流提供缓冲，以达到高效读取的目的</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br>            System.out.println(br.readLine());<br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((len = br.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars,<span class="hljs-number">0</span>,len));<br>            &#125;<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将字节输入流 -》字符输入转换流-》带有缓冲区的字符输入流</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1、创建流对象</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>)));<br>            <span class="hljs-comment">//BufferedReader() 必须传入Reader类型 br =new BufferedReader(new FileReader(&quot;&quot;));</span><br>            <span class="hljs-comment">//也可以指定缓冲区大小</span><br>            <span class="hljs-comment">//在InputStreamReader中也可以指定字符集</span><br>            <span class="hljs-comment">//在FileInputStream中可以指定是否插入末尾</span><br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>)));<br><br>            <span class="hljs-comment">//2、读取数据+写入数据</span><br>            <span class="hljs-comment">//方式一</span><br><span class="hljs-comment">//            char[] cs = new char[10];</span><br><span class="hljs-comment">//            int len;</span><br><span class="hljs-comment">//            while ( (len = br.read(cs)) != -1)&#123;</span><br><span class="hljs-comment">//                bw.write(cs);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式二</span><br>            String readLine;<br>            <span class="hljs-keyword">while</span> ( (readLine = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                bw.write(readLine);<br>                bw.newLine();<span class="hljs-comment">//换行</span><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//3、关闭资源</span><br>            <span class="hljs-keyword">if</span> ( br != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( bw != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bw.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br><br><br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="Qd7Id"></a></p><h3 id="（四）字节字符转换流"><a href="#（四）字节字符转换流" class="headerlink" title="（四）字节字符转换流"></a>（四）字节字符转换流</h3><blockquote><p>转换流，可以将一个字节流转换为字符流，也可以将一个字符流转换为字节流。<br>OutputStreamWriter：可以将输出的字符流转换为字节流的输出形式<br>InputStreamReader：将输入的字节流转换为字符流输入形式</p></blockquote><h4 id="1-InputStreamReader：将输入的字节流转换为字符流输入形式"><a href="#1-InputStreamReader：将输入的字节流转换为字符流输入形式" class="headerlink" title="1.InputStreamReader：将输入的字节流转换为字符流输入形式"></a>1.InputStreamReader：将输入的字节流转换为字符流输入形式</h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/7c9443b05f60933bafaf00952f1a068f--9be3--image-20230103223241883.png" alt="image-20230103223241883"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>);<br>        read(in);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(InputStream in)</span> &#123;<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in, Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> ((len = reader.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars, <span class="hljs-number">0</span>, len));<br>            &#125;<br>            reader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="2-OutputStreamWriter：可以将输出的字符流转换为字节流的输出形式"><a href="#2-OutputStreamWriter：可以将输出的字符流转换为字节流的输出形式" class="headerlink" title="2.OutputStreamWriter：可以将输出的字符流转换为字节流的输出形式"></a>2.OutputStreamWriter：可以将输出的字符流转换为字节流的输出形式</h4><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/e268b9d223baee38e471aae71f747afd--7829--image-20230103223329462.png" alt="image-20230103223329462"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\hell4.txt&quot;</span>);<br>        writer(out);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">(OutputStream out)</span>&#123;<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(out,Charset.defaultCharset());<br>        <span class="hljs-keyword">try</span> &#123;<br>            writer.write(<span class="hljs-string">&quot;开开心心来玩耍&quot;</span>);<br>            writer.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在代码层面都是字节流封装成字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">      * OutputStreamWriter、InputStreamReader的拷贝，只能用来拷贝文本</span><br><span class="hljs-comment">      * 字符流底层由字节流实现，底层有个编译器 -- 将字符转换为字节</span><br><span class="hljs-comment">      *</span><br><span class="hljs-comment">      */</span><br><br>     <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>     InputStreamReader isr=<span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span>&#123;<br>         <span class="hljs-comment">//1、创建流对象</span><br>         osw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//指定字符集，基础流为OutputStream</span><br>         isr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//指定字符集，基础流为InputStream</span><br><br>         <span class="hljs-comment">//2、读取数据和写入数据</span><br>         <span class="hljs-comment">//按一个一个字符读，使用字符数组加快效率</span><br>         <span class="hljs-type">char</span>[] cs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>         <span class="hljs-type">int</span> len;<br>         <span class="hljs-keyword">while</span> ( (len = isr.read(cs) ) != -<span class="hljs-number">1</span>)&#123;<br>             osw.write(cs);<br>         &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>         e.printStackTrace();<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<span class="hljs-keyword">finally</span> &#123;<br>         <span class="hljs-comment">//3、资源释放</span><br>         <span class="hljs-keyword">if</span> (osw != <span class="hljs-literal">null</span>)&#123;<br>             <span class="hljs-keyword">try</span>&#123;<br>                 osw.close();<br>             &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                 e.printStackTrace();<br>             &#125;<br>         &#125;<br><br>         <span class="hljs-keyword">if</span> (isr != <span class="hljs-literal">null</span>)&#123;<br>             <span class="hljs-keyword">try</span>&#123;<br>                 isr.close();<br>             &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                 e.printStackTrace();<br>             &#125;<br>         &#125;<br><br>     &#125;<br><br></code></pre></td></tr></table></figure><h3 id="字节流与字符流的区别"><a href="#字节流与字符流的区别" class="headerlink" title="字节流与字符流的区别"></a>字节流与字符流的区别</h3><blockquote><p>在所有的流操作里。<strong>字节永远是最基础的</strong>。任何基于字节的操作都是正确的。无论你是文本文件还是二进制的文件。如果确认流里面只有可打印的字符，包括英文的和各种国家的文字，也包括中文，那么可以考虑用字符流。由于编码不同，多字节的字符可能占用多个字节。<strong>比如GBK的汉字就占用2个字节，而UTF-8的汉字就占用3个字节</strong>。所以，字符流是根据指定的编码，将1个或多个字节转化为java里面的unicode的字符，然后进行操作。字符操作一般使用Writer,Reader等，字节操作一般都是:InputStream,OutputStream以及各种包装类，比如BufferedInputStream和BufferedOutputStream等。</p><p><strong>总结</strong>：如果你确认你要处理的流是可打印的字符，那么使用字符流会看上去简单一点。如果不确认，那么用字节流总是不会错的。</p><p>指定一个盘符下的文件，把该文件复制到指定的目录下。</p></blockquote><h3 id="字节流-x2F-字符流-文件复制示例"><a href="#字节流-x2F-字符流-文件复制示例" class="headerlink" title="字节流&#x2F;字符流-文件复制示例"></a>字节流&#x2F;字符流-文件复制示例</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">package</span> org.example;<br><br>&gt;<span class="hljs-keyword">import</span> java.io.*;<br>&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : 文件的复制</span><br><span class="hljs-comment">&gt;* 从一个输入流中读取数据，然后通过输出流写入目标数据</span><br><span class="hljs-comment">&gt;* 一边读一边写</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Date</span> : 2023/1/3 21:55</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&gt;<span class="hljs-comment">//        copyByChar(&quot;D:\\LXL\\hello.txt&quot;, &quot;D:\\LXL\\hello2.txt&quot;, true);</span><br>    copyByByte(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>, <span class="hljs-string">&quot;D:\\LXL\\hello3.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyByByte</span><span class="hljs-params">(String src, String target, Boolean append)</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(src);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(target);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>        out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetFile, append);<br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((len=in.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            out.write(bytes, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;copy success&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (in!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (out!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyByChar</span><span class="hljs-params">(String src, String target, Boolean append)</span> &#123;<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(src);<br>        out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(target, append);<br><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((len = in.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br>            out.write(chars, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        out.close();<br>        in.close();<br><br>        System.out.println(<span class="hljs-string">&quot;copy success&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><p><a name="cigD0"></a></p><h3 id="（五）对象流"><a href="#（五）对象流" class="headerlink" title="（五）对象流"></a>（五）对象流</h3><blockquote><p>对象流的两个类：<br>ObjectOutputStream：将Java对象的基本数据类型和图形写入OutputStream<br>ObjectInputStream：对以前使用ObjectOutputStream写入的基本数据和对象进行反序列化。</p><p>序列化一组对像：<br>在序列化操作中，同时序列化多个对象时，反序列化也必须按顺序操作，如果想要序列化一组对象该如何操作呢？<br><strong>序列化一组对象可采用：对象数组的形式，因为对象数组可以向Objecti进行转型操作。</strong></p><p>transient关键字：<br>如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 如果一个类创建地对象，需要被序列化，那么该类必须实现 Serializable 接口</span><br><span class="hljs-comment"> * Serializable是一个标记接口，没有任何定义，为了告诉JVM该类对象可以被序列化</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 什么时候对象需要被序列化呢？</span><br><span class="hljs-comment"> * 1.把对象保存到文件中(存储到物理介质)</span><br><span class="hljs-comment"> * 2.对象需要在网络上传输时</span><br><span class="hljs-comment"> * 如果对象没有实现Serializable接口，会报错误：java.io.NotSerializableException</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/4 18:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//在序列化中被忽略</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStreamDemo</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 对象系列化(写入一组)</span><br><span class="hljs-comment">     * 把对象写入文件：实际写入的是类名、属性名、属性类型、属性值等</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/4 19:14</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writerObjects</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;汪汪&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;母&quot;</span>);<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;二哈&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;公&quot;</span>);<br>        Dog[] dogs = &#123;dog,dog2&#125;;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out);<br>            oos.writeObject(dogs);<br>            oos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 对象系列化</span><br><span class="hljs-comment">     * 把对象写入文件：实际写入的是类名、属性名、属性类型、属性值等</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/4 19:14</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writerObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;汪汪&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;母&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out);<br>            oos.writeObject(dog);<br>            oos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 反序列化(一组数据)</span><br><span class="hljs-comment">     * 从文件中把对象地内容读取出来，还原成对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/4 19:15</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readerObjects</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>)));<br>            Dog[] dogs = (Dog[]) ois.readObject();<br>            <span class="hljs-keyword">for</span> (Dog dog : dogs) &#123;<br>                System.out.println(dog);<br>            &#125;<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 反序列化</span><br><span class="hljs-comment">     * 从文件中把对象地内容读取出来，还原成对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/4 19:15</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readerObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\dog.obj&quot;</span>)));<br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) ois.readObject();<br>            System.out.println(dog);<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        writerObject();</span><br><span class="hljs-comment">//        readerObject();</span><br><span class="hljs-comment">//        writerObjects();</span><br>        readerObjects();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">对象流：<br>ObjectInputStream --对象输入流<br>ObjectOutputStream --对象输出流<br>理解：<br>序列化：将程序中对象写入到文件中<br>反序列化：将文件中的对象读取到程序中<br>Serializable 称之为序列化接口，一个类的对象将要存入文件中，该类必须实现此接口。该接口没有任何方法，这种接口称之为标记型接口。<br>    <span class="hljs-keyword">transient</span>修饰属性，该属性不会岁对象而写入文件中。<br>    <span class="hljs-keyword">static</span>修饰属性，该属性不会岁对象而写入文件中。<br>    生成serialVersionUID,避免修改类结构后报错<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>    oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;object.txt&quot;</span>));<br>    ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;object.txt&quot;</span>));<br><br>    <span class="hljs-comment">//写入</span><br>    oos.writeInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//写入int值</span><br>    oos.writeDouble(<span class="hljs-number">5.5</span>);<span class="hljs-comment">//写入double值</span><br>    oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//boolean</span><br>    oos.writeUTF(<span class="hljs-string">&quot;你好呀&quot;</span>);<span class="hljs-comment">//写入String</span><br>    oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123455&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>));<span class="hljs-comment">//写入实现序列化的对象</span><br><br>    <span class="hljs-comment">//读取顺序和写入写入顺序要一样</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ois.readInt();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> ois.readDouble();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ois.readBoolean();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ois.readUTF();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>    System.out.println(i+<span class="hljs-string">&quot;--&quot;</span>+v+<span class="hljs-string">&quot;--&quot;</span>+b+<span class="hljs-string">&quot;--&quot;</span>+s+<span class="hljs-string">&quot;--&quot;</span>+o);<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (ois!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>( oos !=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            oos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3317717755379989868L</span>;<span class="hljs-comment">//生成serialVersionUID,避免修改类结构后报错</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String password;<span class="hljs-comment">//transient表示当前属性不会序列化到文件中</span><br>    <span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h3 id="（六）字节数组流-x2F-内存流-在内存中操作"><a href="#（六）字节数组流-x2F-内存流-在内存中操作" class="headerlink" title="（六）字节数组流&#x2F;内存流(在内存中操作)"></a>（六）字节数组流&#x2F;内存流(在内存中操作)</h3><blockquote><p>ByteArrayInputStream<br>包含一个内部缓冲区，该缓冲区包含从流中读取的字节。内部计数器跟踪read方法要提供的下一个字节。<strong>关闭ByteArraylnputStream无效</strong>。<strong>此类中的方法在关闭此流后仍可被调用，而不会产生任何IOException。</strong></p></blockquote><blockquote><p>ByteArrayOutputStream<br>此类实现了一个输出流，其中的数据被写入一个byte数组。<strong>缓冲区会随着数据的不断写入而自动增长</strong>。<strong>可使用toByteArray()和toString()获取数据。****关闭ByteArrayOutputStream无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何IOException。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 字节数组流：</span><br><span class="hljs-comment"> * 基于内存操作，内部维护着一个字节数组，我们可以利用流地读取机制来处理字符串</span><br><span class="hljs-comment"> * 无需关闭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/4 21:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteArrayStreamDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        byteArray();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteArray</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234567890qwertyuiopQWERTYUIOP！@￥%……&amp;*（&quot;</span>;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(s.getBytes());<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<span class="hljs-comment">//默认数组32</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//每次读取的字节</span><br>        <span class="hljs-keyword">while</span> ((curr = bais.read()) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span>((curr&gt;=<span class="hljs-number">65</span>&amp;&amp;curr&lt;=<span class="hljs-number">90</span>)||(curr&gt;=<span class="hljs-number">97</span>&amp;&amp;curr&lt;=<span class="hljs-number">122</span>))&#123;<br>                baos.write(curr);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//此时无需关闭，原因：字节数组流是基于内存的操作流</span><br>        System.out.println(baos.toString());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 内存流</span><br><span class="hljs-comment">  * 将数据保存在堆对象中的buf数组中</span><br><span class="hljs-comment">  * 应用：缓存数据</span><br><span class="hljs-comment">  */</span><br><br> <span class="hljs-comment">//1、创建流对象</span><br> <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br> <span class="hljs-comment">//2、写入数据</span><br> <span class="hljs-comment">//将数据保存在堆对象中的buf数组中</span><br> baos.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br> baos.write(<span class="hljs-string">&quot;12345&quot;</span>.getBytes());<br><br> <span class="hljs-comment">//获取对象中存储的数据</span><br> <span class="hljs-comment">//方式1</span><br> <span class="hljs-type">byte</span>[] bytes = baos.toByteArray();<br> System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br><br> <span class="hljs-comment">//方式2</span><br> System.out.println(baos.toString());<br><br><br> <span class="hljs-comment">//内存流不能关闭资源</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建流对象 并将数据存入</span><br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-string">&quot;abcde&quot;</span>.getBytes());<br><br><span class="hljs-comment">//2、读取数据</span><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ( (len=bais.read(bs)) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bs,<span class="hljs-number">0</span>,len));<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="sox7V"></a></p><h3 id="（七）打印流"><a href="#（七）打印流" class="headerlink" title="（七）打印流"></a>（七）打印流</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671588564450-e4ed5399-2dcf-4ec9-96d3-3b6b1dc33483.png#averageHue=%23f9f9f8&clientId=u9d23b7ec-91b5-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=253&id=uaf797c0a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=290&originWidth=925&originalType=binary&ratio=1&rotation=0&showTitle=false&size=156301&status=done&style=none&taskId=u95a71322-afe8-4cbf-92f9-1c4278b6dea&title=&width=807.272699277264" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字节打印流</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>,<span class="hljs-literal">true</span>));<br>ps.println(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">//字符打印流</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>), <span class="hljs-literal">true</span>);<br>pw.write(<span class="hljs-string">&quot;你好&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重定向</span><br><span class="hljs-comment"> * 重新定义系统标准输入流/输出流/错误输出流的方向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//定义System.in的方向</span><br>System.setIn(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>));<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(scanner.next());<span class="hljs-comment">//获取hhy.txt中第一行数据</span><br>scanner.close();<br><br><span class="hljs-comment">//重新定义System.out的方向</span><br>System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>,<span class="hljs-literal">true</span>)));<br>System.out.println(<span class="hljs-string">&quot;this is out&quot;</span>);<br><br><span class="hljs-comment">//重新定义System.err的方向</span><br>System.setErr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>,<span class="hljs-literal">true</span>)));<br>System.out.println(<span class="hljs-string">&quot;this is err&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 打印流：很方便地进行输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 字节打印流：在字节输出时，可以增强输出功能</span><br><span class="hljs-comment"> * 字符打印流：在字符输出时，可以增强输出功能</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/4 17:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        bytePrint();</span><br>        charPrint();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charPrint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Writer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>            <span class="hljs-comment">//加缓存</span><br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(out);<br>            <span class="hljs-comment">//增强打印</span><br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(bw);<br>            pw.println(<span class="hljs-string">&quot;小河流水天天哈哈哈哈&quot;</span>);<br>            pw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bytePrint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hell5.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-comment">//加缓存</span><br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(out);<br>            <span class="hljs-comment">//增强打印</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(bos);<br>            ps.println(<span class="hljs-string">&quot;小河流水天天&quot;</span>);<br>            ps.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（八）数据流"><a href="#（八）数据流" class="headerlink" title="（八）数据流"></a>（八）数据流</h3><blockquote><p>DatalnputStream:<br>数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本Java数据类型。<strong>应用程序可以使用数据输出流写入，稍后由数据输入流读取的数据。</strong>DataInputStream对于多线程访问不一定是安全的。线程安全是可选的，它由此类方法的使用者负责。<br>DataOutputStream:<br><strong>数据输出流允许应用程序以适当方式将基本Java数据类型写入输出流中</strong>。然后，<strong>应用程序可以使用数据输入流将数据读入</strong>。</p><p>案例：<br>实现文件分割合并。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 数据流</span><br><span class="hljs-comment"> * 与机器无关的操作JAVA的基本数据类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/4 21:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        write();</span><br>        read();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.dat&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(out);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(bos);<br>            dos.writeInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//写入4个字节</span><br>            dos.writeByte(<span class="hljs-number">1</span>);<span class="hljs-comment">//写入1个字节</span><br>            dos.writeUTF(<span class="hljs-string">&quot;中&quot;</span>);<span class="hljs-comment">//写入5个字节</span><br>            dos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.dat&quot;</span>)));<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> dis.readInt();<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> dis.readByte();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> dis.readUTF();<br>            System.out.println(num + <span class="hljs-string">&quot; ,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + s);<br>            dis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例：实现文件的分割合并"><a href="#案例：实现文件的分割合并" class="headerlink" title="案例：实现文件的分割合并"></a>案例：实现文件的分割合并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileDivisionMergeDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 文件的分割</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/5 15:54</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: target 要切割的目标文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: cutSize 每个文件大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">division</span><span class="hljs-params">(File targetFile, <span class="hljs-type">long</span> cutSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (targetFile == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//计算总分割的文件数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> targetFile.length() / cutSize == <span class="hljs-number">0</span> ?<br>                (<span class="hljs-type">int</span>) (targetFile.length() / cutSize) : (<span class="hljs-type">int</span>) (targetFile.length() / cutSize + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//构造文件输入流</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(targetFile));<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(targetFile)));</span><br>            <span class="hljs-comment">//DataOutputStream out = null;</span><br><br><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-literal">null</span>;<span class="hljs-comment">//每次要读取的字节数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//每次实际读取的次数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//每一个文件要读取的次数</span><br><br>            <span class="hljs-comment">//循环次数为生成文件的个数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>                out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\LXL\\&quot;</span> + (i + <span class="hljs-number">1</span>)) + <span class="hljs-string">&quot;-temp-&quot;</span> + targetFile.getName()));<br><br><br>                <span class="hljs-keyword">if</span> (cutSize &lt;= <span class="hljs-number">1024</span>) &#123;<br>                    bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) cutSize];<br>                    count = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                    count = (<span class="hljs-type">int</span>) (cutSize / <span class="hljs-number">1024</span>);<br>                &#125;<br>                <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span> &amp;&amp; (len = in.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//需要先判断count，因为&amp;&amp;是短路，若count放后面判断会多执行一次读操作</span><br>                    out.write(bytes, <span class="hljs-number">0</span>, len);<br>                    out.flush();<br>                    count--;<br>                &#125;<br>                <span class="hljs-comment">//计算每个文件大小除以1024的余数，来决定是否要再读取一次</span><br>                <span class="hljs-keyword">if</span> (cutSize % <span class="hljs-number">1024</span> != <span class="hljs-number">0</span>) &#123;<br>                    bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) (cutSize % <span class="hljs-number">1024</span>)];<br>                    len = in.read(bytes);<br>                    out.write(bytes, <span class="hljs-number">0</span>, len);<br>                    out.flush();<br>                    out.close();<br>                &#125;<br>            &#125;<br>            in.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 文件的合并</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/5 16:44</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: es</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(Enumeration&lt;InputStream&gt; es)</span> &#123;<br>        <span class="hljs-comment">//构造一个合并流</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SequenceInputStream</span> <span class="hljs-variable">sis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceInputStream</span>(es);<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\瑞吉外卖项目-合并.rar&quot;</span>));<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((len = sis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            bos.close();<br>            sis.close();<br>            System.out.println(<span class="hljs-string">&quot;合并完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        File file = new File(&quot;D:\\LXL\\1 瑞吉外卖项目.rar&quot;);</span><br><span class="hljs-comment">//        division(file, 1024 * 1024 * 20);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\1-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\2-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\3-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\4-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\5-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\6-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\7-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\8-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\9-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\10-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\11-temp-1 瑞吉外卖项目.rar&quot;</span>);<br><br>            <span class="hljs-comment">//集合工具类，内部实现使用了数组</span><br>            <span class="hljs-type">Vector</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>            v.add(in1);<br>            v.add(in2);<br>            v.add(in3);<br>            v.add(in4);<br>            v.add(in5);<br>            v.add(in6);<br>            v.add(in7);<br>            v.add(in8);<br>            v.add(in9);<br>            v.add(in10);<br>            v.add(in11);<br><br>            Enumeration&lt;InputStream&gt; es = v.elements();<br>            merge(es);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（九）合并流"><a href="#（九）合并流" class="headerlink" title="（九）合并流"></a>（九）合并流</h3><blockquote><p>合并流：<br>SequenceInputStream 表示其他输入流的逻辑串联。它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，依次类推，直到到达包含的最后一个输入流的文件未尾为止。</p><p>需要使用Enumeration读取文件输入流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//构造一个合并流</span><br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\1-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\2-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\3-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\4-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\5-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\6-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\7-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\8-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\9-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\10-temp-1 瑞吉外卖项目.rar&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\11-temp-1 瑞吉外卖项目.rar&quot;</span>);<br><br>            <span class="hljs-comment">//集合工具类，内部实现使用了数组</span><br>            <span class="hljs-type">Vector</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>            v.add(in1);<br>            v.add(in2);<br>            v.add(in3);<br>            v.add(in4);<br>            v.add(in5);<br>            v.add(in6);<br>            v.add(in7);<br>            v.add(in8);<br>            v.add(in9);<br>            v.add(in10);<br>            v.add(in11);<br><br>            Enumeration&lt;InputStream&gt; es = v.elements();<br>            <span class="hljs-type">SequenceInputStream</span> <span class="hljs-variable">sis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceInputStream</span>(es);<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\LXL\\瑞吉外卖项目-合并.rar&quot;</span>));<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((len = sis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            bos.close();<br>            sis.close();<br>            System.out.println(<span class="hljs-string">&quot;合并完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="（十）字符串流"><a href="#（十）字符串流" class="headerlink" title="（十）字符串流"></a>（十）字符串流</h3><blockquote><p>I、StringReader<br>其源为一个字符串的字符流。<br>2、StringWriter<br>一个字符流，可以用其回收在字符串缓冲区中的输出来构造字符串。关闭StringWriter无效。此类中的方法在关闭该流后仍可被调用，而不会产生任何IOException。—— 与机器无关</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.StreamTokenizer;<br><span class="hljs-keyword">import</span> java.io.StringReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 字符串流</span><br><span class="hljs-comment"> * 字符串流：一一个字符串为数据源，来构造一个字符流</span><br><span class="hljs-comment"> * 作用：在WEB开发中，我们经常要从服务器上获取数据，数据的返回格式通常是一个字符串（XML，JSON），我们需要把这个字符串构造成一个字符流</span><br><span class="hljs-comment"> * 然后再用第三方的数据解析器来解析数据。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/5 17:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringStreamDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 计算单词的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/5 18:08</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stringReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good good study day day up&quot;</span>;<br>        <span class="hljs-type">StringReader</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(info);<br>        <span class="hljs-comment">//流标记器</span><br>        <span class="hljs-type">StreamTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamTokenizer</span>(sr);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (st.ttype != StreamTokenizer.TT_EOF) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (st.nextToken() == StreamTokenizer.TT_WORD) &#123;<br>                    count++;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>        sr.close();<br>        System.out.println(<span class="hljs-string">&quot;count = &quot;</span> + count);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        stringReader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（十一）管道流"><a href="#（十一）管道流" class="headerlink" title="（十一）管道流"></a>（十一）管道流</h3><blockquote><p>管道输入流应该连接到管道输出流；管道输入流提供要写入管道输出流的所有数据字节。通常，数据由某个线程从PipedInputStream对象读取，并由其他线程将其写入到相应的PipedOutputStream。<strong>不建议对这两个对象尝试使用单个线程，因为这样可能死锁线程</strong>。管道输入流包含一个缓冲区，可在缓冲区限定的范围内将读操作和写操作分离开。如果向连接管道输出流提供数据字节的线程不再存在，则认为该管道已损坏。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PipedInputStream;<br><span class="hljs-keyword">import</span> java.io.PipedOutputStream;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * 管道流测试：一个线程写入，一个线程读取</span><br><span class="hljs-comment"> * 作用：用于线程之间的数据通讯</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/5 19:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PipedStreamDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PipedInputStream</span> <span class="hljs-variable">pin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PipedInputStream</span>();<br>        <span class="hljs-type">PipedOutputStream</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PipedOutputStream</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            pin.connect(pos);<span class="hljs-comment">//两个管道进行链接</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-comment">//输入流与输出流连接</span><br>        <span class="hljs-type">ReadThread</span> <span class="hljs-variable">readThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadThread</span>(pin);<br>        <span class="hljs-type">WriteThread</span> <span class="hljs-variable">writeThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteThread</span>(pos);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(readThread).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(writeThread).start();<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//读取数据的线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> PipedInputStream pin;<span class="hljs-comment">//输入管道（默认大小1024）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadThread</span><span class="hljs-params">(PipedInputStream pin)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pin = pin;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> pin.read(bytes);<span class="hljs-comment">//read阻塞</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len);<br>            System.out.println(<span class="hljs-string">&quot;读到：&quot;</span>+s);<br>            pin.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//写入数据的线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> PipedOutputStream pout; <span class="hljs-comment">//输出管道</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WriteThread</span><span class="hljs-params">(PipedOutputStream pout)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pout = pout;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            pout.write(<span class="hljs-string">&quot;一个美女。。。&quot;</span>.getBytes(Charset.defaultCharset()));<span class="hljs-comment">//管道输出流</span><br>            pout.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（十二）RandomAccessFile-工具类-随机访问流"><a href="#（十二）RandomAccessFile-工具类-随机访问流" class="headerlink" title="（十二）RandomAccessFile 工具类(随机访问流)"></a>（十二）RandomAccessFile 工具类(随机访问流)</h3><blockquote><p>RandomAccessFile是IO包的类，从Object直接继承而来。只可以对文件进行操作，可以对文件进行读取和写入。<br>当模式r时，若文件不存在时会报异常，当模式为rw时，若文件不存在时，会自己动创建文件，当文件已经存在时不会对原有文件进行覆盖。</p><p>RandomAccessFile有强大的文件读写功能，其内部是大型byte[],可以通过seek(),getFilePointer()等方法操作的指针，方便对数据进行写入与读取。还可以对基本数据类型进行直接的读和写操作。</p></blockquote><blockquote><p>RandomAccessFile的绝大多数功能，已经被JDK1.4的nio的“内存映射文件(memory-mapped files)”给取代了，你该考虑一下是不是用“内存映射文件”来代替RandomAccessFile了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 随机访问流</span><br><span class="hljs-comment">       * 含义：该留认为文件就是一个大型的byte数组，该流有一个隐藏的指针，指针默认从0开始（可以设置指针位置），可以从指针的位置开始读写.</span><br><span class="hljs-comment">       * 一个字节一个下标</span><br><span class="hljs-comment">       * mos: r -读</span><br><span class="hljs-comment">       *    rw - 读写</span><br><span class="hljs-comment">       */</span><br><br>      <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br>      <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>);<br>      <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;rw&quot;</span>);<br>      <span class="hljs-comment">//设置指针,即每次从上一次截至的地方开始读写</span><br>      r.seek(file.length());<br>      rw.seek(file.length());<br><br>      <span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>      <span class="hljs-type">int</span> len;<br>      <span class="hljs-keyword">while</span> ( (len = r.read(bs)) != -<span class="hljs-number">1</span>)&#123;<br>          rw.write(bs,<span class="hljs-number">0</span>,len);<br>      &#125;<br><br>      r.close();<br>      rw.close();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现复制文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//读取文件</span><br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;D:\\LXL\\hello.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-comment">//写入文件</span><br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;D:\\LXL\\hello_w.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((len = r.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            rw.write(bytes, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        rw.close();<br>        r.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;copy success&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="（十三）Properties"><a href="#（十三）Properties" class="headerlink" title="（十三）Properties"></a>（十三）Properties</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">package</span> org.example;<br><br>&gt;<span class="hljs-keyword">import</span> java.io.*;<br>&gt;<span class="hljs-keyword">import</span> java.util.Properties;<br><br>&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment">&gt;* Properties：</span><br><span class="hljs-comment">&gt;* properties可以用来做配置文件</span><br><span class="hljs-comment">&gt;* javaweb javaee开发中通常会用到</span><br><span class="hljs-comment">&gt;* &lt;p&gt;</span><br><span class="hljs-comment">&gt;* ResouceBundle 只读</span><br><span class="hljs-comment">&gt;* Properties 可读可写</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Date</span> : 2023/1/5 21:04</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesDemo</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>    readConfig();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&gt;<span class="hljs-comment">//        writeConfig(&quot;lxl&quot;, &quot;nb&quot;);</span><br>&gt;<span class="hljs-comment">//        readConfig();</span><br>    System.out.println(PropertiesDemo.username);<br>    System.out.println(PropertiesDemo.password);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 对属性文件的写入操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/5 21:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: password</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeConfig</span><span class="hljs-params">(String username,String password)</span>&#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    p.put(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    p.put(<span class="hljs-string">&quot;password&quot;</span>, password);<br><br>    <span class="hljs-comment">//写文件</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IODemo/config.properties&quot;</span>);<br>        p.store(out,<span class="hljs-string">&quot;update config&quot;</span>);<br>        out.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 读取properties配置文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/5 21:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readConfig</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//通过当前线程的类加载器对象，来加载指定包下的配置文件</span><br>&gt;<span class="hljs-comment">//            InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;&quot;);</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IODemo/config.properties&quot;</span>);<br>        properties.load(inputStream);<span class="hljs-comment">//加载文件</span><br><br>        <span class="hljs-comment">//从properties中获取数据</span><br>        username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        inputStream.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Properties 配置文件类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//创建配置文件对象</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br><span class="hljs-comment">//将配置文件加载到配置文件对象中，加载默认在src中加载（路径不要加src）</span><br>properties.load(Test01.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;PropertiesTest/mysql.properties&quot;</span>));<br><br><span class="hljs-comment">//获取配置文件中的数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;username=&quot;</span>+username+<span class="hljs-string">&quot;, password=&quot;</span>+password);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用Properties对象读取properties文件中的内容</span><br><br>properties文件中的内容：<br>username=lh<br>password=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p><a name="BBpmB"></a></p><h3 id="（十四）压缩-x2F-解压缩流"><a href="#（十四）压缩-x2F-解压缩流" class="headerlink" title="（十四）压缩&#x2F;解压缩流"></a>（十四）压缩&#x2F;解压缩流</h3><blockquote><p>java中实现zip的压缩与解压缩</p><p><strong>ZipOutputStream</strong><br>实现文件的压缩<br>ZipOutputStream(OutputStream out)<br>    创建新的ZIP输出流。<br>void putNextEntry(ZipEntry e)<br>    开始写入新的ZP文件条目并将流定位到条目数据的开始处。<br>ZipEntry(String name)<br>    使用指定名称创建新的ZP条目。</p></blockquote><blockquote><p><strong>ZiplnputStream</strong><br>实现文件的解压<br>ZipInputStream(InputStream in)<br>    创建新的ZIP输入流。<br>ZipEntry getNextEntry()<br>    读取下一个ZP文件条目并将流定位到该条目数据的开始处。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipInputStream;<br><span class="hljs-keyword">import</span> java.util.zip.ZipOutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 文件压缩与解压缩</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/6 14:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZipStreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        compression(&quot;D:\\LXL\\test.zip&quot;, new File(&quot;D:\\LXL\\hello.txt&quot;));</span><br>        decompress(<span class="hljs-string">&quot;D:\\LXL\\test.zip&quot;</span>,<span class="hljs-string">&quot;D:\\LXL\\test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 压缩</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/6 14:51</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: zipFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: targetFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compression</span><span class="hljs-params">(String zipFileName, File targetFile)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正在压缩。。。&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//要生成的压缩文件</span><br>            <span class="hljs-type">ZipOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(zipFileName));<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(out);<br>            zip(out, targetFile, targetFile.getName(), bos);<br>            bos.close();<br>            out.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;压缩完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//zip</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zip</span><span class="hljs-params">(ZipOutputStream zOut, File targetFile, String name, BufferedOutputStream bos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (targetFile.isDirectory()) &#123;<br>            File[] files = targetFile.listFiles();<br>            <span class="hljs-keyword">if</span> (files.length == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//空文件夹</span><br>                zOut.putNextEntry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipEntry</span>(name + <span class="hljs-string">&quot;/&quot;</span>));<span class="hljs-comment">//处理空目录</span><br>            &#125;<br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<br>                zip(zOut, f, name + <span class="hljs-string">&quot;/&quot;</span> + f.getName(), bos);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            zOut.putNextEntry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipEntry</span>(name));<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(targetFile);<br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(in);<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            bis.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 解压缩</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/6 17:41</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: targetFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: parent</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decompress</span><span class="hljs-params">(String targetFileName, String parent)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//构建解压的输入流</span><br>            <span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(targetFileName));<br><br>            <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((entry = zIn.getNextEntry()) != <span class="hljs-literal">null</span> &amp;&amp; !entry.isDirectory()) &#123;<br>                file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent,entry.getName());<br>                <span class="hljs-keyword">if</span> (!file.exists())&#123;<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getParent()).mkdirs(); <span class="hljs-comment">//创建此文件的上级目录</span><br>                &#125;<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(out);<br>                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> ((len = zIn.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>                    bos.write(bytes, <span class="hljs-number">0</span>, len);<br>                &#125;<br>                bos.close();<br>                System.out.println(file.getAbsolutePath()+<span class="hljs-string">&quot;解压成功&quot;</span>);<br>            &#125;<br>            zIn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（十五）NewIO"><a href="#（十五）NewIO" class="headerlink" title="（十五）NewIO"></a>（十五）NewIO</h3><h4 id="1、为什么要使用NIo"><a href="#1、为什么要使用NIo" class="headerlink" title="1、为什么要使用NIo?"></a>1、为什么要使用NIo?</h4><blockquote><p>NIO是JDK1.4加入的新包，NIO的创建目的是为了让Java程序员可以实现高速I&#x2F;O而无需编写自定义的本机代码。<br>NIO将最耗时的I&#x2F;O操作（即填充和提取缓冲区）转移回操作系统，因而可以极大地提高速度。</p></blockquote><h5 id="流与块的比较"><a href="#流与块的比较" class="headerlink" title="流与块的比较"></a>流与块的比较</h5><blockquote><p>原来的I&#x2F;O库（在java.io.*中）与NIO最重要的区别是数据打包和传输的方式，原来的I&#x2F;O以流的方式处理数据，而NIO以块的方式处理数据。<br>面向流的I&#x2F;O系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。<br>不利的一面是，面向流的I&#x2F;O通常相当慢。<br>一个面向块的I&#x2F;O系统以块的形式处理数据。每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按（流式的字节处理数据要快得多。但是面向块的I&#x2F;O缺少一些面向流的I&#x2F;O所具有的优雅性和简单性。</p></blockquote><h5 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h5><blockquote><p>在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接到缓冲区中的。在写入数据时，它是写入到缓冲区中的。任何时候访问NIO中的数据，您都是将它放到缓冲区中。<br><strong>缓冲区实质上是一个数组</strong>。通常它是一个字节数组，但是也可以使用其他种类的数组。但是一个缓冲区不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读&#x2F;写进程。</p></blockquote><h5 id="缓冲区类型"><a href="#缓冲区类型" class="headerlink" title="缓冲区类型"></a>缓冲区类型</h5><blockquote><p>最常用的缓冲区类型是ByteBuffer。一个ByteBuffer可以在其底层字节数组上进行get&#x2F;set操作（即字节的获取和设置)。ByteBuffer.不是NIO中唯一的缓冲区类型。事实上，对于每一种基本Java类型都有一种缓冲区类型：</p><p>ByteBuffer<br>CharBuffer<br>ShortBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/1514d76fc9ab38160339bbe85f3164ef--46ad--image-20230106224811849.png" alt="image-20230106224811849"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.nio;<br><br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NIODemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个字节缓冲区，申请空间为8字节</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">8</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;position=&quot;</span> + buf.position()); <span class="hljs-comment">//position=0</span><br>        System.out.println(<span class="hljs-string">&quot;limit=&quot;</span> + buf.limit());<span class="hljs-comment">//limit=8</span><br>        System.out.println(<span class="hljs-string">&quot;capacity=&quot;</span> + buf.capacity());<span class="hljs-comment">//capacity=8</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//向缓冲区中，写入数据</span><br>        buf.put((<span class="hljs-type">byte</span>) <span class="hljs-number">10</span>);<br>        buf.put((<span class="hljs-type">byte</span>) <span class="hljs-number">20</span>);<br>        buf.put((<span class="hljs-type">byte</span>) <span class="hljs-number">30</span>);<br>        buf.put((<span class="hljs-type">byte</span>) <span class="hljs-number">40</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;position=&quot;</span> + buf.position());<span class="hljs-comment">//position=4</span><br>        System.out.println(<span class="hljs-string">&quot;limit=&quot;</span> + buf.limit());<span class="hljs-comment">//limit=8</span><br>        System.out.println(<span class="hljs-string">&quot;capacity=&quot;</span> + buf.capacity());<span class="hljs-comment">//capacity=8</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br><br><br>        <span class="hljs-comment">//缓冲区反转</span><br>        buf.flip();<span class="hljs-comment">//将limit置为position,position置为0</span><br>        System.out.println(<span class="hljs-string">&quot;position=&quot;</span> + buf.position());<span class="hljs-comment">//position=0</span><br>        System.out.println(<span class="hljs-string">&quot;limit=&quot;</span> + buf.limit());<span class="hljs-comment">//limit=4</span><br>        System.out.println(<span class="hljs-string">&quot;capacity=&quot;</span> + buf.capacity());<span class="hljs-comment">//capacity=8</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        buf.hasRemaining();//告知在当前位置和限制之间是否有元素</span><br>        <span class="hljs-keyword">if</span> (buf.hasRemaining())&#123;<br><span class="hljs-comment">//        buf.remaining();//返回当前位置与限制之间的元素数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;buf.remaining(); i++)&#123;<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> buf.get(i);<br>                System.out.println(b);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;position=&quot;</span> + buf.position());<span class="hljs-comment">//position=0</span><br>        System.out.println(<span class="hljs-string">&quot;limit=&quot;</span> + buf.limit());<span class="hljs-comment">//limit=4</span><br>        System.out.println(<span class="hljs-string">&quot;capacity=&quot;</span> + buf.capacity());<span class="hljs-comment">//capacity=8</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>使用原因：<img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/c98ff87fdb34b2d05e96b7611fb23642--8054--image-20230106183555518.png" alt="image-20230106183555518"></p><blockquote><p>意图：<br>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。该模式以对客户端透明的方式扩展对象的功能。</p><p>适用环境<br>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。<br>处理那些可以撤消的职责。<br>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/4fb7f05744e0f9b2d099df780c1d2ede--44f8--image-20230106183805594.png" alt="image-20230106183805594"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/d1217aee4f8357582e32ed342a7786ab--6442--image-20230106191214638.png" alt="image-20230106191214638"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><br><span class="hljs-comment">//被装饰着的接口（基类）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Drink</span> &#123;<br><br>    <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<span class="hljs-comment">//计算价格</span><br>    String <span class="hljs-title function_">description</span><span class="hljs-params">()</span>;<span class="hljs-comment">//描述</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 装饰者的基类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/6 18:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Drink</span>&#123;<br>    <span class="hljs-keyword">private</span> Drink drink;<span class="hljs-comment">//要装饰的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decorator</span><span class="hljs-params">(Drink drink)</span>&#123;<br>        <span class="hljs-built_in">this</span>.drink = drink;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> drink.cost();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> drink.description();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 具体的被装饰者类——豆浆</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/6 18:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoyaBeanMilk</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Drink</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10f</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;纯豆浆&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 具体的被装饰者类——豆浆</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/6 18:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlackBeanDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlackBeanDecorator</span><span class="hljs-params">(Drink drink)</span> &#123;<br>        <span class="hljs-built_in">super</span>(drink);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.description()+<span class="hljs-string">&quot;+黑豆&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost()+<span class="hljs-number">2.0f</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EggDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EggDecorator</span><span class="hljs-params">(Drink drink)</span> &#123;<br>        <span class="hljs-built_in">super</span>(drink);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost()+<span class="hljs-number">3.0f</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.description()+<span class="hljs-string">&quot;+鸡蛋&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 具体的装饰者类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/6 18:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SugarDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SugarDecorator</span><span class="hljs-params">(Drink drink)</span> &#123;<br>        <span class="hljs-built_in">super</span>(drink);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost()+<span class="hljs-number">1.0f</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.description()+<span class="hljs-string">&quot;+糖&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//        OutputStream out = new FileOutputStream(&quot;xxx&quot;);</span><br><span class="hljs-comment">//        BufferedOutputStream bos = new BufferedOutputStream(out);</span><br><span class="hljs-comment">//        PrintStream ps = new PrintStream(bos);</span><br><span class="hljs-comment">//        ps.println(...);</span><br><br>        <span class="hljs-type">Drink</span> <span class="hljs-variable">drink</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoyaBeanMilk</span>();<br>        <span class="hljs-type">SugarDecorator</span> <span class="hljs-variable">sugarDecorator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(drink);<br>        <span class="hljs-type">EggDecorator</span> <span class="hljs-variable">eggDecorator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EggDecorator</span>(sugarDecorator);<br>        <span class="hljs-type">BlackBeanDecorator</span> <span class="hljs-variable">blackBeanDecorator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlackBeanDecorator</span>(eggDecorator);<br><br>        System.out.println(<span class="hljs-string">&quot;您点的豆浆是：&quot;</span>+blackBeanDecorator.description());<br>        System.out.println(<span class="hljs-string">&quot;总共花费：&quot;</span>+blackBeanDecorator.cost()+<span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="装饰者模式小结："><a href="#装饰者模式小结：" class="headerlink" title="装饰者模式小结："></a>装饰者模式小结：</h3><blockquote><p>O0原则：<strong>动态地将责任附加到对象上</strong>。想要扩展功能，装饰者提供有别于继承的另一种选择。<br>要点：<br>1、继承属于扩展形式之一，但不见得是达到弹性设计的最佳方案。<br>2、在我们的设计中，应该允许行为可以被扩展，而不须修改现有的代码。<br>3、组合和委托可用于在运行时动态地加上新的行为。<br>4、除了继承，装饰者模式也可以让我们扩展行为。<br>5、装饰者模式意味着一群装饰者类，这些类用来包装具体组件。<br>6、装饰者类反映出被装饰的组件类型（实际上，他们具有相同的类型，都经过接口或继承实现)。<br>7、装饰者可以在被装饰者的行为前面与&#x2F;或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。<br>8、你可以有无数个装饰者包装一个组件。<br>9、装饰者一般对组建的客户是透明的，除非客户程序依赖于组件的具体类型。</p></blockquote><h2 id="常见的字符编码"><a href="#常见的字符编码" class="headerlink" title="常见的字符编码"></a>常见的字符编码</h2><p>常见的编码有：ISO8859-1、GBK &#x2F;GB2312、unicode、UTF</p><p>ISO8859-1:</p><p>​编码属于单字节编码，最多只能表示0-255的字符范围，主要在英文上应用。</p><p>GBK&#x2F;GB2312：</p><p>​中文的国际编码，专门用来表示汉字，是双字节编码</p><p>unicode:</p><p>​java中就是使用此编码格式，也是最标准的一种编码，是使用16进制表示的编码。但此编码不兼容iso8859-1编码。</p><p>UTF：</p><p>​由于unicode不支持iso8859-1编码，而且容易占用更多的空间，而且对于英文字母也需使用两个字节编码，这样使用unicode不便于传输和储存，因此产生了utf编码，utf编码兼容了iso8859-1编码，也可以用来表示所有语言字符，不过utf是不定长编码，每个字符的长度从1-6个字节不等，一般在中文网页中使用此编码，因为这样可以节省空间。</p><p>造成乱码的根本原因：</p><p>1、程序使用的编码与本机的编码不统一</p><p>2、在网络中，客户端与服务端编码不统一（WEB开发中出现的乱码情况）</p><hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>TCP：传输控制协议，三次握手，面向连接的协议</p><p>UDP：数据报协议，发送数据包</p><p>数据帧格式简单图例：<img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/792366f4a154f46d98fd44f8964840df--8abc--image-20230110192915453.png" alt="image-20230110192915453"></p><p><a name="PtvaJ"></a></p><h3 id="（一）InetAddress主机类"><a href="#（一）InetAddress主机类" class="headerlink" title="（一）InetAddress主机类"></a>（一）InetAddress主机类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * InetAddress  主机类</span><br><span class="hljs-comment">  */</span><br><br> <span class="hljs-comment">//获取域名对应的服务器地址</span><br> <span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br> System.out.println(inetAddress);<br> <span class="hljs-comment">//www.baidu.com/14.215.177.38</span><br><br> <span class="hljs-comment">//获取到域名对应的所有服务器地址</span><br> InetAddress[] allByName = InetAddress.getAllByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br> <span class="hljs-keyword">for</span> (InetAddress address : allByName) &#123;<br>     System.out.println(address);<br> &#125;<br> <span class="hljs-comment">//www.baidu.com/14.215.177.38</span><br> <span class="hljs-comment">//www.baidu.com/14.215.177.39</span><br><br> <span class="hljs-comment">//获取本机的地址</span><br> <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br> System.out.println(localHost);<br> <span class="hljs-comment">//LAPTOP-MMB6LRVJ/192.168.106.1</span><br></code></pre></td></tr></table></figure><p><a name="OFTlq"></a></p><h3 id="（二）TCP通信"><a href="#（二）TCP通信" class="headerlink" title="（二）TCP通信"></a>（二）TCP通信</h3><p><a name="qYPu4"></a></p><p><strong>Socket是网络驱动层提供给应用程序编程的接口和一种机制</strong></p><h4 id="TCP实现ECHO程序"><a href="#TCP实现ECHO程序" class="headerlink" title="TCP实现ECHO程序"></a>TCP实现ECHO程序</h4><blockquote><p>Eco,意为应答，程序的功能是客户端向服务器发送一个字符串，服务器不做任何处理，直接把字符串返回给客户端，Echo程序是最为基本的客户&#x2F;服务器程序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Echo server</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/10 20:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个服务器端的Socket(1024-65535)</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>            System.out.println(<span class="hljs-string">&quot;服务器已启动，正在等待客户端的连接...&quot;</span>);<br>            <span class="hljs-comment">//等待客户端的连接，造成阻塞，如果有客户端连接成功，立即返回一个Socket对象</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br>            System.out.println(<span class="hljs-string">&quot;客户端连接成功：&quot;</span>+server.getInetAddress().getHostAddress());<br>            <span class="hljs-comment">//为了方便读取，使用字符缓冲流包装</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>            <span class="hljs-comment">//通过输入流读取网络数据,如果没有数据，那么会阻塞</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> br.readLine();<br>            System.out.println(info);<br>            <span class="hljs-comment">//获取输出流，向客户端返回消息</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream()));<br>            ps.println(<span class="hljs-string">&quot;echo:&quot;</span>+info);<br>            ps.flush();<br>            <span class="hljs-comment">//关闭</span><br>            ps.close();<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Echo client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/10 21:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoClientDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个Socket对象，指定要连接的服务器</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>);<br>            <span class="hljs-comment">//获取socket的输入</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream()));<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br><br>            ps.println(<span class="hljs-string">&quot;hello，my name is Bin&quot;</span>);<br>            ps.flush();<br>            <span class="hljs-comment">//读取服务器端返回的数据</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> br.readLine();<br>            System.out.println(info);<br>            ps.close();<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1、Socket（相当于“快递员”）"><a href="#1、Socket（相当于“快递员”）" class="headerlink" title="1、Socket（相当于“快递员”）"></a>1、Socket（相当于“快递员”）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Socket中的重要内容</span><br><span class="hljs-comment"> *  new ServerSocket(8080); 服务器指定通信端口</span><br><span class="hljs-comment"> *  server.accept(); 服务器等待访问</span><br><span class="hljs-comment"> *  socket.getInputStream() 服务器通过输入流接收数据</span><br><span class="hljs-comment"> *  socket.getOutputStream() 服务器通过输出流发送数据给客户端</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  new Socket(&quot;127.0.0.1&quot;, 8080); 客户端指定服务器ip地址和端口</span><br><span class="hljs-comment"> *  socket.getOutputStream() 客户端通过输出流发送数据给服务器</span><br><span class="hljs-comment"> *  socket.getInputStream() 客户端通过输入流接收数据</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建ServerSocket 指定端口号</span><br> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br> System.out.println(<span class="hljs-string">&quot;服务器等待客户端的连接！&quot;</span>);<br><br> <span class="hljs-comment">//等待连接，线程阻塞的一个方法，直到客户端连接，才会创建一个Socket与之交互</span><br> <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br><br> <span class="hljs-comment">//使用流来接收客户端的信息</span><br> <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br> System.out.println(s);<br><br> <span class="hljs-comment">//服务端向客户端发送信息</span><br> <span class="hljs-type">PrintStream</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br> pw.println(<span class="hljs-string">&quot;18号技师&quot;</span>);<br><br> <span class="hljs-comment">//关闭流等于关闭socket</span><br> br.close();<br> pw.close();<br> server.close();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建访问的服务器的socket对象，指定的ip和端口。</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br>ps.println(<span class="hljs-string">&quot;：你好&quot;</span>);<br><br><span class="hljs-comment">//接收来自服务器的信息</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>System.out.println(s);<br><br><span class="hljs-comment">//关闭资源</span><br>ps.close();<br>br.close();<br>socket.close();<br></code></pre></td></tr></table></figure><p><a name="HOJk5"></a></p><h4 id="2、传输文件"><a href="#2、传输文件" class="headerlink" title="2、传输文件"></a>2、传输文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br><br><span class="hljs-comment">//接收来自客户端的数据，写入本地文件中</span><br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copy.txt&quot;</span>));<br><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ( (len =bis.read(bs)) != -<span class="hljs-number">1</span>)&#123;<br>    bos.write(bs,<span class="hljs-number">0</span>,len);<br>&#125;<br><br>bis.close();<br>bos.close();<br>server.close();<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br><span class="hljs-comment">//读取源文件，读一点，往服务器端写一点</span><br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hhy.txt&quot;</span>));<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ( (len = bis.read(bs)) != -<span class="hljs-number">1</span>)&#123;<br>    bos.write(bs,<span class="hljs-number">0</span>,len);<br>&#125;<br><br>bis.close();<br>bos.close();<br>socket.close();<br></code></pre></td></tr></table></figure><p><a name="jw5kh"></a></p><h4 id="3、一对一聊天"><a href="#3、一对一聊天" class="headerlink" title="3、一对一聊天"></a>3、一对一聊天</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br><br><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-comment">//接收</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>    System.out.println(readLine);<br><br>    <span class="hljs-comment">//发送</span><br>    ps.println(<span class="hljs-string">&quot;18号技师：&quot;</span>+scanner.next());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-comment">//发送消息</span><br>    ps.println(<span class="hljs-string">&quot;马小龙：&quot;</span>+scanner.next());<br><br>    <span class="hljs-comment">//接收消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>    System.out.println(readLine);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KSUzl"></a></p><h4 id="4、优化一对一聊天"><a href="#4、优化一对一聊天" class="headerlink" title="4、优化一对一聊天"></a>4、优化一对一聊天</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br><br><span class="hljs-comment">//接收并打印信息</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveThread</span>(socket).start();<br><br><span class="hljs-comment">//发送信息</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    ps.println(<span class="hljs-string">&quot;18号技师：&quot;</span>+scanner.next());<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br><span class="hljs-comment">//接收信息并打印</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveThread</span>(socket).start();<br><br><span class="hljs-comment">//发送信息</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    ps.println(<span class="hljs-string">&quot;马小龙：&quot;</span>+scanner.next());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReceiveThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//字符输入流</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>                System.out.println(readLine);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ygEpR"></a></p><h4 id="5、群聊"><a href="#5、群聊" class="headerlink" title="5、群聊"></a>5、群聊</h4><p>多客户端之间的通信，使用服务器作为中转消息站，这是把消息集中处理的解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;String,Socket&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br>            <br>            <span class="hljs-comment">//获取客户端ip</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> socket.getInetAddress().toString();<br>            <span class="hljs-comment">//将访问的客户端的ip和对应的socket保存在map中</span><br>            map.put(ip,socket);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br><br><span class="hljs-comment">//接收</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReserveThread</span>(socket).start();<br><br><span class="hljs-comment">//发送</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    ps.println(<span class="hljs-string">&quot;小红：&quot;</span>+scanner.next());<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//接收当前Socket的消息</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>                System.out.println(readLine);<br><br>                <span class="hljs-comment">//</span><br>                ConcurrentHashMap&lt;String, Socket&gt; map = Server.map;<br>                Set&lt;Map.Entry&lt;String, Socket&gt;&gt; entries = map.entrySet();<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Socket&gt; entry : entries) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>                    <span class="hljs-type">Socket</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>                    <span class="hljs-keyword">if</span>(!key.equals(socket.getInetAddress().toString()))&#123;<br>                        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(value.getOutputStream());<br>                        ps.println(readLine);<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReserveThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReserveThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>                System.out.println(readLine);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl.communication;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 消息包</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/11 18:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String from;<span class="hljs-comment">//发送者</span><br>    <span class="hljs-keyword">private</span> String to;<span class="hljs-comment">//接收者</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> type;<span class="hljs-comment">//消息类型</span><br>    <span class="hljs-keyword">private</span> String info;<span class="hljs-comment">//消息</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(String from, String to, <span class="hljs-type">int</span> type, String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.from = from;<br>        <span class="hljs-built_in">this</span>.to = to;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFrom</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> from;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFrom</span><span class="hljs-params">(String from)</span> &#123;<br>        <span class="hljs-built_in">this</span>.from = from;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> to;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTo</span><span class="hljs-params">(String to)</span> &#123;<br>        <span class="hljs-built_in">this</span>.to = to;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Message&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;from=&#x27;&quot;</span> + from + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, to=&#x27;&quot;</span> + to + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, type=&quot;</span> + type +<br>                <span class="hljs-string">&quot;, info=&#x27;&quot;</span> + info + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl.communication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 消息类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/11 18:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_LOGIN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x1</span>;<span class="hljs-comment">//登陆消息类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SEND</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x2</span>;<span class="hljs-comment">//发送消息类型</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl.communication;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 服务器端(中传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/11 13:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//保存客户端处理的线程</span><br>        Vector&lt;UserThread&gt; vector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//创建服务器端的socket</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>            System.out.println(<span class="hljs-string">&quot;服务器已启动，正在等待连接...&quot;</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br>                <span class="hljs-type">UserThread</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserThread</span>(socket, vector);<br>                es.execute(user);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端处理的线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//客户端的用户名称（唯一）</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> Vector&lt;UserThread&gt; vector;<span class="hljs-comment">//客户端处理线程的集合</span><br>    <span class="hljs-keyword">private</span> ObjectInputStream ois;<br>    <span class="hljs-keyword">private</span> ObjectOutputStream oos;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserThread</span><span class="hljs-params">(Socket socket, Vector&lt;UserThread&gt; vector)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.vector = vector;<br>        vector.add(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;客户端&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="hljs-string">&quot;已连接&quot;</span>);<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br><br>            <span class="hljs-keyword">while</span> (flag) &#123;<br>                <span class="hljs-comment">//读取消息对象</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> msg.getType();<br>                <span class="hljs-keyword">switch</span> (type) &#123;<br>                    <span class="hljs-keyword">case</span> MessageType.TYPE_SEND:<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> msg.getTo();<br>                        UserThread ut;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> vector.size();<br><br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                            ut = vector.get(i);<br>                            <span class="hljs-keyword">if</span> (to.equals(ut.name) &amp;&amp; ut != <span class="hljs-built_in">this</span>) &#123;<br>                                ut.oos.writeObject(msg);<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> MessageType.TYPE_LOGIN:<br>                        name = msg.getFrom();<br>                        msg.setInfo(<span class="hljs-string">&quot;欢迎你&quot;</span>);<br>                        oos.writeObject(msg);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            ois.close();<br>            oos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lxl.communication;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 客户端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> : 2023/1/11 13:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>);<br>            System.out.println(<span class="hljs-string">&quot;服务器连接成功&quot;</span>);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-comment">//向服务器发送登录信息</span><br>            System.out.println(<span class="hljs-string">&quot;请输入名称：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> input.nextLine();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(name, <span class="hljs-literal">null</span>, MessageType.TYPE_LOGIN, <span class="hljs-literal">null</span>);<br>            oos.writeObject(msg);<br>            msg = (Message) ois.readObject();<br>            System.out.println(msg.getInfo() + msg.getFrom());<br>            <span class="hljs-comment">//启动读取消息的线程</span><br>            es.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadInfoThread</span>(ois));<br>            <span class="hljs-comment">//使用主线程来实现发送消息</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">while</span> (flag) &#123;<br>                msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                System.out.println(<span class="hljs-string">&quot;To:&quot;</span>);<br>                msg.setTo(input.nextLine());<br>                msg.setFrom(name);<br>                msg.setType(MessageType.TYPE_SEND);<br>                System.out.println(<span class="hljs-string">&quot;Info:&quot;</span>);<br>                msg.setInfo(input.nextLine());<br>                oos.writeObject(msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadInfoThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> ObjectInputStream in;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadInfoThread</span><span class="hljs-params">(ObjectInputStream in)</span> &#123;<br>        <span class="hljs-built_in">this</span>.in = in;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFlag</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (flag) &#123;<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) in.readObject();<br>                System.out.println(<span class="hljs-string">&quot;【&quot;</span> + message.getFrom() + <span class="hljs-string">&quot;】对我说：&quot;</span> + message.getInfo());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>                in.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="dcyrp"></a></p><h3 id="（三）UDP通信"><a href="#（三）UDP通信" class="headerlink" title="（三）UDP通信"></a>（三）UDP通信</h3><p><a name="IjTQv"></a></p><h4 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、设置当前客户端端口</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">7070</span>);<br><br><span class="hljs-comment">//2、发送数据</span><br><span class="hljs-comment">//数据</span><br><span class="hljs-type">byte</span>[] buf = <span class="hljs-string">&quot;你好世界！&quot;</span>.getBytes();<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, <span class="hljs-number">0</span>, buf.length, InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span>);<span class="hljs-comment">//数据报包</span><br>socket.send(packet);<span class="hljs-comment">//发送</span><br><br><span class="hljs-comment">//3、接收数据</span><br>buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, <span class="hljs-number">0</span>, buf.length);<br>socket.receive(packet);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf).trim());<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建socket 设置端口</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8080</span>);<br><br><span class="hljs-comment">//2、接收数据</span><br><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bs, <span class="hljs-number">0</span>, bs.length);<br>socket.receive(packet);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bs).trim());<br><br><span class="hljs-comment">//3、发送数据</span><br>bs=<span class="hljs-string">&quot;nice to you!&quot;</span>.getBytes();<br>packet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bs,<span class="hljs-number">0</span>,bs.length, InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">7070</span>);<br>socket.send(packet);<span class="hljs-comment">//发送</span><br></code></pre></td></tr></table></figure><p><a name="F8Kbk"></a></p><h4 id="2、一对一聊天"><a href="#2、一对一聊天" class="headerlink" title="2、一对一聊天"></a>2、一对一聊天</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">7070</span>);<br><br><span class="hljs-comment">//接收和发送</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveThread</span>(socket).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span>(socket,<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8080</span>,<span class="hljs-string">&quot;小红&quot;</span>).start();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8080</span>);<br><br><span class="hljs-comment">//接收和发送</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveThread</span>(socket).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span>(socket,<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">7070</span>,<span class="hljs-string">&quot;小绿&quot;</span>).start();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">private</span> DatagramSocket socket;<br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendThread</span><span class="hljs-params">(DatagramSocket socket, String ip, <span class="hljs-type">int</span> port, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.ip = ip;<br>        <span class="hljs-built_in">this</span>.port = port;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">byte</span>[] buf = (name +<span class="hljs-string">&quot;:&quot;</span>+scanner.next()).getBytes();<span class="hljs-comment">//数据</span><br>            DatagramPacket p;<br>            <span class="hljs-keyword">try</span> &#123;<br>                p =<span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf,<span class="hljs-number">0</span>,buf.length, InetAddress.getByName(ip),port);<br>                socket.send(p);<span class="hljs-comment">//发送信息</span><br>            &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">private</span> DatagramSocket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReceiveThread</span><span class="hljs-params">(DatagramSocket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, <span class="hljs-number">0</span>, buf.length);<br>            <span class="hljs-keyword">try</span>&#123;<br>                socket.receive(packet);<span class="hljs-comment">//接收</span><br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf).trim());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="rOgZM"></a></p><h4 id="3、TCP和UDP的区别"><a href="#3、TCP和UDP的区别" class="headerlink" title="3、TCP和UDP的区别"></a>3、TCP和UDP的区别</h4><p>TCP三次握手 四次挥手<br />TCP面向连接、传输可靠、传输大量数据、速度慢；应用场景：文件下载<br />UDP无面向连接、传输不可靠、少量数据、快；应用场景：视频会议、语言</p><h3 id="（四）URL"><a href="#（四）URL" class="headerlink" title="（四）URL"></a>（四）URL</h3><p>URL是统一资源定位符，是互联网上标准资源的地址。而互联网上的每个文件都有唯一的一个URL</p><h3 id="（五）MINA框架"><a href="#（五）MINA框架" class="headerlink" title="（五）MINA框架"></a>（五）MINA框架</h3><p>Mina框架可以帮助我们快速开发高性能、高扩展性的网络通信应用，Mina提供了事件驱动、异步操作的编程模型，默认使用NIO作为底层支持</p><blockquote><p>1、什么是MINA？一句话就是：<strong>一个简洁易用的基于TCP&#x2F;IP通信的JAVA框架。</strong><br>2、下载地址：http:&#x2F;mina.apache.org&#x2F;downloads-mina.html<br>3、一个简单的网络程序需要的最少jar包：mina-core-2.0.16.jar、sf4j-api-1.7.21.jar<br>4、开发一个Mia应用，简单的说，就是创建连结，设定过滤规则，编写自己的消息处理器<br>5、示例：</p><p>（1）编写服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//创建一个非阻塞的Server端Socket,用NIO</span><br>&gt;SocketAcceptor acceptor=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioS</span>(sketAcceptor():/创建接收数据的过滤器<br>&gt;DefaultloFilterChainBuilder chain acceptor.getFilterChain();<br>&gt;<span class="hljs-comment">//设定这个过滤器将一行一行(/r/n)的读取数据</span><br>&gt;chain.addLast(<span class="hljs-string">&quot;myChin&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolCodecFilter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextLineCodecFactory</span>()));<br>&gt;<span class="hljs-comment">//设定服务器端的消息处理器：一个SampleMinaServerHandler对象</span><br>&gt;acceptor.setHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SampleMinaServerHandler</span>());<br>&gt;<span class="hljs-type">int</span> bindPort <span class="hljs-number">9999</span>;<br>&gt;<span class="hljs-comment">//绑定端口，启动服务器</span><br>&gt;<span class="hljs-keyword">try</span> [acceptor.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(bindPort));<br>&gt;<span class="hljs-keyword">catch</span> (IOException e)fe.printstackTrace();&#125;<br>&gt;System.out.printin(<span class="hljs-string">&quot;Mina Server is Listing on:=&quot;</span>+bindPort);<br></code></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : MINAServer</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@createDate</span> : 2023/1/14 20:04</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MINAServer</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建一个非阻塞的Server端Socket,用NIO</span><br>      <span class="hljs-type">SocketAcceptor</span> <span class="hljs-variable">acceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioSocketAcceptor</span>();<span class="hljs-comment">//创建接受数据的过滤器</span><br>      <span class="hljs-type">DefaultIoFilterChainBuilder</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> acceptor.getFilterChain();<br>      <span class="hljs-comment">//设定这个过滤器将一行一行（/r/n）的读取出来</span><br>      chain.addLast(<span class="hljs-string">&quot;myChain&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolCodecFilter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextLineCodecFactory</span>()));<br>      <span class="hljs-comment">//设定服务器端的消息处理器：一个SampleMinaServerHandler对象</span><br>      acceptor.setHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SampleMinaServerHandler</span>());<br>      <span class="hljs-type">int</span> <span class="hljs-variable">bindPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999</span>;<br>      <span class="hljs-comment">//绑定端口，启动服务器(不会阻塞，立即返回)</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          acceptor.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(bindPort));<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;Mina server listening on:=&quot;</span>+bindPort);<br>  &#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : SampleMinaServerHandler</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@createDate</span> : 2023/1/15 13:15</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleMinaServerHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IoHandlerAdapter</span> &#123;<br> <span class="hljs-comment">//一次会话被打开</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionOpened</span><span class="hljs-params">(IoSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.sessionOpened(session);<br>     System.out.println(<span class="hljs-string">&quot;welcome:&quot;</span>+session.getRemoteAddress());<br> &#125;<br><br> <span class="hljs-comment">//会话关闭</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionClosed</span><span class="hljs-params">(IoSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.sessionClosed(session);<br>     System.out.println(<span class="hljs-string">&quot;client closed&quot;</span>);<br> &#125;<br><br> <span class="hljs-comment">//接收消息</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageReceived</span><span class="hljs-params">(IoSession session, Object message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.messageReceived(session, message);<br>     System.out.println(<span class="hljs-string">&quot;正在接收消息...&quot;</span>);<br>     <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> (String) message;<br>     System.out.println(<span class="hljs-string">&quot;收到客户端发来的消息：&quot;</span>+msg);<br>     <span class="hljs-comment">//向客户端发送消息对象</span><br>     session.write(<span class="hljs-string">&quot;echo:&quot;</span>+msg);<br> &#125;<br><br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>（2）编写客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;NioSocketConnector connector=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioSocketConnector</span>();/创建接收数据的过滤器<br>&gt;<span class="hljs-type">DefaultloFilterChainBuilder</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> connector.getFilterChain();<br>&gt;<span class="hljs-comment">//设定这个过滤器将一行一行(/r/n)的读取数据</span><br>&gt;chain.addLast(<span class="hljs-string">&quot;myChain&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolCodecFilter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextLineCodecFactory</span>()));<br>&gt;<span class="hljs-comment">//设定服务器端的消息处理器：一个SamplMinaServerHandler对象</span><br>&gt;connector.setHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SampleMinaClientHandler</span>());<br>&gt;connector.setConnectTimeout(<span class="hljs-number">30</span>);<span class="hljs-comment">//Set connect timeout.</span><br>&gt;<span class="hljs-comment">//连结到服务器：</span><br>&gt;<span class="hljs-type">ConnectFuture</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> connector.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9999</span>))<br>&gt;<span class="hljs-comment">//Wait for the connection attempt to be finished.</span><br>&gt;cf.awaitUninterruptibly();<br>&gt;<span class="hljs-comment">//发送消息</span><br>&gt;<span class="hljs-comment">//cf.getSession().getCloseFuture().awaitUninterruptibly();</span><br>&gt;<span class="hljs-comment">//connector.dispose();</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : MINAClient</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@createDate</span> : 2023/1/15 21:12</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MINAClient</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">NioSocketConnector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioSocketConnector</span>();<span class="hljs-comment">//创建接受数据的过滤器</span><br>     <span class="hljs-type">DefaultIoFilterChainBuilder</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> connector.getFilterChain();<br>     <span class="hljs-comment">//设定这个过滤器将一行一行（/r/n）的读取数据</span><br>     chain.addLast(<span class="hljs-string">&quot;myChain&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolCodecFilter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextLineCodecFactory</span>()));<br>     <span class="hljs-comment">//设定客户端的消息处理器：一个MinaClientHandler对象</span><br>     connector.setHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MinaClientHandler</span>());<br>     connector.setConnectTimeout(<span class="hljs-number">10000</span>);<span class="hljs-comment">//设置连接超时</span><br>     <span class="hljs-type">ConnectFuture</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> connector.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9999</span>));<br>     <span class="hljs-comment">//等待连接尝试完成。</span><br>     cf.awaitUninterruptibly();<br>     <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>     <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;请输入：&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> input.nextLine();<br>         <span class="hljs-comment">//发送信息</span><br>         cf.getSession().write(info);<br>     &#125;<br>     <span class="hljs-comment">//等待服务器连接关闭，结束长连接</span><br>&gt;<span class="hljs-comment">//        cf.getSession().getCloseFuture().awaitUninterruptibly();</span><br>&gt;<span class="hljs-comment">//        connector.dispose();</span><br> &#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Description</span> : MinaClientHandler</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@createDate</span> : 2023/1/15 21:30</span><br><span class="hljs-comment">&gt;* <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment">&gt;**/</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinaClientHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IoHandlerAdapter</span> &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionOpened</span><span class="hljs-params">(IoSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.sessionOpened(session);<br>     System.out.println(<span class="hljs-string">&quot;sessionOpened&quot;</span>);<br> &#125;<br><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionClosed</span><span class="hljs-params">(IoSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.sessionClosed(session);<br>     System.out.println(<span class="hljs-string">&quot;sessionClosed&quot;</span>);<br> &#125;<br><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageReceived</span><span class="hljs-params">(IoSession session, Object message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-built_in">super</span>.messageReceived(session, message);<br>     System.out.println((String) message);<br> &#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>也可以一对象的方式进行数据传输ObjectSerializationCodecFactory()</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><a name="uoBpV"></a></p><h3 id="（一）内置注解"><a href="#（一）内置注解" class="headerlink" title="（一）内置注解"></a>（一）内置注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>:定义在java.lang.Override中，此注解只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明<br><span class="hljs-meta">@Deprecated</span>:定义在java.lang.Deprecated中.此注解可以用于修饰方法，属性，类。表示不鼓励使用这样的元素.通常是因为它很危险或者存在更好的选择.<br><span class="hljs-meta">@SuppressWarnings</span>:镇压警告，定义在java.lang.SuppressWarnings中用来抑制编译时的警告信息，与前两个注释有所不同.你需要添加参数才能正确使用。<br>这些参数都是已经定义好了的.我们选择性的使用就好了<br>SuppressWarnings(<span class="hljs-string">&quot;al1&quot;</span>)抑制所有类型的警告信息<br><span class="hljs-meta">@SuppressWarnings(&quot;mchecked&quot;)</span>抑制单类型的警告信息<br><span class="hljs-meta">@SuppressWarnings(value=(&quot;unchecked&quot;,&quot;deprecation1&quot;))</span>抑制多类型的警告信息   <br></code></pre></td></tr></table></figure><p><a name="sWtIe"></a></p><h3 id="（二）元注解"><a href="#（二）元注解" class="headerlink" title="（二）元注解"></a>（二）元注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">元注解的作用：负责注解其他注解.<br>Java定义了<span class="hljs-number">4</span>个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明<br>这些类型和它们所支持的类在java.lang.annotation包中可以找到(<span class="hljs-meta">@Target</span>,CRetention,Documented,<span class="hljs-meta">@Inherited</span>)<br><span class="hljs-meta">@Target</span>:用于措述注解的使用范围（即：被措述的注解可以用在什么地方）<br><span class="hljs-meta">@Retention</span>:表示需要要在什么级别保存该注择信息，用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)<br><span class="hljs-meta">@Document</span>:说明该注解将被包含在javadoc中。<br><span class="hljs-meta">@lnherited</span>:.说明子类可以继承父类中的该注解。<br></code></pre></td></tr></table></figure><p><a name="Me3rZ"></a></p><h3 id="（三）自定义注解"><a href="#（三）自定义注解" class="headerlink" title="（三）自定义注解"></a>（三）自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.FIELD,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//指定注解能在哪里使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//指定注解的作用范围</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">//定义注解参数</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">info</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;--&quot;</span>;<span class="hljs-comment">//可以指定参数的默认值</span><br><br>    String[] hobbies();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用注解：通过 参数=”参数值“ 来给参数赋值</span><br> <span class="hljs-comment">//当注解只有一个参数value时，可以不用加value=</span><br> <span class="hljs-meta">@MyAnnotation(value = &quot;lh&quot;,hobbies = &#123;&quot;写代码&quot;,&quot;拍电影&quot;&#125;)</span><br> String str;<br><br></code></pre></td></tr></table></figure><p><a name="WvaCQ"></a></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>把类信息映射成对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">当我们使用一个类时，JVM会把该类的class文件加载到方法区（只会创建一次），并在堆中创建一个该类的class对象（也只会创建一次）。<br>该类的class对象作为该类的class文件的访问入口。<br>class文件中包含了该类所有的代码。<br>反射就是获取到该类的class对象，意味着你可以对该类所有的内容进行操作。<br></code></pre></td></tr></table></figure><blockquote><p>什么是类对象？</p><p>类的对象：基于某个类new出来的对象，也称为实例对象。</p><p>类对象：类加载的产物，封装了一个类的所有信息（类名、父类、接口、属性、方法、构造方法）</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-04/e935d49874cf6b87331128aa4a1d6f28--4d81--image-20230204135546710.png" alt="image-20230204135546710"></p></blockquote><h3 id="（一）获取Class对象"><a href="#（一）获取Class对象" class="headerlink" title="（一）获取Class对象"></a>（一）获取Class对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、通过类获取</span><br>Class&lt;Student&gt; studentClass01 = Student.class;<br>System.out.println(studentClass01);<br><br><span class="hljs-comment">//2、通过对象获取</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&gt; studentClass02 = student.getClass();<br>System.out.println(studentClass02);<br><br><span class="hljs-comment">//3、通过全类名获取</span><br>Class&lt;?&gt; stringClass = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>System.out.println(stringClass);<br></code></pre></td></tr></table></figure><p><a name="SFHdC"></a></p><h3 id="（二）操作属性"><a href="#（二）操作属性" class="headerlink" title="（二）操作属性"></a>（二）操作属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Student&gt; studentClass01 = Student.class;<br><br><span class="hljs-comment">//获取本类及其父类公有属性对象数组</span><br>Field[] fields = studentClass01.getFields();<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>    System.out.println(field);<br>&#125;<br><br><span class="hljs-comment">//获取本类所有的属性对象数组</span><br>Field[] declaredFields = studentClass01.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>    System.out.println(declaredField);<br>&#125;<br><br><br><span class="hljs-comment">//获取本类及其父类所有的属性对象</span><br><span class="hljs-keyword">for</span> (Class&lt;?&gt; c= studentClass01;c!=<span class="hljs-literal">null</span>;c=c.getSuperclass())&#123;<br>    Field[] f = c.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field field : f) &#123;<br>        System.out.println(field);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类——返回属性对象和操作属性对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectUtil</span> &#123;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过名字获取属性对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz class对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 属性名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 属性对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(Class&lt;?&gt; clazz,String name)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; c=clazz;c!=<span class="hljs-literal">null</span>;c=c.getSuperclass())&#123;<br>            Field[] fields = c.getDeclaredFields();<br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-keyword">if</span>(field.getName().equals(name))&#123;<br>                    <span class="hljs-keyword">return</span> field;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过属性名字设置属性内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj 要设置的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 设置的属性名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 设置的属性内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否设置成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj,String name,Object value)</span>&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), name);<br>        <span class="hljs-keyword">if</span>(field!=<span class="hljs-literal">null</span>)&#123;<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">try</span>&#123;<br>                field.set(obj,value);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, id=&#x27;&quot;</span> + id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取属性对象</span><br>Class&lt;Student&gt; studentClass = Student.class;<br><span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ReflectUtil.getField(studentClass, <span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(name);<br><span class="hljs-comment">//private java.lang.String ReflexTest.Student.name</span><br><br><span class="hljs-comment">//设置属性对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>ReflectUtil.setField(student,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>);<br>ReflectUtil.setField(student,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>ReflectUtil.setField(student,<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;202215&quot;</span>);<br>System.out.println(student);<br><br></code></pre></td></tr></table></figure><p>判断属性性质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> ReflectUtil.getField(studentClass, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> nameField.getModifiers();<span class="hljs-comment">//获取属性性质值</span><br>System.out.println(Modifier.isPrivate(modifiers));<span class="hljs-comment">//true</span><br>System.out.println(Modifier.isStatic(modifiers));<span class="hljs-comment">//false</span><br>System.out.println(Modifier.isAbstract(modifiers));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p><a name="y38m7"></a></p><h3 id="（三）操作构造器"><a href="#（三）操作构造器" class="headerlink" title="（三）操作构造器"></a>（三）操作构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Student.class;<br><br><span class="hljs-comment">//获取到该类的公有构造器对象数组</span><br>Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>    System.out.println(constructor);<br>&#125;<br><br><span class="hljs-comment">//获取到该类的所有构造器对象数组</span><br>Constructor&lt;?&gt;[] declaredConstructors = clazz.getDeclaredConstructors();<br><span class="hljs-keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;<br>    System.out.println(declaredConstructor);<br>&#125;<br><br><span class="hljs-comment">//获取无参构造器对象并创建初始化一个对象</span><br>Constructor&lt;?&gt; declaredConstructor = clazz.getDeclaredConstructor();<br>declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置修改权限</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>(Student) declaredConstructor.newInstance();<span class="hljs-comment">//创建对象</span><br>System.out.println(o);<br><br><span class="hljs-comment">//获取有参构造器并创建初始化一个对象</span><br>Constructor&lt;?&gt; declaredConstructor1 = clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class, String.class);<br>declaredConstructor1.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">lh</span> <span class="hljs-operator">=</span>(Student) declaredConstructor1.newInstance(<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2213&quot;</span>);<br>System.out.println(lh);<br><br><span class="hljs-comment">//获取构造器参数个数和参数类型</span><br><span class="hljs-comment">//获取参数个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> declaredConstructor1.getParameterCount();<br>System.out.println(<span class="hljs-string">&quot;构造器的参数个数：&quot;</span>+count);<br><span class="hljs-comment">//获取参数类型</span><br>Class&lt;?&gt;[] parameterTypes = declaredConstructor1.getParameterTypes();<br><span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>    System.out.println(parameterType);<br>&#125;<br><span class="hljs-comment">//获取参数对象</span><br>Parameter[] parameters = declaredConstructor1.getParameters();<br><span class="hljs-keyword">for</span> (Parameter parameter : parameters) &#123;<br>    Class&lt;?&gt; type = parameter.getType();<span class="hljs-comment">//获取参数类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> parameter.getName();<span class="hljs-comment">//获取参数名字 以arg0、arg1、arg2的形式</span><br>    System.out.println(type+<span class="hljs-string">&quot;--&quot;</span>+name);<br>&#125;<br><br><br><span class="hljs-comment">//使用工具类创建对象 --无参构造器</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> ReflectUtil.newInstance(Student.class);<br>System.out.println(student);<br><br><span class="hljs-comment">//使用工具类创建对象 --有参构造器</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">lh1</span> <span class="hljs-operator">=</span> ReflectUtil.newInstance(Student.class, <span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2213&quot;</span>);<br>System.out.println(lh1);<br></code></pre></td></tr></table></figure><p>工具类 -无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用无参构造器创建对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz class对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回创建的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span>&#123;<br>    T t=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        t = clazz.newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类-有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 使用有参构造器创建对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> clazz class对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> params 形参</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回对象</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz,Object... params)</span>&#123;<br>      Class&lt;?&gt;[] paramTypes = getParamTypes(params);<br><br>      T t=<span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span>&#123;<br>          Constructor&lt;T&gt; declaredConstructor = clazz.getDeclaredConstructor(paramTypes);<br>          declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>          t=declaredConstructor.newInstance(params);<br>      &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>          e.printStackTrace();<br>      &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>          e.printStackTrace();<br>      &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>          e.printStackTrace();<br>      &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class="hljs-keyword">return</span> t;<br>  &#125;<br></code></pre></td></tr></table></figure><p>参数类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 将包装类转换为基本数据类型</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> params 参数数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 返回对应的基本数据类型数组</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt;[] getParamTypes(Object... params)&#123;<br><br>       Class&lt;?&gt;[] paramTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[params.length];<br><br>       <span class="hljs-comment">//将若参数类型有包装类，则将包装类转为为对应的基本类型</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>           Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; c = params[i].getClass();<br>           <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Character&quot;</span>))&#123;<br>               c =<span class="hljs-type">char</span>.class;<br>           &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Boolean&quot;</span>))&#123;<br>               c =<span class="hljs-type">boolean</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Integer&quot;</span>))&#123;<br>               c =<span class="hljs-type">int</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Byte&quot;</span>))&#123;<br>               c =<span class="hljs-type">byte</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Short&quot;</span>))&#123;<br>               c =<span class="hljs-type">short</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Long&quot;</span>))&#123;<br>               c =<span class="hljs-type">long</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Float&quot;</span>))&#123;<br>               c =<span class="hljs-type">float</span>.class;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c.getName().equals(<span class="hljs-string">&quot;java.lang.Double&quot;</span>))&#123;<br>               c =<span class="hljs-type">double</span>.class;<br>           &#125;<br>           paramTypes[i] = c;<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> paramTypes;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a name="ST0Ee"></a></p><h3 id="（四）操作方法"><a href="#（四）操作方法" class="headerlink" title="（四）操作方法"></a>（四）操作方法</h3><p>基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Student&gt; studentClass = Student.class;<br><br><span class="hljs-comment">//获取本类及其父类共有的方法对象的数组</span><br>Method[] methods = studentClass.getMethods();<br><span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>    System.out.println(method);<br>&#125;<br><br><span class="hljs-comment">//获取本类所有的方法对象的数组</span><br>Method[] methods1 = studentClass.getDeclaredMethods();<br><span class="hljs-keyword">for</span> (Method method : methods1) &#123;<br>    System.out.println(method);<br>&#125;<br><br><span class="hljs-comment">//获取本类及其父类所有的方法对象的数组</span><br><span class="hljs-keyword">for</span> (Class&lt;?&gt; c = studentClass; c != <span class="hljs-literal">null</span>; c = c.getSuperclass()) &#123;<br>    Method[] methods2 = c.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span> (Method method : methods2) &#123;<br>        System.out.println(method);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//调用成员方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> studentClass.getDeclaredMethod(<span class="hljs-string">&quot;method1&quot;</span>);<span class="hljs-comment">//获取方法对象</span><br>method1.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//开启私有权限</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method1.invoke(stu);<span class="hljs-comment">//调用成员方法需要对象，返回值为方法返回值，没有返回值则为null</span><br>System.out.println(invoke);<br><br><span class="hljs-comment">//调用静态方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">staticMethod1</span> <span class="hljs-operator">=</span> studentClass.getDeclaredMethod(<span class="hljs-string">&quot;staticMethod1&quot;</span>);<br>staticMethod1.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">invoke1</span> <span class="hljs-operator">=</span> staticMethod1.invoke(<span class="hljs-literal">null</span>);<span class="hljs-comment">//调用静态方法不需要对象</span><br>System.out.println(invoke1);<br><br><span class="hljs-comment">//调用静态方法（带参数）</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">staticMethod2</span> <span class="hljs-operator">=</span> studentClass.getDeclaredMethod(<span class="hljs-string">&quot;staticMethod2&quot;</span>, String.class);<span class="hljs-comment">//获取方法对象（通过方法名和参数的Class对象）</span><br>staticMethod2.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">invoke2</span> <span class="hljs-operator">=</span> staticMethod2.invoke(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//传入参数</span><br>System.out.println(invoke2);<br><br><span class="hljs-comment">//判断方法性质</span><br><span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> staticMethod1.getModifiers();<br>System.out.println(Modifier.isStatic(modifiers));<br>System.out.println(Modifier.isPublic(modifiers));<br>System.out.println(Modifier.isPrivate(modifiers));<br><br><br><br><span class="hljs-comment">//使用工具类获取普通方法对象</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method11</span> <span class="hljs-operator">=</span> ReflectUtil.getMethod(studentClass,<span class="hljs-string">&quot;method1&quot;</span>);<br>System.out.println(method11);<br><br><span class="hljs-comment">//使用工具类获取有参静态方法对象</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">staticMethod11</span> <span class="hljs-operator">=</span> ReflectUtil.getMethod(studentClass, <span class="hljs-string">&quot;staticMethod2&quot;</span>,String.class);<br>System.out.println(staticMethod11);<br><br><span class="hljs-comment">//使用工具类调用方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">method12</span> <span class="hljs-operator">=</span> ReflectUtil.invokeMethod(studentClass, stu, <span class="hljs-string">&quot;method1&quot;</span>);<br>System.out.println(method12);<br><br><span class="hljs-comment">//使用工具类调用有参静态方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ReflectUtil.invokeMethod(studentClass, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;staticMethod2&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(o);<br></code></pre></td></tr></table></figure><p>工具类-获取方法对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取方法对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz class对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name 方法名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paramTypes 方法参数类型数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 方法对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(Class&lt;?&gt; clazz,String name,Class&lt;?&gt;... paramTypes)</span>&#123;<br>    <span class="hljs-keyword">for</span>(Class&lt;?&gt; c =clazz;c!=<span class="hljs-literal">null</span>;c=c.getSuperclass())&#123;<br>      <span class="hljs-keyword">try</span>&#123;<br>          <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(name, paramTypes);<br>          <span class="hljs-keyword">return</span> method;<br>      &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类-调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 调用 方法</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> clazz class类型</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> obj 对象</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> name 方法名</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> params 参数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 方法返回值，void则返回null</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(Class&lt;?&gt; clazz,Object obj,String name,Object... params)</span>&#123;<br><br>       <span class="hljs-comment">//参数类型数组</span><br>       Class&lt;?&gt;[] paramTypes = getParamTypes(params);<br><br>       <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getMethod(clazz, name, paramTypes);<br>       method.setAccessible(<span class="hljs-literal">true</span>);<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">try</span>&#123;<br>           invoke =method.invoke(obj,params);<br>       &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>           e.printStackTrace();<br>       &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> invoke;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a name="V9rQ8"></a></p><h3 id="（五）操作泛型"><a href="#（五）操作泛型" class="headerlink" title="（五）操作泛型"></a>（五）操作泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br><br>        <span class="hljs-comment">//获取class对象</span><br>        Class&lt;Test05&gt; clazz = Test05.class;<br><br>        <span class="hljs-comment">//获取方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;method&quot;</span>, ArrayList.class, HashMap.class);<br>        <span class="hljs-comment">//获取方法形参数的泛型</span><br>        Parameter[] parameters = method.getParameters();<span class="hljs-comment">//获取参数</span><br>        <span class="hljs-keyword">for</span> (Parameter parameter : parameters) &#123;<span class="hljs-comment">//遍历参数</span><br>            <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parameterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType)parameter.getParameterizedType();<span class="hljs-comment">//获取参数类型</span><br>            Type[] types = parameterizedType.getActualTypeArguments();<span class="hljs-comment">//获取参数泛型</span><br>            <span class="hljs-keyword">for</span> (Type type : types) &#123;<span class="hljs-comment">//遍历参数泛型</span><br>                System.out.println(type);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>            <span class="hljs-comment">//class java.lang.String</span><br>            <span class="hljs-comment">//---</span><br>            <span class="hljs-comment">//class java.lang.String</span><br>            <span class="hljs-comment">//class java.lang.Integer</span><br>            <span class="hljs-comment">//---</span><br><br>        &#125;<br>        <span class="hljs-comment">//获取方法返回值类型泛型</span><br>        <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span>(ParameterizedType) method.getGenericReturnType();<br>        Type[] types = type.getActualTypeArguments();<br>        <span class="hljs-keyword">for</span> (Type t : types) &#123;<br>            System.out.println(t);<br>        &#125;<br>        <span class="hljs-comment">//class java.lang.Character</span><br>        <span class="hljs-comment">//class java.lang.Double</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HashMap&lt;Character,Double&gt; <span class="hljs-title function_">method</span> <span class="hljs-params">(ArrayList&lt;String&gt; list,HashMap&lt;String,Integer&gt; map)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="M0O0D"></a></p><h3 id="（六）操作数组"><a href="#（六）操作数组" class="headerlink" title="（六）操作数组"></a>（六）操作数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//利用反射创建数组，指定类型和长度</span><br><span class="hljs-type">int</span>[] is =(<span class="hljs-type">int</span>[]) Array.newInstance(<span class="hljs-type">int</span>.class, <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//获取数组元素个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Array.getLength(is);<br><br><span class="hljs-comment">//设置数组元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    Array.set(is,i,<span class="hljs-number">6</span>);<span class="hljs-comment">//设置数组元素(数组,下标,内容)</span><br>&#125;<br><br><span class="hljs-comment">//遍历获取元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>(<span class="hljs-type">int</span>) Array.get(is, i);<br>    System.out.print(<span class="hljs-string">&quot; &quot;</span>+o);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="FIKkK"></a></p><h3 id="（七）操作注解"><a href="#（七）操作注解" class="headerlink" title="（七）操作注解"></a>（七）操作注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnnotation(value = &quot;lh&quot;,info = &quot;2213&quot;,hobbies = &#123;&quot;看电视&quot;,&quot;敲代码&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, NoSuchMethodException &#123;<br>        Class&lt;?&gt; clazz = Test07.class;<br><br>        <span class="hljs-comment">//获取该类上的某个注解</span><br>        <span class="hljs-type">MyAnnotation</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> clazz.getAnnotation(MyAnnotation.class);<br>        <span class="hljs-comment">//获取注解信息</span><br>        System.out.println(annotation.value());<br>        System.out.println(annotation.info());<br>        System.out.println(annotation.hobbies());<br>        System.out.println(<span class="hljs-string">&quot;----&quot;</span>);<br><br>        <span class="hljs-comment">//获取该类某个属性上的某个注解</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;str&quot;</span>);<br>        <span class="hljs-type">MyAnnotation</span> <span class="hljs-variable">annotation1</span> <span class="hljs-operator">=</span> str.getAnnotation(MyAnnotation.class);<br>        System.out.println(annotation1.value());<br>        System.out.println(annotation1.info());<br>        System.out.println(annotation1.hobbies());<br>        System.out.println(<span class="hljs-string">&quot;----&quot;</span>);<br><br>        <span class="hljs-comment">//获取该类某个方法上的某个注解</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-type">MyAnnotation</span> <span class="hljs-variable">annotation2</span> <span class="hljs-operator">=</span> method.getAnnotation(MyAnnotation.class);<br>        System.out.println(annotation2.value());<br>        System.out.println(annotation2.info());<br>        System.out.println(annotation2.hobbies());<br><br><br>    &#125;<br><br><br>    <span class="hljs-meta">@MyAnnotation(value = &quot;lh&quot;,info = &quot;2213&quot;,hobbies = &#123;&quot;看电视&quot;,&quot;敲代码&quot;&#125;)</span><br>    String str;<br><br>    <span class="hljs-meta">@MyAnnotation(value = &quot;sl&quot;,info = &quot;2213&quot;,hobbies = &#123;&quot;吃&quot;,&quot;睡&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.FIELD,ElementType.METHOD,ElementType.TYPE&#125;)</span> <span class="hljs-comment">//指定注解能在哪里使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//指定注解的作用范围</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">//定义注解参数</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">info</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;--&quot;</span>;<span class="hljs-comment">//可以指定参数的默认值</span><br><br>    String[] hobbies();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="iXVCi"></a></p><h3 id="（八）反射的应用"><a href="#（八）反射的应用" class="headerlink" title="（八）反射的应用"></a>（八）反射的应用</h3><p><a name="klZfI"></a></p><h4 id="1、拷贝数组"><a href="#1、拷贝数组" class="headerlink" title="1、拷贝数组"></a>1、拷贝数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] copyOf(<span class="hljs-type">int</span>[] original,<span class="hljs-type">int</span> newLength)&#123;<br><br>     <span class="hljs-type">int</span> length=original.length;<br><br>     <span class="hljs-keyword">if</span>(newLength &lt; <span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NegativeArraySizeException</span>();<br>     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newLength &lt; length)&#123;<br>         length = newLength;<br>     &#125;<br><br>     <span class="hljs-type">int</span>[] is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[newLength];<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>         is[i] = original[i];<br>     &#125;<br>     <span class="hljs-keyword">return</span> is;<br> &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">copyOf</span><span class="hljs-params">(T arr,<span class="hljs-type">int</span> newLength)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Array.getLength(arr);<br><br>    <span class="hljs-keyword">if</span>(newLength &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">NegativeArraySizeException</span>();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( newLength &lt; length)&#123;<br>        length = newLength;<br>    &#125;<br><br>    <span class="hljs-comment">//获取clazz对象</span><br>    Class&lt;?&gt; clazz = arr.getClass();<br>    <span class="hljs-comment">//获取数组元素类型</span><br>    Class&lt;?&gt; type = clazz.getComponentType();<br>    <span class="hljs-comment">//创建新数组</span><br>    <span class="hljs-type">T</span> <span class="hljs-variable">newArr</span> <span class="hljs-operator">=</span>(T) Array.newInstance(type, newLength);<br><br>    <span class="hljs-comment">//copy</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Array.get(arr, i);<br>        Array.set(newArr,i,value);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="IYHlg"></a></p><h4 id="2、逻辑与表现分离的思想"><a href="#2、逻辑与表现分离的思想" class="headerlink" title="2、逻辑与表现分离的思想"></a>2、逻辑与表现分离的思想</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSource</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataSource</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取本地数据的代码&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetWorkDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataSource</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取网络数据的代码&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataSource</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取其他数据的代码&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据中心</span><br><span class="hljs-comment">//功能：把配置文件中的数据转换为集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataCenter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ArrayList&lt;String&gt; menuList;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ArrayList&lt;String&gt; pathList;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将配置文件中的menu语句写入到list中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        menuList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span>&#123;<br>            properties.load(DataCenter.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;MenuConfig.properties&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;menu&quot;</span>);<br>        String[] menus = menu.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String element : menus) &#123;<br>            menuList.add(element);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将配置文件中的类名路径写入到list中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        pathList =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(DataCenter.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;DataSourceConfig.properties&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        String path=properties.getProperty(<span class="hljs-string">&quot;path&quot;</span>);<br>        String[] menus = path.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String element : menus) &#123;<br>            pathList.add(element);<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//显示菜单</span><br>        showMenu();<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scan.nextInt();<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> createDataSource(num);<br>        <span class="hljs-keyword">if</span>(dataSource!=<span class="hljs-literal">null</span>)&#123;<br>            dataSource.getDataSource();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;获取的数据的方式不对&quot;</span>);<br>        &#125;<br><br>        scan.close();<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回DataSource的实现类对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title function_">createDataSource</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            ArrayList&lt;String&gt; pathList = DataCenter.pathList;<br>            <span class="hljs-keyword">if</span>(num-<span class="hljs-number">1</span>&lt; pathList.size())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> pathList.get(num - <span class="hljs-number">1</span>);<br>                System.out.println(path);<br>                Class&lt;?&gt; clazz = Class.forName(path);<br>                DataSource dataSource=(DataSource) clazz.newInstance();<br>                <span class="hljs-keyword">return</span> dataSource;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 菜单展示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;选请择获取数据的方式：&quot;</span>);<br>        ArrayList&lt;String&gt; menuList = DataCenter.menuList;<br>        <span class="hljs-keyword">for</span> (String element : menuList) &#123;<br>            System.out.println(element);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="uYJ0v"></a></p><h4 id="3、获取注解信息"><a href="#3、获取注解信息" class="headerlink" title="3、获取注解信息"></a>3、获取注解信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TableInfo &#123;<br>    <span class="hljs-comment">//表名</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FieldInfo &#123;<br>    <span class="hljs-comment">//表字段名</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//表字段类型</span><br>    String <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//表字段长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@FieldInfo(name=&quot;s_name&quot;,type = &quot;varchar&quot; ,length = 32)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@FieldInfo(name = &quot;s_sex&quot;,type = &quot;varchar&quot;,length = 32)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-meta">@FieldInfo(name =&quot;s_age&quot;,type = &quot;int&quot;,length = 8)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableInfo(&quot;s_student&quot;)</span><span class="hljs-comment">//指定对应表名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-comment">//指定类属性对应的表字段信息</span><br>    <span class="hljs-meta">@FieldInfo(name = &quot;s_class_id&quot;, type = &quot;varchar&quot;, length = 32)</span><br>    <span class="hljs-keyword">private</span> String classId;<br>    <span class="hljs-meta">@FieldInfo(name = &quot;s_id&quot;, type = &quot;varchar&quot;, length = 32)</span><br>    <span class="hljs-keyword">private</span> String id;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> obj 要拼接的对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 拼接好的insert语句</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">insertSql</span><span class="hljs-params">(Object obj)</span>&#123;<br>      <span class="hljs-comment">//获取class对象</span><br>      Class&lt;?&gt; clazz = obj.getClass();<br><br>      <span class="hljs-comment">//获取类上的注解信息</span><br>      <span class="hljs-type">TableInfo</span> <span class="hljs-variable">tableInfo</span> <span class="hljs-operator">=</span> clazz.getAnnotation(TableInfo.class);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> tableInfo.value();<br><br>      <span class="hljs-comment">//</span><br>      <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">allFieldName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>      <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">allFieldValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br>      <span class="hljs-comment">//获取属性上的注解数据</span><br>      <span class="hljs-keyword">for</span>(Class&lt;?&gt; c=clazz;c!=<span class="hljs-literal">null</span>;c=c.getSuperclass())&#123;<br>          Field[] fields = c.getDeclaredFields();<br>          <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>              field.setAccessible(<span class="hljs-literal">true</span>);<br>              <span class="hljs-type">FieldInfo</span> <span class="hljs-variable">fieldInfo</span> <span class="hljs-operator">=</span> field.getAnnotation(FieldInfo.class);<br>              <span class="hljs-keyword">if</span>( fieldInfo==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//说明该属性上没有该FieldInfo注解</span><br>                  <span class="hljs-keyword">continue</span>;<br>              &#125;<br><br>              <span class="hljs-comment">//获取注解数据和属性对象的属性值</span><br>              <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> fieldInfo.name();<span class="hljs-comment">//FieldInfo的name属性</span><br>              <span class="hljs-type">String</span> <span class="hljs-variable">fieldType</span> <span class="hljs-operator">=</span> fieldInfo.type();<span class="hljs-comment">//FieldInfo的Type属性</span><br>              <span class="hljs-type">Object</span> <span class="hljs-variable">fieldValue</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>              <span class="hljs-keyword">try</span>&#123;<br>                  <span class="hljs-comment">//获取obj对象的该属性的属性值</span><br>                  fieldValue =field.get(obj);<br>              &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                  e.printStackTrace();<br>              &#125;<br><br><br>              <span class="hljs-comment">//拼接字段名</span><br>              <span class="hljs-keyword">if</span>(allFieldName.length()!= <span class="hljs-number">0</span>)&#123;<br>                  allFieldName.append(<span class="hljs-string">&quot;,&quot;</span>);<br>              &#125;<br>              allFieldName.append(fieldName);<br><br>              <span class="hljs-comment">//拼接字段值</span><br>              <span class="hljs-keyword">if</span>(allFieldValue.length() !=<span class="hljs-number">0</span>)&#123;<br>                  allFieldValue.append(<span class="hljs-string">&quot;,&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">if</span>(fieldType.equals(<span class="hljs-string">&quot;varchar&quot;</span>))&#123;<br>                  allFieldValue.append(<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>              &#125;<br>              allFieldValue.append(fieldValue);<br>              <span class="hljs-keyword">if</span>(fieldType.equals(<span class="hljs-string">&quot;varchar&quot;</span>))&#123;<br>                  allFieldValue.append(<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>              &#125;<br>          &#125;<br><br><br>      &#125;<br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;insert into &quot;</span>+tableName+<span class="hljs-string">&quot;(&quot;</span> + allFieldName.toString()+<span class="hljs-string">&quot;) values(&quot;</span>+allFieldValue.toString()+<span class="hljs-string">&quot;);&quot;</span>;<br>      <span class="hljs-keyword">return</span> sql;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;2213&quot;</span>, <span class="hljs-string">&quot;001&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ReflectUtil.insertSql(student);<br>System.out.println(s);<br></code></pre></td></tr></table></figure><h3 id="（九）动态代理"><a href="#（九）动态代理" class="headerlink" title="（九）动态代理"></a>（九）动态代理</h3><blockquote><p>所谓动态代理，即通过代理类：Proxy的代理，接口和实现类之间可以不直接发生联系，而可以在运行期（Runtime)实现动态关联。<br>java动态代理主要是使用java.lang.reflect包中的两个类。</p><p><strong>InvocationHandler类</strong><br>public Object invoke(Object obj,Method method,Object[] obs)<br>其中第一个参数obj指的是代理类，method是被代理的方法，obs是指被代理的方法的参数组。此方法由代理类来实现。</p><p><strong>Proxy类</strong><br>protected Proxy(InvocationHandler h);<br>static Class getProxyClass(ClassLoader loader,Class[] interfaces);<br>static Object newProxylnstance(ClassLoader loader,Class []interfaces,InvocationHandler h);<br>动态代理其实是在运行时生成class,所以，我们必须提供一组interface,然后告诉他class已经实现了这些interface,而且在生成Proxyl的时候，必须给他提供一个handler,让他来接管实际的工作。</p></blockquote><h3 id="（十）类的加载器原理分析"><a href="#（十）类的加载器原理分析" class="headerlink" title="（十）类的加载器原理分析"></a>（十）类的加载器原理分析</h3><h4 id="1、类的加载过程"><a href="#1、类的加载过程" class="headerlink" title="1、类的加载过程"></a>1、类的加载过程</h4><p>JVM将类加载过程分为三个步骤：装载（Load），链接（Link）和初始化（Initlable）链接又分为三个步骤，如图所示</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-16/b51165940ab06b415e9a5f0851a17fa9--6591--image-20230116194933273.png" alt="image-20230116194933273"></p><h5 id="（1）装载：查找并加载类的二进制数据；"><a href="#（1）装载：查找并加载类的二进制数据；" class="headerlink" title="（1）装载：查找并加载类的二进制数据；"></a>（1）装载：查找并加载类的二进制数据；</h5><h5 id="（2）链接："><a href="#（2）链接：" class="headerlink" title="（2）链接："></a>（2）链接：</h5><p>​验证：确保被加载类的正确性；</p><p>​准备：为类的静态变量分配内存，并将其初始化为默认值</p><p>​解析：把类中的符号引用转换为直接引用；</p><h5 id="（3）初始化：为类的静态变量赋予正确的初始值"><a href="#（3）初始化：为类的静态变量赋予正确的初始值" class="headerlink" title="（3）初始化：为类的静态变量赋予正确的初始值"></a>（3）初始化：为类的静态变量赋予正确的初始值</h5><h4 id="2、类的初始化，类什么时候才被初始化"><a href="#2、类的初始化，类什么时候才被初始化" class="headerlink" title="2、类的初始化，类什么时候才被初始化"></a>2、类的初始化，类什么时候才被初始化</h4><h5 id="（1）创建类的实例，也就是new一个对象"><a href="#（1）创建类的实例，也就是new一个对象" class="headerlink" title="（1）创建类的实例，也就是new一个对象"></a>（1）创建类的实例，也就是new一个对象</h5><h5 id="（2）访问某个类或接口的静态变量，或者对该静态变量赋值"><a href="#（2）访问某个类或接口的静态变量，或者对该静态变量赋值" class="headerlink" title="（2）访问某个类或接口的静态变量，或者对该静态变量赋值"></a>（2）访问某个类或接口的静态变量，或者对该静态变量赋值</h5><h5 id="（3）调用类的静态方法"><a href="#（3）调用类的静态方法" class="headerlink" title="（3）调用类的静态方法"></a>（3）调用类的静态方法</h5><h5 id="（4）反射（Class-forName-“com-vince-Dog”-）"><a href="#（4）反射（Class-forName-“com-vince-Dog”-）" class="headerlink" title="（4）反射（Class.forName(“com.vince.Dog”)）"></a>（4）反射（Class.forName(“com.vince.Dog”)）</h5><h5 id="（5）初始化一个类的子类（会首先初始化子类的父类）"><a href="#（5）初始化一个类的子类（会首先初始化子类的父类）" class="headerlink" title="（5）初始化一个类的子类（会首先初始化子类的父类）"></a>（5）初始化一个类的子类（会首先初始化子类的父类）</h5><h5 id="（6）JVM启动时标明的启动类，即文件名和类名相同的那个类"><a href="#（6）JVM启动时标明的启动类，即文件名和类名相同的那个类" class="headerlink" title="（6）JVM启动时标明的启动类，即文件名和类名相同的那个类"></a>（6）JVM启动时标明的启动类，即文件名和类名相同的那个类</h5><h4 id="3、类的加载："><a href="#3、类的加载：" class="headerlink" title="3、类的加载："></a>3、类的加载：</h4><p>指的是将类的.class文件中的二进制数据读取到内存中，将其放进运行时数据区的方法区内，然后在堆区创建一个这个类的Java.lang.Class对象，用来封装类在方法区类的对象。</p><h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><blockquote><p>内省(Introspector)是Java语言对Bean类属性、事件的一种缺省处理方法。例如类A中有属性name,那我们可以通过getName,setName来得到其值或者设置新的值。</p><p>通过getName&#x2F;setName来访问name属性，这就是默认的规则.</p></blockquote><blockquote><p>Java中提供了一套API用来访问某个属性的getter&#x2F;setter方通过这些API可以使你不需要了解这个规则，这些API存放于包java.beans中，一般的做法是通过类Introspector的getBeanlnfo方法来获取某个对象的Beanlnfo信息，然后通过BeanInfo来获取属性的描述器(Property Descriptor),通过这个属性描述器就可以获取某个属性对应的getter&#x2F;setter方法，然后我们就可以通过反射机制来调用这些方法。</p></blockquote><p>内省api结合反射，可以更方便实现动态根据类信息创建对象并完成对象的初始化工作，这在框架底层实现中非常常见。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">创建一个Config类，存在三个属性username,password,url<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">#在resource里创建一个config.properties配置文件（IDEA中仅在resource里生效）<br>bean.name=com.introspector.Config<br>bean.username=admin<br>bean.password=<span class="hljs-number">123</span><br>bean.url=https:<span class="hljs-comment">//www.baidu.com</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : BeanFactory -- 通过内省的API来装配一个Bean对象，Bean对象的值是通过配置文件中来获取</span><br><span class="hljs-comment"> 目的是为了提高维护性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 18:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-comment">//使用静态代码块读取配置文件</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;config.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            prop.load(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> prop.getProperty(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; aClass = Class.forName(beanName);<br>             bean = aClass.newInstance();<br>             <span class="hljs-comment">//通过类信息获取javaBean的描述信息</span><br>            <span class="hljs-type">BeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> Introspector.getBeanInfo(aClass);<br>            <span class="hljs-comment">//通过JavaBean描述信息，获取该类的所有属性描述器</span><br>            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; propertyDescriptors.length; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> propertyDescriptors[i].getName();<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">writeMethod</span> <span class="hljs-operator">=</span> propertyDescriptors[i].getWriteMethod();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;username&quot;</span>.equals(propertyName))&#123;<br>                    <span class="hljs-comment">//调用属性的set方法</span><br>                    writeMethod.invoke(bean,prop.getProperty(<span class="hljs-string">&quot;bean.username&quot;</span>));<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;password&quot;</span>.equals(propertyName)) &#123;<br>                    writeMethod.invoke(bean,prop.getProperty(<span class="hljs-string">&quot;bean.password&quot;</span>));<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;url&quot;</span>.equals(propertyName)) &#123;<br>                    writeMethod.invoke(bean,prop.getProperty(<span class="hljs-string">&quot;bean.url&quot;</span>));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IntrospectionException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*测试</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getBeanTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> (Config) BeanFactory.getBean(<span class="hljs-string">&quot;bean.name&quot;</span>);<br>        System.out.println(bean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充：AOP（面向切面编程）"><a href="#补充：AOP（面向切面编程）" class="headerlink" title="补充：AOP（面向切面编程）"></a>补充：AOP（面向切面编程）</h2><h3 id="aop框架的简单实现"><a href="#aop框架的简单实现" class="headerlink" title="aop框架的简单实现"></a>aop框架的简单实现</h3><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-25/c4d0c1c531e7cbf002b082824ffe3bc9--c6ef--image-20230125224719531.png" alt="image-20230125224719531"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : IManager</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IManager</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String item)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : IManagerImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IManager</span>&#123;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String item)</span> &#123;<br>        list.add(item);<br>        System.out.println(item);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Advice--通知</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 18:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Advice</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAdvice</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : LogAdvice -- 切面的实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Advice</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;start time：&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAdvice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;end time：&quot;</span>+System.currentTimeMillis());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-keyword">private</span> Advice advice;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getTarget</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Advice <span class="hljs-title function_">getAdvice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> advice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAdvice</span><span class="hljs-params">(Advice advice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.advice = advice;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        advice.beforeAdvice();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        advice.afterAdvice();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : BeanFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:11</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BeanFactory</span><span class="hljs-params">(InputStream in)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            prop.load(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> prop.getProperty(name);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取PropertiesFactoryBean的class对象</span><br>            Class&lt;?&gt; aClass = Class.forName(className);<br>            bean = aClass.newInstance();<span class="hljs-comment">//实例化对象</span><br><br>            <span class="hljs-comment">//根据配置文件实例化target和advice对象</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Class.forName(prop.getProperty(name + <span class="hljs-string">&quot;.target&quot;</span>)).newInstance();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">advice</span> <span class="hljs-operator">=</span> Class.forName(prop.getProperty(name + <span class="hljs-string">&quot;.advice&quot;</span>)).newInstance();<br><br>            <span class="hljs-comment">//通过内省实现对ProxyFactoryBean的属性赋值</span><br>            <span class="hljs-type">BeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> Introspector.getBeanInfo(aClass);<br>            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; propertyDescriptors.length; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> propertyDescriptors[i].getName();<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">writeMethod</span> <span class="hljs-operator">=</span> propertyDescriptors[i].getWriteMethod();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;target&quot;</span>.equals(propertyName)) &#123;<br>                    <span class="hljs-comment">//调用属性的set方法</span><br>                    writeMethod.invoke(bean, target);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;advice&quot;</span>.equals(propertyName)) &#123;<br>                    writeMethod.invoke(bean, advice);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IntrospectionException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : AOPTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 19:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>        <span class="hljs-comment">//2.创建Bean的工厂对象</span><br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanFactory</span>(in);<br>        <span class="hljs-comment">//3.获取代理对象</span><br>         <span class="hljs-type">ProxyFactoryBean</span> <span class="hljs-variable">proxyFactoryBean</span> <span class="hljs-operator">=</span> (ProxyFactoryBean) beanFactory.getBean(<span class="hljs-string">&quot;bean&quot;</span>);<br>        <span class="hljs-type">IManager</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IManager) proxyFactoryBean.getProxy();<br>        proxy.add(<span class="hljs-string">&quot;我是一只猫&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h3><p>权限、缓存、错误处理、调试、记录跟踪、持久化、同步、事务等</p><h2 id="单例模式优化"><a href="#单例模式优化" class="headerlink" title="单例模式优化"></a>单例模式优化</h2><blockquote><p>1、使用同步保正线程安全synchronized<br>2、使用volatile关键字<br>volatile提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象：<br>3、防止反射调用私有构造方法<br>4、让单例类序例化安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Singleton</span><br><span class="hljs-comment"> * 单例模式</span><br><span class="hljs-comment"> * 1、多线程访问的安全问题</span><br><span class="hljs-comment"> * 2、加上volatile关键字保证变量的一致性</span><br><span class="hljs-comment"> * 3、防止反射调用私有构造方法</span><br><span class="hljs-comment"> * 4、让单例类可以被序列化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span> : 2023/1/25 22:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;此类对象为单例模式，已经被实例化了&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (singleton==<span class="hljs-literal">null</span>)&#123;<br>                    singleton= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK1-8新特性"><a href="#JDK1-8新特性" class="headerlink" title="JDK1.8新特性"></a>JDK1.8新特性</h2><p><a name="AK9dc"></a></p><h3 id="（一）Lambda表达式"><a href="#（一）Lambda表达式" class="headerlink" title="（一）Lambda表达式"></a>（一）Lambda表达式</h3><p>List<Integer>numbers new ArrayList&lt;&gt;();<br>JDK1.8新特性：<br>&#x2F;&#x2F;no.1<br>numbers.forEach((Integer integer)-&gt;(System.out.println(integer););<br>&#x2F;&#x2F;no.2<br>numbers.forEach(integer-&gt;[System.out.println(integer););<br>&#x2F;&#x2F;no.3<br>numbers.forEach(integer-&gt;System.out.println(integer));<br>&#x2F;&#x2F;no.4<br>numbers.forEach(System.out::println);<br>&#x2F;&#x2F;no.5<br>numbers.forEach(new MyConsumer());</p><blockquote><p>用来简化匿名子类过程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//传统方式</span><br>        <span class="hljs-type">I1</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">I1</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>                System.out.println(a+b);<br>            &#125;<br>        &#125;;<br>        i1.method(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-comment">//使用lambda的方式</span><br>        I1 i2=(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b) -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;使用lambda的方式:&quot;</span>+(a+b));<br>        &#125;;<br>        i2.method(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//使用lambda的方式</span><br>        I1 i3=(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)-&gt; System.out.println(<span class="hljs-string">&quot;使用lambda的方式:&quot;</span>+(a+b));<br>        i3.method(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="QoI5J"></a></p><h3 id="（二）函数式接口"><a href="#（二）函数式接口" class="headerlink" title="（二）函数式接口"></a>（二）函数式接口</h3><blockquote><p>函数式接口是指仅仅只包含一个抽象方法的接口，JDK1.8提供了注解@FunctionalInterface来定义函数式接口。</p></blockquote><p>四种核心函数式接口<br />Consumer<T>消费型接口void accept(I t);消费者接口<br />Supplier<T>供给型接口T get();代表结果供应商<br />Function&lt;T,R&gt;函数型接口R apply(T t);表示接受一个参数并产生结果的函数<br />Predicate<T>断言型接口booelan test(T t);断言接口</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-01-14/c7109bf287005bfa55a90165acce4a4a--4da1--image-20221229174652707.png" alt="image-20221229174652707"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">supplierTest</span><span class="hljs-params">()</span>&#123;<br>       List&lt;Integer&gt; list = getNums(<span class="hljs-number">10</span>,()-&gt; (<span class="hljs-type">int</span>) (Math.random()*<span class="hljs-number">100</span>));<br>       list.forEach(System.out::println);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">getNums</span><span class="hljs-params">(<span class="hljs-type">int</span> num,Supplier&lt;Integer&gt; sup)</span>&#123;<br>       ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>           list.add(sup.get());<br>       &#125;<br>       <span class="hljs-keyword">return</span> list;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 函数式接口：有参数有返回值</span><br><span class="hljs-comment">        */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">functionTest</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> strToUp(<span class="hljs-string">&quot;qf_vince&quot;</span>,str-&gt;str.toUpperCase());<br>       System.out.println(s);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">strToUp</span><span class="hljs-params">(String str, Function&lt;String,String&gt; function)</span>&#123;<br>       <span class="hljs-keyword">return</span> function.apply(str);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//断言接口 -- 测试</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">predicateTest</span><span class="hljs-params">()</span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;lxl&quot;</span>,<span class="hljs-string">&quot;lh&quot;</span>, <span class="hljs-string">&quot;gkz&quot;</span>, <span class="hljs-string">&quot;wsa&quot;</span>);<br>        List&lt;String&gt; result = filter(list, s -&gt; s.contains(<span class="hljs-string">&quot;l&quot;</span>));<br>        result.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; predicate)</span>&#123;<br>        ArrayList&lt;String&gt; results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-keyword">if</span> (predicate.test(s))&#123; <span class="hljs-comment">//测试是否符合要求</span><br>                results.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> results;<br>    &#125;<br></code></pre></td></tr></table></figure><p><a name="XXHSp"></a></p><h3 id="（三）方法、构造方法和数组引用"><a href="#（三）方法、构造方法和数组引用" class="headerlink" title="（三）方法、构造方法和数组引用"></a>（三）方法、构造方法和数组引用</h3><p><a name="x5qXw"></a></p><h4 id="1、方法的引用-实例方法"><a href="#1、方法的引用-实例方法" class="headerlink" title="1、方法的引用-实例方法"></a>1、方法的引用-实例方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法的引用 --实例方法</span><br><span class="hljs-comment">         * 语法结构：</span><br><span class="hljs-comment">         *      对象::方法</span><br><span class="hljs-comment">         * 应用场景：当接口的抽象方法和实现子类方法中调用的方法的结构（参数类型参数个数和返回值类型）一样时</span><br><span class="hljs-comment">         */</span><br>        I1 i1=System.out::println;<br>        i1.method(<span class="hljs-string">&quot;hello，world&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(String str)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="e1V9B"></a></p><h4 id="2、方法的引用-静态方法的引用"><a href="#2、方法的引用-静态方法的引用" class="headerlink" title="2、方法的引用-静态方法的引用"></a>2、方法的引用-静态方法的引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 方法的引用 - 静态方法的引用</span><br><span class="hljs-comment">  * 语法结构：</span><br><span class="hljs-comment">  *  类名::方法名</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-comment">//方式1：传统方式</span><br> <span class="hljs-comment">//外置比较器</span><br>Comparator&lt;Integer&gt; com= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>         <span class="hljs-keyword">return</span> Integer.compare(o1,o2);<br>     &#125;<br> &#125;;<br> System.out.println(com.compare(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>));<br><br><br><span class="hljs-comment">//方式2：lambda的方式</span><br> Comparator&lt;Integer&gt; com1= (o1,o2)-&gt;Integer.compare(o1,o2);<br> System.out.println(com1.compare(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br><br> <span class="hljs-comment">//方式3：方法的引用的方式</span><br> Comparator&lt;Integer&gt; com2 =Integer::compare;<br> System.out.println(com2.compare(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p><a name="CzsbB"></a></p><h4 id="3、方法的引用-成员方法的引用"><a href="#3、方法的引用-成员方法的引用" class="headerlink" title="3、方法的引用-成员方法的引用"></a>3、方法的引用-成员方法的引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法的引用-成员方法的引用</span><br><span class="hljs-comment">         * 语法结构：</span><br><span class="hljs-comment">         *  类名:方法</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//方式1：使用lambda的方式实现匿名子类</span><br>        LL&lt;String&gt; l1=(str1,str2)-&gt;str1.equals(str2);<br>        System.out.println(l1.method(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>));<br><br>        <span class="hljs-comment">//方式2：使用成员方法的引用实现匿名子类</span><br>        <span class="hljs-comment">//第一个参数为调用方法的对象、第二个参数为equals的参数</span><br>        LL&lt;String&gt; l2=String::equals;<br>        System.out.println(l2.method(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LL</span> &lt;T&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">method</span><span class="hljs-params">(T t1,T t2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="LVCrC"></a></p><h4 id="4、方法的引用-构造方法的引用"><a href="#4、方法的引用-构造方法的引用" class="headerlink" title="4、方法的引用 -构造方法的引用"></a>4、方法的引用 -构造方法的引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法的引用 -构造方法的引用</span><br><span class="hljs-comment">         * 语法结构：</span><br><span class="hljs-comment">         * 类名::new</span><br><span class="hljs-comment">         * 使用场景：重写的方法的返回值是对象引用时</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//使用无参构造器创建对象</span><br>        L l=Student::<span class="hljs-keyword">new</span>;<br>        System.out.println(l.method());<br><br>        <span class="hljs-comment">//使用有参构造器创建对象</span><br>        O o=Student::<span class="hljs-keyword">new</span>;<br>        System.out.println(o.method(<span class="hljs-string">&quot;lh&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">2000</span>));<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">L</span>&#123;<br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">O</span>&#123;<br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">method</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,<span class="hljs-type">double</span> salary)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="ilAeS"></a></p><h4 id="5、方法的引用-数组的引用"><a href="#5、方法的引用-数组的引用" class="headerlink" title="5、方法的引用-数组的引用"></a>5、方法的引用-数组的引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法的引用-数组的引用</span><br><span class="hljs-comment">         * 语法结构：</span><br><span class="hljs-comment">         *  数据类型[]:new</span><br><span class="hljs-comment">         * 应用场景: 方法返回类型为数组类型</span><br><span class="hljs-comment">         */</span><br>        P&lt;String[]&gt; p=String[]::<span class="hljs-keyword">new</span>;<br>        String[] s = p.method(<span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(s));<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">P</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="lHbyi"></a></p><h3 id="（四）Stream"><a href="#（四）Stream" class="headerlink" title="（四）Stream"></a>（四）Stream</h3><p>stream接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Description</span> : Stream接口：不是存储的数据结构，数据源可以是集合，为了函数式编程创造，</span><br><span class="hljs-comment"> * 惰式执行，数据只能被消费一次</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 两种类型的操作方法：</span><br><span class="hljs-comment"> * 1.中间操作（生成一个Stream）</span><br><span class="hljs-comment"> * 2.结束操作（执行计算操作）</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Author</span> : LiuXinLei</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Date</span> : 2022/12/29 18:05</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Version</span> : 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// foreach()方法  属于结束操作</span><br>        Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;good&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>, <span class="hljs-string">&quot;study&quot;</span>, <span class="hljs-string">&quot;day&quot;</span>, <span class="hljs-string">&quot;day&quot;</span>, <span class="hljs-string">&quot;up&quot;</span>);<br><span class="hljs-comment">//        stream.forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//filter    属于中间操作</span><br><span class="hljs-comment">//        Stream&lt;String&gt; stringStream = stream.filter(s -&gt; s.length() &gt; 3);</span><br><span class="hljs-comment">//        stringStream.forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//distinct:去重复</span><br><span class="hljs-comment">//        stream.distinct().forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//map:映射</span><br><span class="hljs-comment">//        stream.map(s-&gt;s.toUpperCase()).forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//flatMap:摊平（两个组合成一个）</span><br>        Stream&lt;List&lt;Integer&gt;&gt; listStream = Stream.of(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>        listStream.flatMap(list-&gt;list.stream()).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream(流)是数据渠道，用于操作数据源（集合、数组等），生成元素序列。换言之，集合是存储数据的容器。<br>Stream是元素的集合，可以支持顺序和并行的对原Stream进行汇聚的操作。<br>流使用操作这些数据的Stream可以对集合进行非常复杂的查找、过滤、映射数据等操作，类似于SQL执行数据库查询。<br>Stream提供了一种高效且易于使用的处理数据的方式<br>注意：<br>Stream不会存储数据。<br>Stream不会改变源数据，通过一系列操作数据源会返回一个持有结果的新Stream。<br>Stream操作是延迟执行的，意味着流会等到需要结果的时候才执行。<br><br>执行步骤<br><span class="hljs-number">1.</span>创建Stream：通过数据源（集合、数组等）获取一个Stream。<br><span class="hljs-number">2.</span>中间操作：中间操作链，对源数据的数据进行处理。<br><span class="hljs-number">3.</span>终止操作：执行中间操作，并产生结果。<br></code></pre></td></tr></table></figure><p><a name="WMIEu"></a></p><h4 id="1、创建stream"><a href="#1、创建stream" class="headerlink" title="1、创建stream"></a>1、创建stream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//list.stream()</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-string">&quot;小蓝&quot;</span>,<span class="hljs-string">&quot;小绿&quot;</span>);<br>Stream&lt;String&gt; stream = list.stream();<br>stream.forEach(System.out::println);<br><br><br><span class="hljs-comment">//Arrays.stream</span><br>String[] names= &#123;<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-string">&quot;小绿&quot;</span>,<span class="hljs-string">&quot;小蓝&quot;</span>,<span class="hljs-string">&quot;小白&quot;</span>&#125;;<br>Stream&lt;String&gt; stream1 = Arrays.stream(names);<br>stream1.forEach(System.out::println);<br><br><span class="hljs-comment">//Stream.of</span><br>Stream&lt;String&gt; stream2 = Stream.of(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;小绿&quot;</span>, <span class="hljs-string">&quot;小蓝&quot;</span>, <span class="hljs-string">&quot;小白&quot;</span>);<br>stream2.forEach(System.out::println);<br><br><span class="hljs-comment">//Stream.generate 无限流</span><br>Stream&lt;Double&gt; stream3 = Stream.generate(Math::random);<br>Stream&lt;Double&gt; stream4 = stream3.limit(<span class="hljs-number">10</span>);<span class="hljs-comment">//限制流个数</span><br>stream4.forEach(System.out::println);<br><br><span class="hljs-comment">//Stream.iterate 无限流</span><br>Stream&lt;Integer&gt; stream5 = Stream.iterate(<span class="hljs-number">100</span>, (x) -&gt; x + <span class="hljs-number">20</span>);<br>Stream&lt;Integer&gt; stream6 = stream5.limit(<span class="hljs-number">10</span>);<br>stream6.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><a name="kjF8U"></a></p><h4 id="2、中间操作-筛选和切片"><a href="#2、中间操作-筛选和切片" class="headerlink" title="2、中间操作-筛选和切片"></a>2、中间操作-筛选和切片</h4><p>多个中间操作可以连接成一个流水线，除非流水线触发终止操作，否则中间操作不会执行任何的处理，而在终止操作时一次性全部处理，称为惰性求值&#x2F;延迟加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的中间操作 筛选与切片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Student&gt; stuList = Arrays.asList(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>));<br><br>    <span class="hljs-comment">//需求1：过滤掉工资小于5000的学生对象</span><br>    <span class="hljs-comment">//使用filter 过滤掉返回false的数据</span><br>    stuList.stream().filter((stu)-&gt;&#123;<br>        Double salary=stu.getSalary();<br>    <span class="hljs-keyword">if</span>(salary &gt; <span class="hljs-number">5000</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;).forEach(System.out::println);<br>    System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);<br><br>    <span class="hljs-comment">//需求2：过滤掉小于5000的学生对象,并显示3条</span><br>    <span class="hljs-comment">//使用limit 限制显示多少条数据</span><br>    <span class="hljs-comment">//因为限制了数据条数，所以满足数据条数后，后续的操作就不再运行了，效率提高</span><br>    stuList.stream().filter((student -&gt; &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span>student.getSalary();<br>        <span class="hljs-keyword">if</span>(salary &gt; <span class="hljs-number">5000</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;)).limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>    System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);<br><br>    <span class="hljs-comment">//需求3：过滤掉小于5000的学生对象，并跳过第一个学生对象</span><br>    <span class="hljs-comment">//skip() 跳过第几个元素</span><br>    stuList.stream().filter(student -&gt; &#123;<br>        <span class="hljs-type">double</span> salary=student.getSalary();<br>        <span class="hljs-keyword">if</span>(salary&gt;<span class="hljs-number">5000</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;).skip(<span class="hljs-number">1</span>).forEach(System.out::println);<br>    System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);<br><br>    <span class="hljs-comment">//需求4：过滤掉小于5000的学生对象,并筛选掉重复元素</span><br>    <span class="hljs-comment">//distinct() 按照重写的equals和hashcode来判断是不是同一个对象</span><br>    stuList.stream().filter(student -&gt; &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> student.getSalary();<br>        <span class="hljs-keyword">if</span> (salary &gt;<span class="hljs-number">5000</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;).distinct().forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="IUBKk"></a></p><h4 id="3、中间操作-映射"><a href="#3、中间操作-映射" class="headerlink" title="3、中间操作-映射"></a>3、中间操作-映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">     String[] str=&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;赵六&quot;</span>&#125;;<br>      List&lt;Student&gt; stuList = Arrays.asList(<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>));<br><br>      <span class="hljs-comment">//映射成一个新的元素</span><br>      <span class="hljs-comment">//将流中的所有名字字符串映射为姓的字符串</span><br>      Arrays.stream(str).map((name)-&gt;name.charAt(<span class="hljs-number">0</span>)).forEach(System.out::println);<br><br>      <span class="hljs-comment">//映射为提取信息</span><br>      <span class="hljs-comment">//将流中的学生对象映射为学生姓名</span><br>      stuList.stream().map((student -&gt; student.getName())).forEach(System.out::println);<br><br><br><span class="hljs-comment">//将流中的流的内容拆分出来</span><br>      <span class="hljs-comment">//将名字数组中的字符串拆为新的流，再将这个流中的内容取出来</span><br>      Arrays.stream(str).flatMap((s)-&gt;getCharacterStream(s)).forEach(System.out::println);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将字符串的的字符拆分处来转换为流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title function_">getCharacterStream</span><span class="hljs-params">(String str)</span>&#123;<br>      ArrayList&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : str.toCharArray()) &#123;<br>          list.add(c);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list.stream();<br>  &#125;<br></code></pre></td></tr></table></figure><p><a name="u10X2"></a></p><h4 id="4、中间操作-排序"><a href="#4、中间操作-排序" class="headerlink" title="4、中间操作-排序"></a>4、中间操作-排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; stuList = Arrays.asList(<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>));<br><br>   <span class="hljs-comment">//使用元素原有排序规则</span><br>   <span class="hljs-comment">//需求：按照年龄排序</span><br>   stuList.stream().sorted().forEach(System.out::println);<br><br>   <span class="hljs-comment">//使用自定义排序规则</span><br>   <span class="hljs-comment">//需求：按照工资排序</span><br>   stuList.stream().sorted((stu1,stu2)-&gt;Double.compare(stu1.getSalary(),stu2.getSalary())).forEach(System.out::println);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(student.salary, salary) == <span class="hljs-number">0</span> &amp;&amp; name.equals(student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, salary);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, salary=&quot;</span> + salary +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> Integer.compare(<span class="hljs-built_in">this</span>.age,o1.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="QfjtW"></a></p><h4 id="5、终止操作操作-匹配与查找"><a href="#5、终止操作操作-匹配与查找" class="headerlink" title="5、终止操作操作-匹配与查找"></a>5、终止操作操作-匹配与查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; stuList = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>));<br><br><span class="hljs-comment">//allMatch(断言函数接口)</span><br><span class="hljs-comment">//需求1：检查流中所有元素是否匹配 工资&gt;5000</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stuList.stream().allMatch((student -&gt; student.getSalary() &gt; <span class="hljs-number">5000</span>));<br>System.out.println(b);<br><br><span class="hljs-comment">//anyMatch(断言函数接口)</span><br><span class="hljs-comment">//需求2：检查流中所有元素至少是否有一个匹配 工资&gt;5000</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> stuList.stream().anyMatch(student -&gt; student.getSalary() &gt; <span class="hljs-number">5000</span>);<br>System.out.println(b1);<br><br><span class="hljs-comment">//noneMatch(断言函数接口) 检查流中所有元素是否都没有匹配</span><br><span class="hljs-comment">//需求3：检查流中所有元素是否都没有匹配 工资&gt;5000</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> stuList.stream().noneMatch(student -&gt; student.getSalary() &gt; <span class="hljs-number">5000</span>);<br>System.out.println(b2);<br><br><span class="hljs-comment">//findFirst() 获取流中第一个流元素</span><br><span class="hljs-comment">//需求4：返回工资最高的学生信息</span><br>Optional&lt;Student&gt; first = stuList.stream().sorted((s1, s2) -&gt; Double.compare(s1.getSalary(), s2.getSalary())).findFirst();<br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> first.get();<br>System.out.println(student);<br><br><span class="hljs-comment">//findAny() 选择任意一个流元素</span><br><span class="hljs-comment">//需求5：返回任意一个学生信息</span><br>Optional&lt;Student&gt; any = stuList.stream().findAny();<br><span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> any.get();<br>System.out.println(student1);<br><br><span class="hljs-comment">//max(外置排序器) 根据排序选择最后一个流元素（所以必须升序才能获取正确的最大元素）</span><br><span class="hljs-comment">//需求6：获取最高工资的学生信息</span><br>Optional&lt;Student&gt; max = stuList.stream().max((s1, s2) -&gt; Double.compare(s1.getSalary(), s2.getSalary()));<br><span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> max.get();<br>System.out.println(student2);<br><br><span class="hljs-comment">//min(外置排序器) 根据排序选择第一个流元素（所以必须升序才能获取正确的最小元素）</span><br><span class="hljs-comment">//需求7：获取最低工资的学生信息</span><br>Optional&lt;Student&gt; min = stuList.stream().min((s1, s2) -&gt; Double.compare(s1.getSalary(), s2.getSalary()));<br><span class="hljs-type">Student</span> <span class="hljs-variable">student3</span> <span class="hljs-operator">=</span> min.get();<br>System.out.println(student3);<br></code></pre></td></tr></table></figure><p><a name="nDHgz"></a></p><h4 id="6、终止操作-归约"><a href="#6、终止操作-归约" class="headerlink" title="6、终止操作-归约"></a>6、终止操作-归约</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">      List&lt;Student&gt; stuList = Arrays.asList(<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>));<br><br>      <span class="hljs-type">int</span>[] nums=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br><br>      <span class="hljs-comment">//求累加和</span><br>      <span class="hljs-comment">//方式1</span><br><span class="hljs-comment">//第一次让x=0，y=第一个流元素 x=x+y y=第二个流元素</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">reduce1</span> <span class="hljs-operator">=</span> Arrays.stream(nums).reduce(<span class="hljs-number">0</span>, (x, y) -&gt; x + y);<br>      System.out.println(reduce1);<br>      <span class="hljs-comment">//方式2 </span><br><span class="hljs-comment">//第一次：x=第一个流元素 y=第二个流元素 x=x+y 第二次：x=上一次的和 y=第三个流元素 x=x+y</span><br>      <span class="hljs-type">OptionalInt</span> <span class="hljs-variable">reduce2</span> <span class="hljs-operator">=</span> Arrays.stream(nums).reduce((x, y) -&gt; x + y);<br>      System.out.println(reduce2.getAsInt());<br><br><br>      <span class="hljs-comment">//获取stuList集合中所有学生工资总和</span><br>      Optional&lt;Double&gt; reduce = stuList.stream().map(student -&gt; student.getSalary()).reduce((x, y) -&gt; x + y);<br>      <span class="hljs-type">Double</span> <span class="hljs-variable">aDouble</span> <span class="hljs-operator">=</span> reduce.get();<br>      System.out.println(aDouble);<br></code></pre></td></tr></table></figure><p><a name="DWTh3"></a></p><h4 id="7、终止操作-收集"><a href="#7、终止操作-收集" class="headerlink" title="7、终止操作-收集"></a>7、终止操作-收集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; stuList = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4800</span>,<span class="hljs-string">&quot;Java&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7200</span>,<span class="hljs-string">&quot;Java&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9600</span>,<span class="hljs-string">&quot;HTML&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6100</span>,<span class="hljs-string">&quot;HTML&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">9600</span>,<span class="hljs-string">&quot;PYTHON&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>,<span class="hljs-string">&quot;PYTHON&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;吴八&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3000</span>,<span class="hljs-string">&quot;PYTHON&quot;</span>));<br><br><br><span class="hljs-comment">//需求1：把当前学生姓名提取出来，并把数据放入List集合中</span><br>List&lt;String&gt; listStuName = stuList.stream().map(student -&gt; student.getName()).collect(Collectors.toList());<br><span class="hljs-keyword">for</span> (String s : listStuName) &#123;<br>    System.out.print(s+<span class="hljs-string">&#x27;-&#x27;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--&quot;</span>);<br><br><span class="hljs-comment">//需求2：把当前学生姓名提取出来，并把数据放入Set集合中</span><br>Set&lt;String&gt; setStuName = stuList.stream().map(student -&gt; student.getName()).collect(Collectors.toSet());<br><span class="hljs-keyword">for</span> (String s : setStuName) &#123;<br>    System.out.print(s+<span class="hljs-string">&quot;-&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--&quot;</span>);<br><br><span class="hljs-comment">//需求3：把当前学生姓名提取出来，并把数据放入指定集合中</span><br>LinkedHashSet&lt;String&gt; LHSetStuName = stuList.stream().map(student -&gt; student.getName()).collect(Collectors.toCollection(LinkedHashSet::<span class="hljs-keyword">new</span>));<br><span class="hljs-keyword">for</span> (String s : LHSetStuName) &#123;<br>    System.out.print(s+<span class="hljs-string">&quot;-&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--&quot;</span>);<br><br><span class="hljs-comment">//需求4：收集/获取学生个数</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> stuList.stream().collect(Collectors.counting());<br>System.out.println(<span class="hljs-string">&quot;学生个数：&quot;</span>+length);<br><br>System.out.println(<span class="hljs-string">&quot;--&quot;</span>);<br><br><span class="hljs-comment">//需求5：收集/获取学生平均工资</span><br><span class="hljs-type">Double</span> <span class="hljs-variable">avgSalary</span> <span class="hljs-operator">=</span> stuList.stream().collect(Collectors.averagingDouble(Student::getSalary));<br>System.out.println(<span class="hljs-string">&quot;平均工资：&quot;</span>+avgSalary);<br><br><span class="hljs-comment">//需求6：收集/获取学生总工资</span><br><span class="hljs-type">Double</span> <span class="hljs-variable">sumSalary</span> <span class="hljs-operator">=</span> stuList.stream().collect(Collectors.summingDouble(Student::getSalary));<br>System.out.println(<span class="hljs-string">&quot;总工资：&quot;</span>+sumSalary);<br><br><br><span class="hljs-comment">//需求7：收集/获取学生工资最大值</span><br>Optional&lt;Double&gt; maxSalary = stuList.stream().map(Student::getSalary).collect(Collectors.maxBy(Double::compare));<br><span class="hljs-type">Double</span> <span class="hljs-variable">maxSalary_</span> <span class="hljs-operator">=</span> maxSalary.get();<br>System.out.println(maxSalary_);<br><br><span class="hljs-comment">//需求8：收集/获取学生工资最小值</span><br>Optional&lt;Double&gt; minSal = stuList.stream().map(Student::getSalary).collect(Collectors.minBy(Double::compare));<br>System.out.println(minSal.get());<br><br><br><span class="hljs-comment">//需求9：收集/获取工资最高的学生信息</span><br>Optional&lt;Student&gt; optional = stuList.stream().collect(Collectors.maxBy((stu1, stu2) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> Double.compare(stu1.getSalary(), stu2.getSalary());<br>&#125;));<br><br>System.out.println(optional.get());<br><br><span class="hljs-comment">////需求10：收集/获取工资最低的学生信息</span><br>Optional&lt;Student&gt; student = stuList.stream().collect(Collectors.minBy((stu1, stu2) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> Double.compare(stu1.getSalary(), stu2.getSalary());<br>&#125;));<br>System.out.println(student.get());<br><br><span class="hljs-comment">//需求11：按照学科分组</span><br>Map&lt;String, List&lt;Student&gt;&gt; map = stuList.stream().collect(Collectors.groupingBy(Student::getCourse));<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, List&lt;Student&gt;&gt; entry : map.entrySet()) &#123;<br>    System.out.println(entry);<br>&#125;<br><br><span class="hljs-comment">//需求12：按照学科分组，在按照年龄分组</span><br>Map&lt;String, Map&lt;String, List&lt;Student&gt;&gt;&gt; mapMap = stuList.stream().collect(Collectors.groupingBy(Student::getCourse, Collectors.groupingBy((stu -&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stu.getAge();<br>    <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">28</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;青年&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">40</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;中年&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;老年&quot;</span>;<br>    &#125;<br>&#125;))));<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Map&lt;String, List&lt;Student&gt;&gt;&gt; entry : mapMap.entrySet()) &#123;<br>    <span class="hljs-comment">//</span><br>    System.out.println(entry.getKey());<span class="hljs-comment">//第一次的分组 java、HTML、PYTHON</span><br><br>    Map&lt;String, List&lt;Student&gt;&gt; map1 = entry.getValue();<span class="hljs-comment">//第二次分组的数据</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, List&lt;Student&gt;&gt; listEntry : map1.entrySet()) &#123;<br>        System.out.println(listEntry);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//需求13：按照工资5000为标准分区</span><br><span class="hljs-comment">//将返回true的和返回false分为两组，map的key为true或者false两个分区</span><br>Map&lt;Boolean, List&lt;Student&gt;&gt; mapStuBySalary = stuList.stream().collect(Collectors.partitioningBy(stu -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (stu.getSalary() &gt; <span class="hljs-number">5000</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;));<br><span class="hljs-keyword">for</span> (Map.Entry&lt;Boolean, List&lt;Student&gt;&gt; entry : mapStuBySalary.entrySet()) &#123;<br>    System.out.println(entry);<br>&#125;<br><br><span class="hljs-comment">//需求14：获取学生工资信息(对象)，再获取总值、平均值、最大值、最小值</span><br><span class="hljs-type">DoubleSummaryStatistics</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> stuList.stream().collect(Collectors.summarizingDouble(Student::getSalary));<br>System.out.println(collect.getSum());<br>System.out.println(collect.getMax());<br>System.out.println(collect.getMin());<br><br><br><span class="hljs-comment">//需求15：拼接学生姓名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names</span> <span class="hljs-operator">=</span> stuList.stream().map(Student::getName).collect(Collectors.joining());<br>System.out.println(names);<br><span class="hljs-type">String</span> <span class="hljs-variable">collect1</span> <span class="hljs-operator">=</span> stuList.stream().map(Student::getName).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<span class="hljs-comment">//分隔符</span><br>System.out.println(collect1);<br><span class="hljs-type">String</span> <span class="hljs-variable">collect2</span> <span class="hljs-operator">=</span> stuList.stream().map(Student::getName).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>));<span class="hljs-comment">//分隔符和开始结尾字符</span><br>System.out.println(collect2);<br></code></pre></td></tr></table></figure><p><a name="LnBbV"></a></p><h3 id="（五）并行流与串行流"><a href="#（五）并行流与串行流" class="headerlink" title="（五）并行流与串行流"></a>（五）并行流与串行流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">并行流就是把一个内容拆分成多个数据块，并用不同的线程分别处理每个数据块的流。<br>Java8中将并行进行了优化，我们可以很容易的对数据进行并行操作。<br>Stream APIE可以声明性地通过parallel并行流与sequential()顺序流之间进行切换。<br>注意<br><span class="hljs-number">1.</span>默认为顺序流/串行流。<br><span class="hljs-number">2.</span>并行流一般在大数据搜索里使用到。<br><span class="hljs-number">3.</span>JDK1<span class="hljs-number">.8</span>之前也有并行流，叫做Fork/oin并行计算框架。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OptionalLong</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> LongStream.range(<span class="hljs-number">1</span>, <span class="hljs-number">10000000L</span>). <span class="hljs-comment">//生成1-100000000的数流</span><br>        parallel().<span class="hljs-comment">//转换为并行流</span><br>        reduce(Long::sum);<span class="hljs-comment">//求和</span><br><br>System.out.println(reduce);<br><span class="hljs-comment">//OptionalLong[49999995000000]</span><br></code></pre></td></tr></table></figure><p><a name="B4YdC"></a></p><h3 id="（六）Optional"><a href="#（六）Optional" class="headerlink" title="（六）Optional"></a>（六）Optional</h3><blockquote><p>Optional容器类（JDK1.8)<br>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true,调用get()方法会返回该对象。</p><p>of:<br>为非nul的值创建一个Optional。.<br>ofNullable:<br>为指定的值创建一个ptional,.如果指定的值为null,则返回一个空的Optional。<br>isPresent:<br>如果值存在返回true,否则返回false。<br>get:<br>如果Optional有值则将其返回，否则抛出NoSuchElementException。<br>ifPresent:<br>如果Optional实例有值侧为其调用consumer,否则不做处理<br>orElse:<br>如果有值则将其返回，否侧返回指定的其它值。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671853661224-4c4a8881-4550-4c8c-8b59-276d3a80edc4.png#averageHue=%23fafafa&clientId=uc7fcc535-1c99-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=372&id=ue6753f5f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=1236&originalType=binary&ratio=1&rotation=0&showTitle=false&size=252610&status=done&style=none&taskId=u33c18a86-3ad4-41b1-84d9-a2a0cbb93af&title=&width=1078.690871682917" alt="image.png"><br><a name="g2MzK"></a></p><h3 id="（七）时间组件"><a href="#（七）时间组件" class="headerlink" title="（七）时间组件"></a>（七）时间组件</h3><p><a name="O6MCw"></a></p><h4 id="1、时间对象"><a href="#1、时间对象" class="headerlink" title="1、时间对象"></a>1、时间对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//获取当前时间对象</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        System.out.println(localDateTime);<br><span class="hljs-comment">//2022-12-24T21:21:26.929</span><br><br><br>        <span class="hljs-comment">//获取指定日期时间对象</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime1</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">8</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        System.out.println(localDateTime1);<br><br>        <span class="hljs-comment">//将时间向后推2年</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime2</span> <span class="hljs-operator">=</span> localDateTime.plusYears(<span class="hljs-number">2</span>);<br>        System.out.println(localDateTime2);<br><br>        <span class="hljs-comment">//将时间提前2个月</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime3</span> <span class="hljs-operator">=</span> localDateTime.minusMonths(<span class="hljs-number">2</span>);<br>        System.out.println(localDateTime3.getYear());<span class="hljs-comment">//年</span><br>        System.out.println(localDateTime3.getMonthValue());<span class="hljs-comment">//月</span><br>        System.out.println(localDateTime3.getDayOfMonth());<span class="hljs-comment">//日</span><br>        System.out.println(localDateTime3.getHour());<span class="hljs-comment">//时</span><br>        System.out.println(localDateTime3.getMinute());<span class="hljs-comment">//分</span><br>        System.out.println(localDateTime3.getSecond());<span class="hljs-comment">//秒</span><br></code></pre></td></tr></table></figure><p><a name="UiJEf"></a></p><h4 id="2、时间戳"><a href="#2、时间戳" class="headerlink" title="2、时间戳"></a>2、时间戳</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//时间戳：从个1970年1月1日0：0：0距离现在的时间</span><br><span class="hljs-comment">//默认创建UTC时区的时间戳</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(now);<br><span class="hljs-comment">//2022-12-24T06:57:27.880Z</span><br><br><span class="hljs-comment">//获取东八区的日期时间对象</span><br><span class="hljs-comment">//需要偏移8个小时</span><br><span class="hljs-type">OffsetDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> now.atOffset(ZoneOffset.ofHours(<span class="hljs-number">8</span>));<br>System.out.println(dateTime);<br><span class="hljs-comment">//2022-12-24T14:57:27.880+08:00</span><br><br><span class="hljs-comment">//时间戳的毫秒形式</span><br>System.out.println(now.toEpochMilli());<br><span class="hljs-comment">//1671865047880</span><br><br><span class="hljs-comment">//获取一个1970年1月1日0：0：0往后退1秒的时间戳对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> Instant.ofEpochSecond(<span class="hljs-number">1</span>);<br>System.out.println(instant);<br><span class="hljs-comment">//1970-01-01T00:00:01Z</span><br><br></code></pre></td></tr></table></figure><p><a name="OB4k1"></a></p><h4 id="3、时间间隔"><a href="#3、时间间隔" class="headerlink" title="3、时间间隔"></a>3、时间间隔</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 时间间隔类 Duration</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>  Thread.sleep(<span class="hljs-number">1000</span>);<br>  <span class="hljs-type">Instant</span> <span class="hljs-variable">now1</span> <span class="hljs-operator">=</span> Instant.now();<br><br>  <span class="hljs-comment">//获取时间间隔类对象</span><br>  java.time.<span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> java.time.Duration.between(now, now1);<br>  System.out.println(duration.toHours());<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 日期间隔类 Period</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld1</span> <span class="hljs-operator">=</span> LocalDate.now();<br>  <span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld2</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2021</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>);<br><br>  <span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(ld1, ld2);<br>  System.out.println(period.getYears());<br>  System.out.println(period.getDays());<br></code></pre></td></tr></table></figure><p><a name="gaLwt"></a></p><h4 id="4、格式化时间类"><a href="#4、格式化时间类" class="headerlink" title="4、格式化时间类"></a>4、格式化时间类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt1</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>      <span class="hljs-comment">//获取本地标准的日期时间格式化对象</span><br>      <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf1</span> <span class="hljs-operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">timeStr1</span> <span class="hljs-operator">=</span> ldt1.format(dtf1);<br>      System.out.println(timeStr1);<br>      <span class="hljs-comment">//2022-12-24T15:08:07.099</span><br><br>      <span class="hljs-comment">//自定义日期时间格式化对象</span><br>      <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf2</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">timeStr2</span> <span class="hljs-operator">=</span> ldt1.format(dtf2);<br>      System.out.println(timeStr2);<br>      <span class="hljs-comment">//2022年12月24日 15:08:07</span><br><br>      <span class="hljs-comment">//将指定时间字符串解析为LocalDateTime对象</span><br>      <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> LocalDateTime.parse(<span class="hljs-string">&quot;2220年03月12日 11:03:14&quot;</span>, dtf2);<span class="hljs-comment">//转换的时间字符必须带时间（所以格式化也必须加上时间），不然报错</span><br>      System.out.println(parse);<br>      <span class="hljs-comment">//2220-03-12T11:03:14</span><br><br></code></pre></td></tr></table></figure><p><a name="w8egp"></a></p><h4 id="5、时间矫正器"><a href="#5、时间矫正器" class="headerlink" title="5、时间矫正器"></a>5、时间矫正器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">//指定月份</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt2</span> <span class="hljs-operator">=</span> now.withMonth(<span class="hljs-number">10</span>);<br>System.out.println(ldt2);<br><span class="hljs-comment">//2022-10-24T15:15:35.797</span><br><br><span class="hljs-comment">//设置下一个周末</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt3</span> <span class="hljs-operator">=</span> ldt2.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));<br>System.out.println(ldt3);<br><span class="hljs-comment">//2022-10-30T15:15:35.797</span><br><br><br><span class="hljs-comment">//自定义时间矫正器，设置下一个工作日</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt4</span> <span class="hljs-operator">=</span> now.with((temporal -&gt; &#123;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> (LocalDateTime) temporal;<br>    <span class="hljs-comment">//获取今天的星期</span><br>    <span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> localDateTime.getDayOfWeek();<br>    <span class="hljs-keyword">if</span> (dayOfWeek.equals(DayOfWeek.FRIDAY)) &#123;<span class="hljs-comment">//如果今日是周五，则推3天为工作日</span><br>        <span class="hljs-keyword">return</span> localDateTime.plusDays(<span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dayOfWeek.equals(DayOfWeek.SATURDAY)) &#123;<span class="hljs-comment">//如果今天是周六，则推2天为工作日</span><br>        <span class="hljs-keyword">return</span> localDateTime.plusDays(<span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> localDateTime.plusDays(<span class="hljs-number">1</span>);<span class="hljs-comment">//否则推1天的都是工作日</span><br>    &#125;<br><br>&#125;));<br>System.out.println(ldt4);<br><span class="hljs-comment">//2022-12-26T15:15:35.797</span><br><br></code></pre></td></tr></table></figure><p><a name="RTXvO"></a></p><h4 id="6、时区类"><a href="#6、时区类" class="headerlink" title="6、时区类"></a>6、时区类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取时区信息</span><br>Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();<br><span class="hljs-comment">//打印时区信息</span><br><span class="hljs-keyword">for</span> (String s : set) &#123;<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">//获取指定时区的时间对象</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">TokyoDate</span> <span class="hljs-operator">=</span> LocalDateTime.now(ZoneId.of(<span class="hljs-string">&quot;Asia/Tokyo&quot;</span>));<br>System.out.println(TokyoDate);<span class="hljs-comment">//2022-12-24T16:18:48.392</span><br><br><span class="hljs-comment">//给时间添加上时区信息和时间偏移量</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now(ZoneId.of(<span class="hljs-string">&quot;Asia/Tokyo&quot;</span>));<br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> now.atZone(ZoneId.of(<span class="hljs-string">&quot;Asia/Tokyo&quot;</span>));<br>System.out.println(zonedDateTime);<span class="hljs-comment">//2022-12-24T16:18:48.393+09:00[Asia/Tokyo]</span><br></code></pre></td></tr></table></figure><p><a name="Sv3zh"></a></p><h4 id="7、时间类的线程安全问题"><a href="#7、时间类的线程安全问题" class="headerlink" title="7、时间类的线程安全问题"></a>7、时间类的线程安全问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多线程中使用时间类的错误示范</span><br><span class="hljs-comment"> * 不能使用SimpleDateFormat，线程不安全，会产生脏数据</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br><br><span class="hljs-comment">//带有返回值的任务类</span><br>Callable&lt;Date&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;Date&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;20200123&quot;</span>);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//创建存储线程执行结果的对象</span><br>ArrayList&lt;Future&lt;Date&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//创建线程池</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10</span>));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    Future&lt;Date&gt; dateFuture = pool.submit(task);<br>    list.add(dateFuture);<br>&#125;<br><br><span class="hljs-keyword">for</span> (Future&lt;Date&gt; dateFuture : list) &#123;<br>    System.out.println(dateFuture.get());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正确示范：在多线程下使用JDK1.8后的时间组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//获取时间格式对象</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br><br><span class="hljs-comment">//创建任务类</span><br>Callable&lt;LocalDate&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;LocalDate&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> LocalDate.parse(<span class="hljs-string">&quot;20200123&quot;</span>, dtf);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//存储线程执行结果对象</span><br>ArrayList&lt;Future&lt;LocalDate&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//创建线程池</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10</span>));<br><br><span class="hljs-comment">//执行任务</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    Future&lt;LocalDate&gt; future = pool.submit(task);<br>    list.add(future);<br>&#125;<br><br><span class="hljs-keyword">for</span> (Future&lt;LocalDate&gt; localDateFuture : list) &#123;<br>    System.out.println(localDateFuture.get());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="teXH4"></a></p><h3 id="（八）重复注解"><a href="#（八）重复注解" class="headerlink" title="（八）重复注解"></a>（八）重复注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Repeatable(Authors.class)</span><span class="hljs-comment">//使用重复注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Author &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">info</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解容器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Authors &#123;<br>    Author[] value();<span class="hljs-comment">//将重复的注解放到注解容器中</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Author(name =&quot;何老师&quot;,info = &quot;从事java10余年&quot;)</span><br><span class="hljs-meta">@Author(name =&quot;马小龙&quot;,info = &quot;从事java10余年&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Class&lt;Test03&gt; clazz = Test03.class;<br><br>        <span class="hljs-comment">//当有重复注解时，将注解都放到Authors中的容器中</span><br>        <span class="hljs-type">Authors</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> clazz.getAnnotation(Authors.class);<br>        Author[] value = annotation.value();<br>        <span class="hljs-keyword">for</span> (Author author : value) &#123;<br>            System.out.println(author.name()+<span class="hljs-string">&quot;--&quot;</span>+author.info());<br>        &#125;<br><br>        <span class="hljs-comment">//或者getAnnotationsByType获取所有的Author注解信息</span><br>        Author[] annotationsByType = clazz.getAnnotationsByType(Author.class);<br>        <span class="hljs-keyword">for</span> (Author author : annotationsByType) &#123;<br>            System.out.println(author);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="q8T9y"></a></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34283394/1671870198889-7ae028c3-d510-4c4e-922f-571292f77fc5.png#averageHue=%23dfdedb&clientId=uc7fcc535-1c99-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=285&id=u4990d93a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=327&originWidth=873&originalType=binary&ratio=1&rotation=0&showTitle=false&size=202525&status=done&style=none&taskId=u13fa2448-cd86-46c7-b5ed-c90da04bb14&title=&width=761.8908826692449" alt="image.png"></p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h3><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/ea9036db66e7e2859f1a0267bd2d2a93--74ee--image-20230203101816418.png" alt="image-20230203101816418"></p><p>JVM采用分代回收的算法，即根据对象的生命周期进行区分并进行分代存储和回收，其主要分为年轻代、老年代、持久代</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/c30140635da1a474c8a821a280589d02--6172--image-20230203102028393.png" alt="image-20230203102028393"></p><p>堆内存主要由年轻代和老年代组成，而方法区主要存储持久代的数据</p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><blockquote><p>从 JDK 1.8 开始，永久代已经被移除了，取而代之的是元空间（Meta Space），它和服务器的内存相关联</p><p>元空间，元空间不再与堆连续，而且是存在于本地内存（Native memory）。</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/5e20eac1e020abde8c5032379f88708d--9363--image-20230203103616430.png" alt="image-20230203103616430"></p><h3 id="“垃圾”识别算法"><a href="#“垃圾”识别算法" class="headerlink" title="“垃圾”识别算法"></a>“垃圾”识别算法</h3><p>判断一个对象是否是“垃圾”，即判定一个对象的存活与否，常见的算法有两种：<strong>引用计数法</strong>和<strong>根搜索算法</strong></p><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><blockquote><p>引用计数算法（Reference Counting Collector）</p><p>一个对象被创建之后，系统会给这个对象初始化一个引用计数器，当这个对象被引用了，则计数器 +1，而当该引用失效后，计数器便 -1，直到计数器为 0，意味着该对象不再被使用了，则可以将其进行回收了。</p><p>这种算法其实很好用，判定比较简单，效率也很高，但是却有一个很致命的缺点，就是它无法避免循环引用，即两个对象之间循环引用的时候，各自的计数器始终不会变成 0，所以 <strong>引用计数算法</strong> 只出现在了早期的 JVM 中，现在基本不再使用了。</p></blockquote><h4 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h4><blockquote><p>根搜索算法（Tracing Collector）</p><p>根搜索算法的中心思想，就是从某一些指定的根对象（GC Roots）出发，一步步遍历找到和这个根对象具有引用关系的对象，然后再从这些对象开始继续寻找，从而形成一个个的引用链（其实就和图论的思想一致），然后不在这些引用链上面的对象便被标识为引用不可达对象，也就是我们说的“垃圾”，这些对象便需要回收掉。这种算法很好地解决了上面 <strong>引用计数算法</strong> 的循环引用的问题了。</p><p>算法的核心思想是很简单的，就是标记不可达对象，然后交由 GC 进行回收。</p></blockquote><h5 id="根对象"><a href="#根对象" class="headerlink" title="根对象"></a>根对象</h5><blockquote><ul><li>一般有如下集中：</li><li>虚拟机栈中引用的对象（栈帧中的本地变量表）；</li><li>方法区中常量引用的对象；</li><li>方法区中静态属性引用的对象；</li><li>本地方法栈中 JNI（Native 方法）引用的对象；</li><li>活跃线程。</li></ul></blockquote><p><strong>但其实，上述算法只是一个算法的中心思想，实际执行过程是比这个复杂的，另外，GC 判断对象是否可达其实看的还是强引用。</strong></p><blockquote><p>1、进行根搜索的时候，是需要暂停所有线程的，即执行一次 STW（Stop The World），最主要的目的是防止上述的对象图在算法运行的过程中有变化从而影响算法的准确性。</p><p>2、线程暂停的时间长短，取决于对象的多少，和堆内存的大小无关。</p><p>3、宣告一个对象的“死亡”其实不仅仅通过上述的算法计算，而是<strong>需要经历两次的标记</strong>。</p></blockquote><h3 id="“垃圾”回收算法"><a href="#“垃圾”回收算法" class="headerlink" title="“垃圾”回收算法"></a>“垃圾”回收算法</h3><h4 id="常用的回收算法"><a href="#常用的回收算法" class="headerlink" title="常用的回收算法"></a>常用的回收算法</h4><blockquote><p><strong>标记-清除算法</strong>、<strong>标记-整理算法</strong>、<strong>复制算法</strong>，以及系统自动进行判定使用的 <strong>适应性算法</strong>。</p></blockquote><h5 id="1、标记-清除算法（Tracing-Collector）"><a href="#1、标记-清除算法（Tracing-Collector）" class="headerlink" title="1、标记 - 清除算法（Tracing Collector）"></a>1、标记 - 清除算法（Tracing Collector）</h5><blockquote><p>标记-清除 算法是最基础的收集算法，它是由 <strong>标记</strong> 和 <strong>清除</strong> 两个步骤组成的。</p><p>标记的过程其实就是上面的 <strong>根搜索算法</strong> 所标记的不可达对象，当所有的待回收的“垃圾对象”标记完成之后，便进行第二个步骤：<strong>统一清除</strong>。</p><p>该算法的优点是当存活对象比较多的时候，性能比较高，因为该算法只需要处理待回收的对象，而不需要处理存活的对象。</p><p>但是缺点也很明显，就是在执行完 <strong>标记-整理</strong> 之后，由于将“垃圾对象”回收掉了，所以原本连续使用的内存块便会变得不连续，这样会导致内存块上面会出现很多小单元的内存区域，这些小单元的内存区域只能够存放比较小的对象，而比较大的对象是无法直接存储的。<strong>即原本空闲 1M 的内存区域，有可能会出现无法直接存放 0.9M 大小的对象。</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/94b7c5f956b3573a046eaaa3dd6e7247--fe7b--image-20230203105258709.png" alt="image-20230203105258709"></p><h5 id="2、标记-整理算法（Compacting-Collector）"><a href="#2、标记-整理算法（Compacting-Collector）" class="headerlink" title="2、标记 - 整理算法（Compacting Collector）"></a>2、标记 - 整理算法（Compacting Collector）</h5><blockquote><p>上述的 <strong>标记-清除</strong> 算法会产生内存区域使用的间断，所以为了将内存区域尽可能地连续使用， <strong>标记-整理</strong> 算法应运而生。</p><p><strong>标记-整理</strong> 算法也是由两步组成，<strong>标记</strong> 和 <strong>整理</strong>。</p><p>第一步的 <strong>标记</strong> 动作也是使用的 <strong>根搜索算法</strong>，但是在标记完成之后的动作却和 <strong>标记-清除算法</strong> 天壤之别，该算法并不会直接清除掉可回收对象 ，而是让所有的对象都向一端移动，然后将端边界以外的内存全部清理掉。</p><p>该算法所带来的最大的优势便是使得内存上面不会再有碎片问题，并且新对象的分配只需要通过简单的指针碰撞便可完成。</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/3f6040ad245ab6a84ef0e3d32a23bb80--1fc5--image-20230203105432422.png" alt="image-20230203105432422"></p><h5 id="3、复制算法（Copying-Collector）"><a href="#3、复制算法（Copying-Collector）" class="headerlink" title="3、复制算法（Copying Collector）"></a>3、复制算法（Copying Collector）</h5><blockquote><p>无论是<strong>标记-清除算法</strong>还是<strong>垃圾-整理算法</strong>，都会涉及句柄的开销或是面对碎片化的内存回收，所以，<strong>复制算法</strong> 出现了。</p><p>复制算法将内存区域均分为了两块（记为S0和S1），而每次在创建对象的时候，只使用其中的一块区域（例如S0），当S0使用完之后，便将S0上面存活的对象全部复制到S1上面去，然后将S0全部清理掉。</p><p>复制算法的优势是：① 不会产生内存碎片；② 标记和复制可以同时进行；③ 复制时也只需要移动栈顶指针即可，按顺序分配内存，简单高效；④ 每次只需要回收一块内存区域即可，而不用回收整块内存区域，所以性能会相对高效一点。</p><p>但是缺点也是很明显的：可用的内存减小了一半，存在内存浪费的情况。</p><p>所以 <strong>复制算法</strong> 一般会用于对象存活时间比较短的区域，例如 <strong>年轻代</strong>，而存活时间比较长的 <strong>老年代</strong> 是不适合的，因为老年代存在大量存活时间长的对象，采用复制算法的时候会要求复制的对象较多，效率也就急剧下降，所以老年代一般会使用上文提到的 <strong>标记-整理算法</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/17f5627e1496cd327ac9bf9c8d45945d--61b2--image-20230203105619884.png" alt="image-20230203105619884"></p><h5 id="4、适应性算法（Adaptive-Collector）"><a href="#4、适应性算法（Adaptive-Collector）" class="headerlink" title="4、适应性算法（Adaptive Collector）"></a>4、适应性算法（Adaptive Collector）</h5><blockquote><p><strong>适应性算法</strong> 其实不是一种单独的回收算法，他只是一种智能选择回收算法的机制，也就是该算法会根据堆内存具体的使用情况而自动选用更适合当前情况的回收算法。</p></blockquote><h4 id="各内存区的GC过程："><a href="#各内存区的GC过程：" class="headerlink" title="各内存区的GC过程："></a>各内存区的GC过程：</h4><blockquote><ol><li>对象首次创建进行内存分配的时候，首先会放置在 Eden 区，当 Eden 区放满了或者当该对象太大无法放进 Eden 区的时候，此时会对年轻代（Eden区 和 S0）进行一次 GC，将幸存下来的对象放置在 S1，然后清空掉 Eden区和 S0 区；（此时年轻代采用的是 <strong>复制算法</strong>）</li><li>在上面第一步中对年轻代进行垃圾回收的时候，同时会对幸存的对象进行标记，统计每个幸存对象经历的 GC 次数；</li><li>当 S1 区满了之后，或者年轻代的对象经历过指定次数的 GC 之后，这部分对象会被放置到老年代之中；</li><li>当老年代也满了之后，便会对老年代进行一次 GC；（老年代采用的是 <strong>标记-整理算法</strong>）</li></ol></blockquote><h3 id="“垃圾”回收器（GC）"><a href="#“垃圾”回收器（GC）" class="headerlink" title="“垃圾”回收器（GC）"></a>“垃圾”回收器（GC）</h3><h4 id="垃圾回收器的类型"><a href="#垃圾回收器的类型" class="headerlink" title="垃圾回收器的类型"></a>垃圾回收器的类型</h4><blockquote><p>在 Java 语言中，垃圾回收器按照执行机制来进行划分，主要分为四种类型：</p><ol><li>串行垃圾回收器（Serial Garbage Collector）；</li><li>并行垃圾回收器（Parallel Garbage Collector）；</li><li>并发标记扫描垃圾回收器（CMS Garbage Collector）；</li><li>G1垃圾回收器（G1 Garbage Collector）。</li></ol></blockquote><p>我们可以通过向 JVM 传递参数来指定其中一款垃圾回收器。</p><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/25928405afe276aaf0c4e2011e02c8f8--092e--image-20230203110353268.png" alt="image-20230203110353268"></p><h5 id="1、串行垃圾回收器（Serial-Garbage-Collector）"><a href="#1、串行垃圾回收器（Serial-Garbage-Collector）" class="headerlink" title="1、串行垃圾回收器（Serial Garbage Collector）"></a>1、串行垃圾回收器（Serial Garbage Collector）</h5><blockquote><p>串行垃圾回收器<strong>会暂停所有的应用程序线程</strong>，并采用<strong>单独的的线程</strong>进行 GC。</p><p>适用于<strong>单 CPU</strong>、并且<strong>对应用程序的暂停时间要求不高</strong>的情况，所以不太适合当前的生产环境。</p></blockquote><h5 id="2、并行垃圾回收器（Parallel-Garbage-Collector）"><a href="#2、并行垃圾回收器（Parallel-Garbage-Collector）" class="headerlink" title="2、并行垃圾回收器（Parallel Garbage Collector）"></a>2、并行垃圾回收器（Parallel Garbage Collector）</h5><blockquote><p>并行垃圾回收器是 JVM <strong>默认</strong>的垃圾回收器，相较于串行垃圾回收器而言<strong>性能稍有提升</strong>，它也是<strong>需要暂停所有的应用程序线程</strong>的，但是区别是它会使用<strong>多线程</strong>进行 GC。</p><p>所以并行垃圾回收器适用于<strong>多 CPU</strong> 的服务器、并且<strong>能接受短暂的应用暂停</strong>的程序。</p></blockquote><h5 id="3、并发标记扫描垃圾回收器（CMS-Garbage-Collector）"><a href="#3、并发标记扫描垃圾回收器（CMS-Garbage-Collector）" class="headerlink" title="3、并发标记扫描垃圾回收器（CMS Garbage Collector）"></a>3、并发标记扫描垃圾回收器（CMS Garbage Collector）</h5><blockquote><p>CMS 回收器也是一种<strong>并行</strong>的垃圾回收器，它会采用<strong>多线程</strong>来进行扫描堆内存，<strong>标记需要清理的对象并将这些对象清理掉。</strong></p><p>但是 CMS 它<strong>需要更多的 CPU 来保证程序的吞吐量</strong>，并且它<strong>保证了最短的回收停顿时间</strong>，所以，在服务器允许的情况下，为了达到更到的性能，我们应该使用 CMS 来代替默认的 并行垃圾回收器。</p></blockquote><h5 id="4、G1-垃圾回收器（G1-Garbage-Collector）"><a href="#4、G1-垃圾回收器（G1-Garbage-Collector）" class="headerlink" title="4、G1 垃圾回收器（G1 Garbage Collector）"></a>4、G1 垃圾回收器（G1 Garbage Collector）</h5><blockquote><p>G1 垃圾回收器是在 JDK1.7 中才正式引入的一款垃圾回收器，G1 的引入，目的就是为了取代 CMS 的。</p><p>不要被上面 G1 的示意图误导， G1 并没有将内存进行物理划分，它只是将堆内存划分为一个个的 Region，但是也是属于分代垃圾回收器，G1 仍然会区分年轻代和老年代，并且年轻代仍然会有 Eden 区和 Survivor 区。</p></blockquote><p><img src="C:/Users/LiuXinLei/AppData/Roaming/Typora/typora-user-images/image-20230203110937895.png" alt="image-20230203110937895"></p><h4 id="JVM-HotSpot-VM-7种垃圾收集器"><a href="#JVM-HotSpot-VM-7种垃圾收集器" class="headerlink" title="JVM(HotSpot VM)7种垃圾收集器"></a>JVM(HotSpot VM)7种垃圾收集器</h4><blockquote><ol><li><p>Serial – 串行垃圾回收器 – 复制算法</p></li><li><p>ParNew – 串行垃圾回收器的多线程版本 – 复制算法</p></li><li><p>Parallel Scavenge – 并行垃圾回收器 – 复制算法</p></li><li><p>Serial Old – 串行垃圾回收器的老年代版本 – 标记-整理算法</p></li><li><p>Parallel Old – 并行垃圾回收器的老年代版本 – 标记-整理算法</p></li><li><p>CMS – 并发标记扫描垃圾回收器 – 标记-清除算法</p><ul><li><p>步骤</p><ol><li><p>初始标记</p></li><li><p>并发标记</p></li><li><p>重新标记</p></li><li><p>并发清除</p></li></ol></li></ul></li><li><p>G1 垃圾回收器 – 标记-整理算法，复制算法</p><ul><li>步骤<ol><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol></li></ul></li></ol></blockquote><p>其中，1、2、3 种适合年轻代内存区的垃圾回收，4、5、6种适合老年代内存区的垃圾回收，并且它们之间是两两组合来进行使用的，详见下图：</p><p><img src="C:/Users/LiuXinLei/AppData/Roaming/Typora/typora-user-images/image-20230203111233297.png" alt="image-20230203111233297"></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote><ol><li>节点是黑色或者红色；</li><li>根是黑色；</li><li>叶子节点（外部节点，空节点）都是<strong>黑色，</strong>这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点；</li><li>红色节点的子节点为黑色<ol><li>红色节点的父节点为黑色</li><li>从根节点到叶子节点的所有路径上不能有两个连续的红色节点</li></ol></li><li>从任一节点到叶子节点的所有路径上黑色节点的数目相同</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/shixiaoliuo/image-store/main/PicGo/2023-02-03/9400fa0322dedec0ca9e03d7d5fb98d9--99a1--image-20230203142214760.png" alt="image-20230203142214760"></p><h1 id="Guava对集合的支持"><a href="#Guava对集合的支持" class="headerlink" title="Guava对集合的支持"></a>Guava对集合的支持</h1><p>版本下载：https:&#x2F;repo1.maven.org&#x2F;maven2&#x2F;com&#x2F;google&#x2F;guava&#x2F;guava&#x2F;<br>Guava工程包含了若干被Google的ava项目广泛依赖的核心库，例如：集合[collections]、缓存[caching]、原生类型支持[primitives support]、并发库[concurrency libraries]、通用注解[common annotations]、字符串处理[string processing】、I&#x2F;O等等。所有这些工具每天都在被Google的工程师应用在产品服务中。</p><p>Guavai对DK集合的扩展，这是Guaval最成熟和为人所知的部分。</p><p>1、不可变集合：用不变的集合进行防御性编程和性能提升。<br>2、新集合类型：multisets,multimaps,tables等<br>3、强大的集合工具类：提供java.util.Collections中没有的集合工具<br>4、扩展工具类：让实现和扩展集合类变得更容易，比如创建Collection的装饰器，实现迭代器</p><blockquote><p>示例</p><p>1、只读设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 设置只读</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:14</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test guava&quot;</span>);<br><span class="hljs-comment">//        List&lt;String&gt; list = Arrays.asList(&quot;jack&quot;, &quot;tom&quot;, &quot;lily&quot;, &quot;bin&quot;);</span><br><span class="hljs-comment">//        list.add(&quot;vince&quot;);</span><br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;lily&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bin&quot;</span>);<br>        List&lt;String&gt; readList = Collections.unmodifiableList(list);<br><span class="hljs-comment">//        readList.add(&quot;vince&quot;);</span><br><br>        ImmutableList&lt;String&gt; iList = ImmutableList.of(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;bin&quot;</span>);<br><span class="hljs-comment">//        iList.add(&quot;vince&quot;);</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>2、函数式编程：过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava2</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; list = Lists.newArrayList(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;h5&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>);<br>    Collection&lt;String&gt; result = Collections2.filter(list, e -&gt; e.startsWith(<span class="hljs-string">&quot;j&quot;</span>));<br>    result.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>3、函数式编程：转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 转换</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava3</span><span class="hljs-params">()</span> &#123;<br>    HashSet&lt;Long&gt; timeSet = Sets.newHashSet(<span class="hljs-number">20121212L</span>, <span class="hljs-number">20170520L</span>, <span class="hljs-number">20160808L</span>);<br>    Collection&lt;String&gt; timeCollect = Collections2.transform(timeSet, (e) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(e));<br>    timeCollect.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、组合式函数编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 组合式函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava4</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; list = Lists.newArrayList(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;h5&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>);<br>    Function&lt;String, String&gt; f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>            <span class="hljs-keyword">return</span> s.length() &gt; <span class="hljs-number">3</span> ? s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>) : s;<br>        &#125;<br>    &#125;;<br>    Function&lt;String, String&gt; f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>            <span class="hljs-keyword">return</span> s.toUpperCase();<br>        &#125;<br>    &#125;;<br>    Function&lt;String, String&gt; f = Functions.compose(f1, f2);<br>    Collection&lt;String&gt; coll = Collections2.transform(list, f);<br>    coll.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>5、加入约束：非空、长度验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 加入约束：非空、长度验证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:36</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava5</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        Set&lt;string&gt; set Sets.newHashSet();</span><br><span class="hljs-comment">//        //14版可用</span><br><span class="hljs-comment">//        Constraint&lt;String&gt; constraint new Constraint&lt;&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public String checkElement(String element) &#123;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Preconditions.checkArgument(expression);</span><br><span class="hljs-comment">//        Preconditions.checkNotNull(reference);</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>6、集合操作：交集、差集、并集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 集合操作：交集、差集、并集</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:37</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava6</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;Integer&gt; set1 = Sets.newHashSet(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    Set&lt;Integer&gt; set2 = Sets.newHashSet(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//交集</span><br>    Sets.SetView&lt;Integer&gt; v1 = Sets.intersection(set1, set2);<br>    v1.forEach(System.out::println);<br><br>    <span class="hljs-comment">//差集</span><br>    Sets.SetView&lt;Integer&gt; v2 = Sets.difference(set1, set2);<br>    v2.forEach(System.out::println);<br><br>    <span class="hljs-comment">//并集</span><br>    Sets.SetView&lt;Integer&gt; v3 = Sets.union(set1, set2);<br>    v3.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>7、Multiset:无序可重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Multiset:无序可重复</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:43</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava7</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good good study day day up&quot;</span>;<br>    String[] ss = s.split(<span class="hljs-string">&quot; &quot;</span>);<br>    HashMultiset&lt;String&gt; set = HashMultiset.create();<br>    <span class="hljs-keyword">for</span> (String str : ss) &#123;<br>        set.add(str);<br>    &#125;<br><br>    Set&lt;String&gt; set2 = set.elementSet();<br>    <span class="hljs-keyword">for</span> (String str : set2) &#123;<br>        System.out.println(str + <span class="hljs-string">&quot;:&quot;</span> + set.count(str));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8、Multimap key可以重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Multimap key可以重复</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava8</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;java从入门到精通&quot;</span>, <span class="hljs-string">&quot;bin&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;Android从入门到精通&quot;</span>, <span class="hljs-string">&quot;bin&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;PHP从入门到精通&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;笑看人生&quot;</span>, <span class="hljs-string">&quot;vince&quot;</span>);<br><br>    Multimap&lt;String, String&gt; mmap = ArrayListMultimap.create();<br>    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        Map.Entry&lt;String, String&gt; entry = iterator.next();<br>        mmap.put(entry.getValue(), entry.getKey());<br>    &#125;<br><br>    Set&lt;String&gt; keySet = mmap.keySet();<br>    <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>        Collection&lt;String&gt; values = mmap.get(key);<br>        System.out.println(key + <span class="hljs-string">&quot;-&gt;&quot;</span> + values);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>9、BiMap:双向Map(bidirectional Map)键与值不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: BiMap:双向Map(bidirectional Map)键与值不能重复</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 20:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava9</span><span class="hljs-params">()</span> &#123;<br>    BiMap&lt;String, String&gt; map = HashBiMap.create();<br>    map.put(<span class="hljs-string">&quot;finally_test&quot;</span>, <span class="hljs-string">&quot;18201583398&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;bin_test&quot;</span>, <span class="hljs-string">&quot;18388881521&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> map.inverse().get(<span class="hljs-string">&quot;18201583398&quot;</span>);<br>    System.out.println(result);<span class="hljs-comment">//finally_test</span><br>&#125;<br></code></pre></td></tr></table></figure><p>10、双键的Map-&gt;Table-&gt;rowKey-+columnKye+value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 双键的Map-&gt;Table-&gt;rowKey-+columnKye+value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LiuXinLei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createDate</span>: 2023/1/1 21:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuava10</span><span class="hljs-params">()</span> &#123;<br>    Table&lt;String,String,Integer&gt; table = HashBasedTable.create();<br>    table.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-number">80</span>);<br>    table.put(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-number">70</span>);<br>    table.put(<span class="hljs-string">&quot;bin&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-number">59</span>);<br>    table.put(<span class="hljs-string">&quot;lily&quot;</span>,<span class="hljs-string">&quot;ui&quot;</span>,<span class="hljs-number">98</span>);<br><br>    Set&lt;Table.Cell&lt;String, String, Integer&gt;&gt; cells = table.cellSet();<br>    <span class="hljs-keyword">for</span> (Table.Cell&lt;String, String, Integer&gt; c : cells) &#123;<br>        System.out.println(c.getRowKey() + <span class="hljs-string">&quot;-&quot;</span> + c.getColumnKey()+<span class="hljs-string">&quot;-&quot;</span> + c.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>javaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/04/hello-world/"/>
    <url>/2023/02/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
